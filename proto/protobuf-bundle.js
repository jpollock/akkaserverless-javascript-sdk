/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
"use strict";

var $protobuf = require("protobufjs/minimal");

// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

$root.akkaserverless = (function() {

    /**
     * Namespace akkaserverless.
     * @exports akkaserverless
     * @namespace
     */
    var akkaserverless = {};

    akkaserverless.FieldOptions = (function() {

        /**
         * Properties of a FieldOptions.
         * @memberof akkaserverless
         * @interface IFieldOptions
         * @property {boolean|null} [entityKey] FieldOptions entityKey
         */

        /**
         * Constructs a new FieldOptions.
         * @memberof akkaserverless
         * @classdesc Represents a FieldOptions.
         * @implements IFieldOptions
         * @constructor
         * @param {akkaserverless.IFieldOptions=} [properties] Properties to set
         */
        function FieldOptions(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * FieldOptions entityKey.
         * @member {boolean} entityKey
         * @memberof akkaserverless.FieldOptions
         * @instance
         */
        FieldOptions.prototype.entityKey = false;

        /**
         * Creates a new FieldOptions instance using the specified properties.
         * @function create
         * @memberof akkaserverless.FieldOptions
         * @static
         * @param {akkaserverless.IFieldOptions=} [properties] Properties to set
         * @returns {akkaserverless.FieldOptions} FieldOptions instance
         */
        FieldOptions.create = function create(properties) {
            return new FieldOptions(properties);
        };

        /**
         * Encodes the specified FieldOptions message. Does not implicitly {@link akkaserverless.FieldOptions.verify|verify} messages.
         * @function encode
         * @memberof akkaserverless.FieldOptions
         * @static
         * @param {akkaserverless.IFieldOptions} message FieldOptions message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        FieldOptions.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.entityKey != null && Object.hasOwnProperty.call(message, "entityKey"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.entityKey);
            return writer;
        };

        /**
         * Encodes the specified FieldOptions message, length delimited. Does not implicitly {@link akkaserverless.FieldOptions.verify|verify} messages.
         * @function encodeDelimited
         * @memberof akkaserverless.FieldOptions
         * @static
         * @param {akkaserverless.IFieldOptions} message FieldOptions message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a FieldOptions message from the specified reader or buffer.
         * @function decode
         * @memberof akkaserverless.FieldOptions
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {akkaserverless.FieldOptions} FieldOptions
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        FieldOptions.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.FieldOptions();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.entityKey = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a FieldOptions message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof akkaserverless.FieldOptions
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {akkaserverless.FieldOptions} FieldOptions
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        FieldOptions.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a FieldOptions message.
         * @function verify
         * @memberof akkaserverless.FieldOptions
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        FieldOptions.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.entityKey != null && message.hasOwnProperty("entityKey"))
                if (typeof message.entityKey !== "boolean")
                    return "entityKey: boolean expected";
            return null;
        };

        /**
         * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof akkaserverless.FieldOptions
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {akkaserverless.FieldOptions} FieldOptions
         */
        FieldOptions.fromObject = function fromObject(object) {
            if (object instanceof $root.akkaserverless.FieldOptions)
                return object;
            var message = new $root.akkaserverless.FieldOptions();
            if (object.entityKey != null)
                message.entityKey = Boolean(object.entityKey);
            return message;
        };

        /**
         * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
         * @function toObject
         * @memberof akkaserverless.FieldOptions
         * @static
         * @param {akkaserverless.FieldOptions} message FieldOptions
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        FieldOptions.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.entityKey = false;
            if (message.entityKey != null && message.hasOwnProperty("entityKey"))
                object.entityKey = message.entityKey;
            return object;
        };

        /**
         * Converts this FieldOptions to JSON.
         * @function toJSON
         * @memberof akkaserverless.FieldOptions
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        FieldOptions.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return FieldOptions;
    })();

    akkaserverless.FileOptions = (function() {

        /**
         * Properties of a FileOptions.
         * @memberof akkaserverless
         * @interface IFileOptions
         * @property {akkaserverless.IEventSourcedEntity|null} [eventSourcedEntity] FileOptions eventSourcedEntity
         */

        /**
         * Constructs a new FileOptions.
         * @memberof akkaserverless
         * @classdesc Represents a FileOptions.
         * @implements IFileOptions
         * @constructor
         * @param {akkaserverless.IFileOptions=} [properties] Properties to set
         */
        function FileOptions(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * FileOptions eventSourcedEntity.
         * @member {akkaserverless.IEventSourcedEntity|null|undefined} eventSourcedEntity
         * @memberof akkaserverless.FileOptions
         * @instance
         */
        FileOptions.prototype.eventSourcedEntity = null;

        /**
         * Creates a new FileOptions instance using the specified properties.
         * @function create
         * @memberof akkaserverless.FileOptions
         * @static
         * @param {akkaserverless.IFileOptions=} [properties] Properties to set
         * @returns {akkaserverless.FileOptions} FileOptions instance
         */
        FileOptions.create = function create(properties) {
            return new FileOptions(properties);
        };

        /**
         * Encodes the specified FileOptions message. Does not implicitly {@link akkaserverless.FileOptions.verify|verify} messages.
         * @function encode
         * @memberof akkaserverless.FileOptions
         * @static
         * @param {akkaserverless.IFileOptions} message FileOptions message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        FileOptions.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eventSourcedEntity != null && Object.hasOwnProperty.call(message, "eventSourcedEntity"))
                $root.akkaserverless.EventSourcedEntity.encode(message.eventSourcedEntity, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified FileOptions message, length delimited. Does not implicitly {@link akkaserverless.FileOptions.verify|verify} messages.
         * @function encodeDelimited
         * @memberof akkaserverless.FileOptions
         * @static
         * @param {akkaserverless.IFileOptions} message FileOptions message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        FileOptions.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a FileOptions message from the specified reader or buffer.
         * @function decode
         * @memberof akkaserverless.FileOptions
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {akkaserverless.FileOptions} FileOptions
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        FileOptions.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.FileOptions();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eventSourcedEntity = $root.akkaserverless.EventSourcedEntity.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a FileOptions message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof akkaserverless.FileOptions
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {akkaserverless.FileOptions} FileOptions
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        FileOptions.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a FileOptions message.
         * @function verify
         * @memberof akkaserverless.FileOptions
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        FileOptions.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eventSourcedEntity != null && message.hasOwnProperty("eventSourcedEntity")) {
                var error = $root.akkaserverless.EventSourcedEntity.verify(message.eventSourcedEntity);
                if (error)
                    return "eventSourcedEntity." + error;
            }
            return null;
        };

        /**
         * Creates a FileOptions message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof akkaserverless.FileOptions
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {akkaserverless.FileOptions} FileOptions
         */
        FileOptions.fromObject = function fromObject(object) {
            if (object instanceof $root.akkaserverless.FileOptions)
                return object;
            var message = new $root.akkaserverless.FileOptions();
            if (object.eventSourcedEntity != null) {
                if (typeof object.eventSourcedEntity !== "object")
                    throw TypeError(".akkaserverless.FileOptions.eventSourcedEntity: object expected");
                message.eventSourcedEntity = $root.akkaserverless.EventSourcedEntity.fromObject(object.eventSourcedEntity);
            }
            return message;
        };

        /**
         * Creates a plain object from a FileOptions message. Also converts values to other types if specified.
         * @function toObject
         * @memberof akkaserverless.FileOptions
         * @static
         * @param {akkaserverless.FileOptions} message FileOptions
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        FileOptions.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.eventSourcedEntity = null;
            if (message.eventSourcedEntity != null && message.hasOwnProperty("eventSourcedEntity"))
                object.eventSourcedEntity = $root.akkaserverless.EventSourcedEntity.toObject(message.eventSourcedEntity, options);
            return object;
        };

        /**
         * Converts this FileOptions to JSON.
         * @function toJSON
         * @memberof akkaserverless.FileOptions
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        FileOptions.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return FileOptions;
    })();

    akkaserverless.MethodOptions = (function() {

        /**
         * Properties of a MethodOptions.
         * @memberof akkaserverless
         * @interface IMethodOptions
         * @property {akkaserverless.IEventing|null} [eventing] MethodOptions eventing
         * @property {akkaserverless.IView|null} [view] MethodOptions view
         */

        /**
         * Constructs a new MethodOptions.
         * @memberof akkaserverless
         * @classdesc Represents a MethodOptions.
         * @implements IMethodOptions
         * @constructor
         * @param {akkaserverless.IMethodOptions=} [properties] Properties to set
         */
        function MethodOptions(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MethodOptions eventing.
         * @member {akkaserverless.IEventing|null|undefined} eventing
         * @memberof akkaserverless.MethodOptions
         * @instance
         */
        MethodOptions.prototype.eventing = null;

        /**
         * MethodOptions view.
         * @member {akkaserverless.IView|null|undefined} view
         * @memberof akkaserverless.MethodOptions
         * @instance
         */
        MethodOptions.prototype.view = null;

        /**
         * Creates a new MethodOptions instance using the specified properties.
         * @function create
         * @memberof akkaserverless.MethodOptions
         * @static
         * @param {akkaserverless.IMethodOptions=} [properties] Properties to set
         * @returns {akkaserverless.MethodOptions} MethodOptions instance
         */
        MethodOptions.create = function create(properties) {
            return new MethodOptions(properties);
        };

        /**
         * Encodes the specified MethodOptions message. Does not implicitly {@link akkaserverless.MethodOptions.verify|verify} messages.
         * @function encode
         * @memberof akkaserverless.MethodOptions
         * @static
         * @param {akkaserverless.IMethodOptions} message MethodOptions message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MethodOptions.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eventing != null && Object.hasOwnProperty.call(message, "eventing"))
                $root.akkaserverless.Eventing.encode(message.eventing, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.view != null && Object.hasOwnProperty.call(message, "view"))
                $root.akkaserverless.View.encode(message.view, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified MethodOptions message, length delimited. Does not implicitly {@link akkaserverless.MethodOptions.verify|verify} messages.
         * @function encodeDelimited
         * @memberof akkaserverless.MethodOptions
         * @static
         * @param {akkaserverless.IMethodOptions} message MethodOptions message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MethodOptions.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MethodOptions message from the specified reader or buffer.
         * @function decode
         * @memberof akkaserverless.MethodOptions
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {akkaserverless.MethodOptions} MethodOptions
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MethodOptions.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.MethodOptions();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eventing = $root.akkaserverless.Eventing.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.view = $root.akkaserverless.View.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MethodOptions message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof akkaserverless.MethodOptions
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {akkaserverless.MethodOptions} MethodOptions
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MethodOptions.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MethodOptions message.
         * @function verify
         * @memberof akkaserverless.MethodOptions
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MethodOptions.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eventing != null && message.hasOwnProperty("eventing")) {
                var error = $root.akkaserverless.Eventing.verify(message.eventing);
                if (error)
                    return "eventing." + error;
            }
            if (message.view != null && message.hasOwnProperty("view")) {
                var error = $root.akkaserverless.View.verify(message.view);
                if (error)
                    return "view." + error;
            }
            return null;
        };

        /**
         * Creates a MethodOptions message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof akkaserverless.MethodOptions
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {akkaserverless.MethodOptions} MethodOptions
         */
        MethodOptions.fromObject = function fromObject(object) {
            if (object instanceof $root.akkaserverless.MethodOptions)
                return object;
            var message = new $root.akkaserverless.MethodOptions();
            if (object.eventing != null) {
                if (typeof object.eventing !== "object")
                    throw TypeError(".akkaserverless.MethodOptions.eventing: object expected");
                message.eventing = $root.akkaserverless.Eventing.fromObject(object.eventing);
            }
            if (object.view != null) {
                if (typeof object.view !== "object")
                    throw TypeError(".akkaserverless.MethodOptions.view: object expected");
                message.view = $root.akkaserverless.View.fromObject(object.view);
            }
            return message;
        };

        /**
         * Creates a plain object from a MethodOptions message. Also converts values to other types if specified.
         * @function toObject
         * @memberof akkaserverless.MethodOptions
         * @static
         * @param {akkaserverless.MethodOptions} message MethodOptions
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MethodOptions.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eventing = null;
                object.view = null;
            }
            if (message.eventing != null && message.hasOwnProperty("eventing"))
                object.eventing = $root.akkaserverless.Eventing.toObject(message.eventing, options);
            if (message.view != null && message.hasOwnProperty("view"))
                object.view = $root.akkaserverless.View.toObject(message.view, options);
            return object;
        };

        /**
         * Converts this MethodOptions to JSON.
         * @function toJSON
         * @memberof akkaserverless.MethodOptions
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MethodOptions.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MethodOptions;
    })();

    akkaserverless.ServiceOptions = (function() {

        /**
         * Properties of a ServiceOptions.
         * @memberof akkaserverless
         * @interface IServiceOptions
         * @property {akkaserverless.IEntityAssociation|null} [entity] ServiceOptions entity
         */

        /**
         * Constructs a new ServiceOptions.
         * @memberof akkaserverless
         * @classdesc Represents a ServiceOptions.
         * @implements IServiceOptions
         * @constructor
         * @param {akkaserverless.IServiceOptions=} [properties] Properties to set
         */
        function ServiceOptions(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ServiceOptions entity.
         * @member {akkaserverless.IEntityAssociation|null|undefined} entity
         * @memberof akkaserverless.ServiceOptions
         * @instance
         */
        ServiceOptions.prototype.entity = null;

        /**
         * Creates a new ServiceOptions instance using the specified properties.
         * @function create
         * @memberof akkaserverless.ServiceOptions
         * @static
         * @param {akkaserverless.IServiceOptions=} [properties] Properties to set
         * @returns {akkaserverless.ServiceOptions} ServiceOptions instance
         */
        ServiceOptions.create = function create(properties) {
            return new ServiceOptions(properties);
        };

        /**
         * Encodes the specified ServiceOptions message. Does not implicitly {@link akkaserverless.ServiceOptions.verify|verify} messages.
         * @function encode
         * @memberof akkaserverless.ServiceOptions
         * @static
         * @param {akkaserverless.IServiceOptions} message ServiceOptions message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ServiceOptions.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.entity != null && Object.hasOwnProperty.call(message, "entity"))
                $root.akkaserverless.EntityAssociation.encode(message.entity, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ServiceOptions message, length delimited. Does not implicitly {@link akkaserverless.ServiceOptions.verify|verify} messages.
         * @function encodeDelimited
         * @memberof akkaserverless.ServiceOptions
         * @static
         * @param {akkaserverless.IServiceOptions} message ServiceOptions message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ServiceOptions.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ServiceOptions message from the specified reader or buffer.
         * @function decode
         * @memberof akkaserverless.ServiceOptions
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {akkaserverless.ServiceOptions} ServiceOptions
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ServiceOptions.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.ServiceOptions();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.entity = $root.akkaserverless.EntityAssociation.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ServiceOptions message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof akkaserverless.ServiceOptions
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {akkaserverless.ServiceOptions} ServiceOptions
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ServiceOptions.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ServiceOptions message.
         * @function verify
         * @memberof akkaserverless.ServiceOptions
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ServiceOptions.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.entity != null && message.hasOwnProperty("entity")) {
                var error = $root.akkaserverless.EntityAssociation.verify(message.entity);
                if (error)
                    return "entity." + error;
            }
            return null;
        };

        /**
         * Creates a ServiceOptions message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof akkaserverless.ServiceOptions
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {akkaserverless.ServiceOptions} ServiceOptions
         */
        ServiceOptions.fromObject = function fromObject(object) {
            if (object instanceof $root.akkaserverless.ServiceOptions)
                return object;
            var message = new $root.akkaserverless.ServiceOptions();
            if (object.entity != null) {
                if (typeof object.entity !== "object")
                    throw TypeError(".akkaserverless.ServiceOptions.entity: object expected");
                message.entity = $root.akkaserverless.EntityAssociation.fromObject(object.entity);
            }
            return message;
        };

        /**
         * Creates a plain object from a ServiceOptions message. Also converts values to other types if specified.
         * @function toObject
         * @memberof akkaserverless.ServiceOptions
         * @static
         * @param {akkaserverless.ServiceOptions} message ServiceOptions
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ServiceOptions.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.entity = null;
            if (message.entity != null && message.hasOwnProperty("entity"))
                object.entity = $root.akkaserverless.EntityAssociation.toObject(message.entity, options);
            return object;
        };

        /**
         * Converts this ServiceOptions to JSON.
         * @function toJSON
         * @memberof akkaserverless.ServiceOptions
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ServiceOptions.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ServiceOptions;
    })();

    akkaserverless.EntityAssociation = (function() {

        /**
         * Properties of an EntityAssociation.
         * @memberof akkaserverless
         * @interface IEntityAssociation
         * @property {string|null} [type] EntityAssociation type
         */

        /**
         * Constructs a new EntityAssociation.
         * @memberof akkaserverless
         * @classdesc Represents an EntityAssociation.
         * @implements IEntityAssociation
         * @constructor
         * @param {akkaserverless.IEntityAssociation=} [properties] Properties to set
         */
        function EntityAssociation(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EntityAssociation type.
         * @member {string} type
         * @memberof akkaserverless.EntityAssociation
         * @instance
         */
        EntityAssociation.prototype.type = "";

        /**
         * Creates a new EntityAssociation instance using the specified properties.
         * @function create
         * @memberof akkaserverless.EntityAssociation
         * @static
         * @param {akkaserverless.IEntityAssociation=} [properties] Properties to set
         * @returns {akkaserverless.EntityAssociation} EntityAssociation instance
         */
        EntityAssociation.create = function create(properties) {
            return new EntityAssociation(properties);
        };

        /**
         * Encodes the specified EntityAssociation message. Does not implicitly {@link akkaserverless.EntityAssociation.verify|verify} messages.
         * @function encode
         * @memberof akkaserverless.EntityAssociation
         * @static
         * @param {akkaserverless.IEntityAssociation} message EntityAssociation message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EntityAssociation.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
            return writer;
        };

        /**
         * Encodes the specified EntityAssociation message, length delimited. Does not implicitly {@link akkaserverless.EntityAssociation.verify|verify} messages.
         * @function encodeDelimited
         * @memberof akkaserverless.EntityAssociation
         * @static
         * @param {akkaserverless.IEntityAssociation} message EntityAssociation message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EntityAssociation.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an EntityAssociation message from the specified reader or buffer.
         * @function decode
         * @memberof akkaserverless.EntityAssociation
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {akkaserverless.EntityAssociation} EntityAssociation
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EntityAssociation.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.EntityAssociation();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.type = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an EntityAssociation message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof akkaserverless.EntityAssociation
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {akkaserverless.EntityAssociation} EntityAssociation
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EntityAssociation.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an EntityAssociation message.
         * @function verify
         * @memberof akkaserverless.EntityAssociation
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EntityAssociation.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.type != null && message.hasOwnProperty("type"))
                if (!$util.isString(message.type))
                    return "type: string expected";
            return null;
        };

        /**
         * Creates an EntityAssociation message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof akkaserverless.EntityAssociation
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {akkaserverless.EntityAssociation} EntityAssociation
         */
        EntityAssociation.fromObject = function fromObject(object) {
            if (object instanceof $root.akkaserverless.EntityAssociation)
                return object;
            var message = new $root.akkaserverless.EntityAssociation();
            if (object.type != null)
                message.type = String(object.type);
            return message;
        };

        /**
         * Creates a plain object from an EntityAssociation message. Also converts values to other types if specified.
         * @function toObject
         * @memberof akkaserverless.EntityAssociation
         * @static
         * @param {akkaserverless.EntityAssociation} message EntityAssociation
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EntityAssociation.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.type = "";
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = message.type;
            return object;
        };

        /**
         * Converts this EntityAssociation to JSON.
         * @function toJSON
         * @memberof akkaserverless.EntityAssociation
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EntityAssociation.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return EntityAssociation;
    })();

    akkaserverless.StateDescriptor = (function() {

        /**
         * Properties of a StateDescriptor.
         * @memberof akkaserverless
         * @interface IStateDescriptor
         * @property {string|null} [type] StateDescriptor type
         */

        /**
         * Constructs a new StateDescriptor.
         * @memberof akkaserverless
         * @classdesc Represents a StateDescriptor.
         * @implements IStateDescriptor
         * @constructor
         * @param {akkaserverless.IStateDescriptor=} [properties] Properties to set
         */
        function StateDescriptor(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * StateDescriptor type.
         * @member {string} type
         * @memberof akkaserverless.StateDescriptor
         * @instance
         */
        StateDescriptor.prototype.type = "";

        /**
         * Creates a new StateDescriptor instance using the specified properties.
         * @function create
         * @memberof akkaserverless.StateDescriptor
         * @static
         * @param {akkaserverless.IStateDescriptor=} [properties] Properties to set
         * @returns {akkaserverless.StateDescriptor} StateDescriptor instance
         */
        StateDescriptor.create = function create(properties) {
            return new StateDescriptor(properties);
        };

        /**
         * Encodes the specified StateDescriptor message. Does not implicitly {@link akkaserverless.StateDescriptor.verify|verify} messages.
         * @function encode
         * @memberof akkaserverless.StateDescriptor
         * @static
         * @param {akkaserverless.IStateDescriptor} message StateDescriptor message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        StateDescriptor.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
            return writer;
        };

        /**
         * Encodes the specified StateDescriptor message, length delimited. Does not implicitly {@link akkaserverless.StateDescriptor.verify|verify} messages.
         * @function encodeDelimited
         * @memberof akkaserverless.StateDescriptor
         * @static
         * @param {akkaserverless.IStateDescriptor} message StateDescriptor message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        StateDescriptor.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a StateDescriptor message from the specified reader or buffer.
         * @function decode
         * @memberof akkaserverless.StateDescriptor
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {akkaserverless.StateDescriptor} StateDescriptor
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        StateDescriptor.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.StateDescriptor();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.type = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a StateDescriptor message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof akkaserverless.StateDescriptor
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {akkaserverless.StateDescriptor} StateDescriptor
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        StateDescriptor.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a StateDescriptor message.
         * @function verify
         * @memberof akkaserverless.StateDescriptor
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        StateDescriptor.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.type != null && message.hasOwnProperty("type"))
                if (!$util.isString(message.type))
                    return "type: string expected";
            return null;
        };

        /**
         * Creates a StateDescriptor message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof akkaserverless.StateDescriptor
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {akkaserverless.StateDescriptor} StateDescriptor
         */
        StateDescriptor.fromObject = function fromObject(object) {
            if (object instanceof $root.akkaserverless.StateDescriptor)
                return object;
            var message = new $root.akkaserverless.StateDescriptor();
            if (object.type != null)
                message.type = String(object.type);
            return message;
        };

        /**
         * Creates a plain object from a StateDescriptor message. Also converts values to other types if specified.
         * @function toObject
         * @memberof akkaserverless.StateDescriptor
         * @static
         * @param {akkaserverless.StateDescriptor} message StateDescriptor
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        StateDescriptor.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.type = "";
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = message.type;
            return object;
        };

        /**
         * Converts this StateDescriptor to JSON.
         * @function toJSON
         * @memberof akkaserverless.StateDescriptor
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        StateDescriptor.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return StateDescriptor;
    })();

    akkaserverless.EventDescriptor = (function() {

        /**
         * Properties of an EventDescriptor.
         * @memberof akkaserverless
         * @interface IEventDescriptor
         * @property {string|null} [type] EventDescriptor type
         */

        /**
         * Constructs a new EventDescriptor.
         * @memberof akkaserverless
         * @classdesc Represents an EventDescriptor.
         * @implements IEventDescriptor
         * @constructor
         * @param {akkaserverless.IEventDescriptor=} [properties] Properties to set
         */
        function EventDescriptor(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EventDescriptor type.
         * @member {string} type
         * @memberof akkaserverless.EventDescriptor
         * @instance
         */
        EventDescriptor.prototype.type = "";

        /**
         * Creates a new EventDescriptor instance using the specified properties.
         * @function create
         * @memberof akkaserverless.EventDescriptor
         * @static
         * @param {akkaserverless.IEventDescriptor=} [properties] Properties to set
         * @returns {akkaserverless.EventDescriptor} EventDescriptor instance
         */
        EventDescriptor.create = function create(properties) {
            return new EventDescriptor(properties);
        };

        /**
         * Encodes the specified EventDescriptor message. Does not implicitly {@link akkaserverless.EventDescriptor.verify|verify} messages.
         * @function encode
         * @memberof akkaserverless.EventDescriptor
         * @static
         * @param {akkaserverless.IEventDescriptor} message EventDescriptor message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EventDescriptor.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
            return writer;
        };

        /**
         * Encodes the specified EventDescriptor message, length delimited. Does not implicitly {@link akkaserverless.EventDescriptor.verify|verify} messages.
         * @function encodeDelimited
         * @memberof akkaserverless.EventDescriptor
         * @static
         * @param {akkaserverless.IEventDescriptor} message EventDescriptor message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EventDescriptor.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an EventDescriptor message from the specified reader or buffer.
         * @function decode
         * @memberof akkaserverless.EventDescriptor
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {akkaserverless.EventDescriptor} EventDescriptor
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EventDescriptor.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.EventDescriptor();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.type = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an EventDescriptor message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof akkaserverless.EventDescriptor
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {akkaserverless.EventDescriptor} EventDescriptor
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EventDescriptor.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an EventDescriptor message.
         * @function verify
         * @memberof akkaserverless.EventDescriptor
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EventDescriptor.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.type != null && message.hasOwnProperty("type"))
                if (!$util.isString(message.type))
                    return "type: string expected";
            return null;
        };

        /**
         * Creates an EventDescriptor message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof akkaserverless.EventDescriptor
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {akkaserverless.EventDescriptor} EventDescriptor
         */
        EventDescriptor.fromObject = function fromObject(object) {
            if (object instanceof $root.akkaserverless.EventDescriptor)
                return object;
            var message = new $root.akkaserverless.EventDescriptor();
            if (object.type != null)
                message.type = String(object.type);
            return message;
        };

        /**
         * Creates a plain object from an EventDescriptor message. Also converts values to other types if specified.
         * @function toObject
         * @memberof akkaserverless.EventDescriptor
         * @static
         * @param {akkaserverless.EventDescriptor} message EventDescriptor
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EventDescriptor.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.type = "";
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = message.type;
            return object;
        };

        /**
         * Converts this EventDescriptor to JSON.
         * @function toJSON
         * @memberof akkaserverless.EventDescriptor
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EventDescriptor.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return EventDescriptor;
    })();

    akkaserverless.EventSourcedEntity = (function() {

        /**
         * Properties of an EventSourcedEntity.
         * @memberof akkaserverless
         * @interface IEventSourcedEntity
         * @property {string|null} [name] EventSourcedEntity name
         * @property {string|null} [entityType] EventSourcedEntity entityType
         * @property {akkaserverless.IStateDescriptor|null} [state] EventSourcedEntity state
         * @property {Array.<akkaserverless.IEventDescriptor>|null} [event] EventSourcedEntity event
         */

        /**
         * Constructs a new EventSourcedEntity.
         * @memberof akkaserverless
         * @classdesc Represents an EventSourcedEntity.
         * @implements IEventSourcedEntity
         * @constructor
         * @param {akkaserverless.IEventSourcedEntity=} [properties] Properties to set
         */
        function EventSourcedEntity(properties) {
            this.event = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EventSourcedEntity name.
         * @member {string} name
         * @memberof akkaserverless.EventSourcedEntity
         * @instance
         */
        EventSourcedEntity.prototype.name = "";

        /**
         * EventSourcedEntity entityType.
         * @member {string} entityType
         * @memberof akkaserverless.EventSourcedEntity
         * @instance
         */
        EventSourcedEntity.prototype.entityType = "";

        /**
         * EventSourcedEntity state.
         * @member {akkaserverless.IStateDescriptor|null|undefined} state
         * @memberof akkaserverless.EventSourcedEntity
         * @instance
         */
        EventSourcedEntity.prototype.state = null;

        /**
         * EventSourcedEntity event.
         * @member {Array.<akkaserverless.IEventDescriptor>} event
         * @memberof akkaserverless.EventSourcedEntity
         * @instance
         */
        EventSourcedEntity.prototype.event = $util.emptyArray;

        /**
         * Creates a new EventSourcedEntity instance using the specified properties.
         * @function create
         * @memberof akkaserverless.EventSourcedEntity
         * @static
         * @param {akkaserverless.IEventSourcedEntity=} [properties] Properties to set
         * @returns {akkaserverless.EventSourcedEntity} EventSourcedEntity instance
         */
        EventSourcedEntity.create = function create(properties) {
            return new EventSourcedEntity(properties);
        };

        /**
         * Encodes the specified EventSourcedEntity message. Does not implicitly {@link akkaserverless.EventSourcedEntity.verify|verify} messages.
         * @function encode
         * @memberof akkaserverless.EventSourcedEntity
         * @static
         * @param {akkaserverless.IEventSourcedEntity} message EventSourcedEntity message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EventSourcedEntity.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
            if (message.entityType != null && Object.hasOwnProperty.call(message, "entityType"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.entityType);
            if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                $root.akkaserverless.StateDescriptor.encode(message.state, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.event != null && message.event.length)
                for (var i = 0; i < message.event.length; ++i)
                    $root.akkaserverless.EventDescriptor.encode(message.event[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified EventSourcedEntity message, length delimited. Does not implicitly {@link akkaserverless.EventSourcedEntity.verify|verify} messages.
         * @function encodeDelimited
         * @memberof akkaserverless.EventSourcedEntity
         * @static
         * @param {akkaserverless.IEventSourcedEntity} message EventSourcedEntity message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EventSourcedEntity.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an EventSourcedEntity message from the specified reader or buffer.
         * @function decode
         * @memberof akkaserverless.EventSourcedEntity
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {akkaserverless.EventSourcedEntity} EventSourcedEntity
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EventSourcedEntity.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.EventSourcedEntity();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.entityType = reader.string();
                    break;
                case 3:
                    message.state = $root.akkaserverless.StateDescriptor.decode(reader, reader.uint32());
                    break;
                case 4:
                    if (!(message.event && message.event.length))
                        message.event = [];
                    message.event.push($root.akkaserverless.EventDescriptor.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an EventSourcedEntity message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof akkaserverless.EventSourcedEntity
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {akkaserverless.EventSourcedEntity} EventSourcedEntity
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EventSourcedEntity.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an EventSourcedEntity message.
         * @function verify
         * @memberof akkaserverless.EventSourcedEntity
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EventSourcedEntity.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.entityType != null && message.hasOwnProperty("entityType"))
                if (!$util.isString(message.entityType))
                    return "entityType: string expected";
            if (message.state != null && message.hasOwnProperty("state")) {
                var error = $root.akkaserverless.StateDescriptor.verify(message.state);
                if (error)
                    return "state." + error;
            }
            if (message.event != null && message.hasOwnProperty("event")) {
                if (!Array.isArray(message.event))
                    return "event: array expected";
                for (var i = 0; i < message.event.length; ++i) {
                    var error = $root.akkaserverless.EventDescriptor.verify(message.event[i]);
                    if (error)
                        return "event." + error;
                }
            }
            return null;
        };

        /**
         * Creates an EventSourcedEntity message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof akkaserverless.EventSourcedEntity
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {akkaserverless.EventSourcedEntity} EventSourcedEntity
         */
        EventSourcedEntity.fromObject = function fromObject(object) {
            if (object instanceof $root.akkaserverless.EventSourcedEntity)
                return object;
            var message = new $root.akkaserverless.EventSourcedEntity();
            if (object.name != null)
                message.name = String(object.name);
            if (object.entityType != null)
                message.entityType = String(object.entityType);
            if (object.state != null) {
                if (typeof object.state !== "object")
                    throw TypeError(".akkaserverless.EventSourcedEntity.state: object expected");
                message.state = $root.akkaserverless.StateDescriptor.fromObject(object.state);
            }
            if (object.event) {
                if (!Array.isArray(object.event))
                    throw TypeError(".akkaserverless.EventSourcedEntity.event: array expected");
                message.event = [];
                for (var i = 0; i < object.event.length; ++i) {
                    if (typeof object.event[i] !== "object")
                        throw TypeError(".akkaserverless.EventSourcedEntity.event: object expected");
                    message.event[i] = $root.akkaserverless.EventDescriptor.fromObject(object.event[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from an EventSourcedEntity message. Also converts values to other types if specified.
         * @function toObject
         * @memberof akkaserverless.EventSourcedEntity
         * @static
         * @param {akkaserverless.EventSourcedEntity} message EventSourcedEntity
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EventSourcedEntity.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.event = [];
            if (options.defaults) {
                object.name = "";
                object.entityType = "";
                object.state = null;
            }
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.entityType != null && message.hasOwnProperty("entityType"))
                object.entityType = message.entityType;
            if (message.state != null && message.hasOwnProperty("state"))
                object.state = $root.akkaserverless.StateDescriptor.toObject(message.state, options);
            if (message.event && message.event.length) {
                object.event = [];
                for (var j = 0; j < message.event.length; ++j)
                    object.event[j] = $root.akkaserverless.EventDescriptor.toObject(message.event[j], options);
            }
            return object;
        };

        /**
         * Converts this EventSourcedEntity to JSON.
         * @function toJSON
         * @memberof akkaserverless.EventSourcedEntity
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EventSourcedEntity.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return EventSourcedEntity;
    })();

    akkaserverless.Eventing = (function() {

        /**
         * Properties of an Eventing.
         * @memberof akkaserverless
         * @interface IEventing
         * @property {akkaserverless.IEventSource|null} ["in"] Eventing in
         * @property {akkaserverless.IEventDestination|null} [out] Eventing out
         */

        /**
         * Constructs a new Eventing.
         * @memberof akkaserverless
         * @classdesc Represents an Eventing.
         * @implements IEventing
         * @constructor
         * @param {akkaserverless.IEventing=} [properties] Properties to set
         */
        function Eventing(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Eventing in.
         * @member {akkaserverless.IEventSource|null|undefined} in
         * @memberof akkaserverless.Eventing
         * @instance
         */
        Eventing.prototype["in"] = null;

        /**
         * Eventing out.
         * @member {akkaserverless.IEventDestination|null|undefined} out
         * @memberof akkaserverless.Eventing
         * @instance
         */
        Eventing.prototype.out = null;

        /**
         * Creates a new Eventing instance using the specified properties.
         * @function create
         * @memberof akkaserverless.Eventing
         * @static
         * @param {akkaserverless.IEventing=} [properties] Properties to set
         * @returns {akkaserverless.Eventing} Eventing instance
         */
        Eventing.create = function create(properties) {
            return new Eventing(properties);
        };

        /**
         * Encodes the specified Eventing message. Does not implicitly {@link akkaserverless.Eventing.verify|verify} messages.
         * @function encode
         * @memberof akkaserverless.Eventing
         * @static
         * @param {akkaserverless.IEventing} message Eventing message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Eventing.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message["in"] != null && Object.hasOwnProperty.call(message, "in"))
                $root.akkaserverless.EventSource.encode(message["in"], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.out != null && Object.hasOwnProperty.call(message, "out"))
                $root.akkaserverless.EventDestination.encode(message.out, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified Eventing message, length delimited. Does not implicitly {@link akkaserverless.Eventing.verify|verify} messages.
         * @function encodeDelimited
         * @memberof akkaserverless.Eventing
         * @static
         * @param {akkaserverless.IEventing} message Eventing message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Eventing.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an Eventing message from the specified reader or buffer.
         * @function decode
         * @memberof akkaserverless.Eventing
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {akkaserverless.Eventing} Eventing
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Eventing.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.Eventing();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message["in"] = $root.akkaserverless.EventSource.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.out = $root.akkaserverless.EventDestination.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an Eventing message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof akkaserverless.Eventing
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {akkaserverless.Eventing} Eventing
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Eventing.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an Eventing message.
         * @function verify
         * @memberof akkaserverless.Eventing
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Eventing.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message["in"] != null && message.hasOwnProperty("in")) {
                var error = $root.akkaserverless.EventSource.verify(message["in"]);
                if (error)
                    return "in." + error;
            }
            if (message.out != null && message.hasOwnProperty("out")) {
                var error = $root.akkaserverless.EventDestination.verify(message.out);
                if (error)
                    return "out." + error;
            }
            return null;
        };

        /**
         * Creates an Eventing message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof akkaserverless.Eventing
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {akkaserverless.Eventing} Eventing
         */
        Eventing.fromObject = function fromObject(object) {
            if (object instanceof $root.akkaserverless.Eventing)
                return object;
            var message = new $root.akkaserverless.Eventing();
            if (object["in"] != null) {
                if (typeof object["in"] !== "object")
                    throw TypeError(".akkaserverless.Eventing.in: object expected");
                message["in"] = $root.akkaserverless.EventSource.fromObject(object["in"]);
            }
            if (object.out != null) {
                if (typeof object.out !== "object")
                    throw TypeError(".akkaserverless.Eventing.out: object expected");
                message.out = $root.akkaserverless.EventDestination.fromObject(object.out);
            }
            return message;
        };

        /**
         * Creates a plain object from an Eventing message. Also converts values to other types if specified.
         * @function toObject
         * @memberof akkaserverless.Eventing
         * @static
         * @param {akkaserverless.Eventing} message Eventing
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Eventing.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object["in"] = null;
                object.out = null;
            }
            if (message["in"] != null && message.hasOwnProperty("in"))
                object["in"] = $root.akkaserverless.EventSource.toObject(message["in"], options);
            if (message.out != null && message.hasOwnProperty("out"))
                object.out = $root.akkaserverless.EventDestination.toObject(message.out, options);
            return object;
        };

        /**
         * Converts this Eventing to JSON.
         * @function toJSON
         * @memberof akkaserverless.Eventing
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Eventing.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Eventing;
    })();

    akkaserverless.EventSource = (function() {

        /**
         * Properties of an EventSource.
         * @memberof akkaserverless
         * @interface IEventSource
         * @property {string|null} [consumerGroup] EventSource consumerGroup
         * @property {string|null} [topic] EventSource topic
         * @property {string|null} [eventLog] EventSource eventLog
         * @property {string|null} [valueChanges] EventSource valueChanges
         */

        /**
         * Constructs a new EventSource.
         * @memberof akkaserverless
         * @classdesc Represents an EventSource.
         * @implements IEventSource
         * @constructor
         * @param {akkaserverless.IEventSource=} [properties] Properties to set
         */
        function EventSource(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EventSource consumerGroup.
         * @member {string} consumerGroup
         * @memberof akkaserverless.EventSource
         * @instance
         */
        EventSource.prototype.consumerGroup = "";

        /**
         * EventSource topic.
         * @member {string} topic
         * @memberof akkaserverless.EventSource
         * @instance
         */
        EventSource.prototype.topic = "";

        /**
         * EventSource eventLog.
         * @member {string} eventLog
         * @memberof akkaserverless.EventSource
         * @instance
         */
        EventSource.prototype.eventLog = "";

        /**
         * EventSource valueChanges.
         * @member {string} valueChanges
         * @memberof akkaserverless.EventSource
         * @instance
         */
        EventSource.prototype.valueChanges = "";

        // OneOf field names bound to virtual getters and setters
        var $oneOfFields;

        /**
         * EventSource source.
         * @member {"topic"|"eventLog"|"valueChanges"|undefined} source
         * @memberof akkaserverless.EventSource
         * @instance
         */
        Object.defineProperty(EventSource.prototype, "source", {
            get: $util.oneOfGetter($oneOfFields = ["topic", "eventLog", "valueChanges"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        /**
         * Creates a new EventSource instance using the specified properties.
         * @function create
         * @memberof akkaserverless.EventSource
         * @static
         * @param {akkaserverless.IEventSource=} [properties] Properties to set
         * @returns {akkaserverless.EventSource} EventSource instance
         */
        EventSource.create = function create(properties) {
            return new EventSource(properties);
        };

        /**
         * Encodes the specified EventSource message. Does not implicitly {@link akkaserverless.EventSource.verify|verify} messages.
         * @function encode
         * @memberof akkaserverless.EventSource
         * @static
         * @param {akkaserverless.IEventSource} message EventSource message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EventSource.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.consumerGroup != null && Object.hasOwnProperty.call(message, "consumerGroup"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.consumerGroup);
            if (message.topic != null && Object.hasOwnProperty.call(message, "topic"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.topic);
            if (message.eventLog != null && Object.hasOwnProperty.call(message, "eventLog"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.eventLog);
            if (message.valueChanges != null && Object.hasOwnProperty.call(message, "valueChanges"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.valueChanges);
            return writer;
        };

        /**
         * Encodes the specified EventSource message, length delimited. Does not implicitly {@link akkaserverless.EventSource.verify|verify} messages.
         * @function encodeDelimited
         * @memberof akkaserverless.EventSource
         * @static
         * @param {akkaserverless.IEventSource} message EventSource message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EventSource.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an EventSource message from the specified reader or buffer.
         * @function decode
         * @memberof akkaserverless.EventSource
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {akkaserverless.EventSource} EventSource
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EventSource.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.EventSource();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.consumerGroup = reader.string();
                    break;
                case 2:
                    message.topic = reader.string();
                    break;
                case 3:
                    message.eventLog = reader.string();
                    break;
                case 4:
                    message.valueChanges = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an EventSource message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof akkaserverless.EventSource
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {akkaserverless.EventSource} EventSource
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EventSource.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an EventSource message.
         * @function verify
         * @memberof akkaserverless.EventSource
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EventSource.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            var properties = {};
            if (message.consumerGroup != null && message.hasOwnProperty("consumerGroup"))
                if (!$util.isString(message.consumerGroup))
                    return "consumerGroup: string expected";
            if (message.topic != null && message.hasOwnProperty("topic")) {
                properties.source = 1;
                if (!$util.isString(message.topic))
                    return "topic: string expected";
            }
            if (message.eventLog != null && message.hasOwnProperty("eventLog")) {
                if (properties.source === 1)
                    return "source: multiple values";
                properties.source = 1;
                if (!$util.isString(message.eventLog))
                    return "eventLog: string expected";
            }
            if (message.valueChanges != null && message.hasOwnProperty("valueChanges")) {
                if (properties.source === 1)
                    return "source: multiple values";
                properties.source = 1;
                if (!$util.isString(message.valueChanges))
                    return "valueChanges: string expected";
            }
            return null;
        };

        /**
         * Creates an EventSource message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof akkaserverless.EventSource
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {akkaserverless.EventSource} EventSource
         */
        EventSource.fromObject = function fromObject(object) {
            if (object instanceof $root.akkaserverless.EventSource)
                return object;
            var message = new $root.akkaserverless.EventSource();
            if (object.consumerGroup != null)
                message.consumerGroup = String(object.consumerGroup);
            if (object.topic != null)
                message.topic = String(object.topic);
            if (object.eventLog != null)
                message.eventLog = String(object.eventLog);
            if (object.valueChanges != null)
                message.valueChanges = String(object.valueChanges);
            return message;
        };

        /**
         * Creates a plain object from an EventSource message. Also converts values to other types if specified.
         * @function toObject
         * @memberof akkaserverless.EventSource
         * @static
         * @param {akkaserverless.EventSource} message EventSource
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EventSource.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.consumerGroup = "";
            if (message.consumerGroup != null && message.hasOwnProperty("consumerGroup"))
                object.consumerGroup = message.consumerGroup;
            if (message.topic != null && message.hasOwnProperty("topic")) {
                object.topic = message.topic;
                if (options.oneofs)
                    object.source = "topic";
            }
            if (message.eventLog != null && message.hasOwnProperty("eventLog")) {
                object.eventLog = message.eventLog;
                if (options.oneofs)
                    object.source = "eventLog";
            }
            if (message.valueChanges != null && message.hasOwnProperty("valueChanges")) {
                object.valueChanges = message.valueChanges;
                if (options.oneofs)
                    object.source = "valueChanges";
            }
            return object;
        };

        /**
         * Converts this EventSource to JSON.
         * @function toJSON
         * @memberof akkaserverless.EventSource
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EventSource.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return EventSource;
    })();

    akkaserverless.EventDestination = (function() {

        /**
         * Properties of an EventDestination.
         * @memberof akkaserverless
         * @interface IEventDestination
         * @property {string|null} [topic] EventDestination topic
         */

        /**
         * Constructs a new EventDestination.
         * @memberof akkaserverless
         * @classdesc Represents an EventDestination.
         * @implements IEventDestination
         * @constructor
         * @param {akkaserverless.IEventDestination=} [properties] Properties to set
         */
        function EventDestination(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EventDestination topic.
         * @member {string} topic
         * @memberof akkaserverless.EventDestination
         * @instance
         */
        EventDestination.prototype.topic = "";

        // OneOf field names bound to virtual getters and setters
        var $oneOfFields;

        /**
         * EventDestination destination.
         * @member {"topic"|undefined} destination
         * @memberof akkaserverless.EventDestination
         * @instance
         */
        Object.defineProperty(EventDestination.prototype, "destination", {
            get: $util.oneOfGetter($oneOfFields = ["topic"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        /**
         * Creates a new EventDestination instance using the specified properties.
         * @function create
         * @memberof akkaserverless.EventDestination
         * @static
         * @param {akkaserverless.IEventDestination=} [properties] Properties to set
         * @returns {akkaserverless.EventDestination} EventDestination instance
         */
        EventDestination.create = function create(properties) {
            return new EventDestination(properties);
        };

        /**
         * Encodes the specified EventDestination message. Does not implicitly {@link akkaserverless.EventDestination.verify|verify} messages.
         * @function encode
         * @memberof akkaserverless.EventDestination
         * @static
         * @param {akkaserverless.IEventDestination} message EventDestination message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EventDestination.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.topic != null && Object.hasOwnProperty.call(message, "topic"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.topic);
            return writer;
        };

        /**
         * Encodes the specified EventDestination message, length delimited. Does not implicitly {@link akkaserverless.EventDestination.verify|verify} messages.
         * @function encodeDelimited
         * @memberof akkaserverless.EventDestination
         * @static
         * @param {akkaserverless.IEventDestination} message EventDestination message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EventDestination.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an EventDestination message from the specified reader or buffer.
         * @function decode
         * @memberof akkaserverless.EventDestination
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {akkaserverless.EventDestination} EventDestination
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EventDestination.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.EventDestination();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.topic = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an EventDestination message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof akkaserverless.EventDestination
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {akkaserverless.EventDestination} EventDestination
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EventDestination.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an EventDestination message.
         * @function verify
         * @memberof akkaserverless.EventDestination
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EventDestination.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            var properties = {};
            if (message.topic != null && message.hasOwnProperty("topic")) {
                properties.destination = 1;
                if (!$util.isString(message.topic))
                    return "topic: string expected";
            }
            return null;
        };

        /**
         * Creates an EventDestination message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof akkaserverless.EventDestination
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {akkaserverless.EventDestination} EventDestination
         */
        EventDestination.fromObject = function fromObject(object) {
            if (object instanceof $root.akkaserverless.EventDestination)
                return object;
            var message = new $root.akkaserverless.EventDestination();
            if (object.topic != null)
                message.topic = String(object.topic);
            return message;
        };

        /**
         * Creates a plain object from an EventDestination message. Also converts values to other types if specified.
         * @function toObject
         * @memberof akkaserverless.EventDestination
         * @static
         * @param {akkaserverless.EventDestination} message EventDestination
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EventDestination.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (message.topic != null && message.hasOwnProperty("topic")) {
                object.topic = message.topic;
                if (options.oneofs)
                    object.destination = "topic";
            }
            return object;
        };

        /**
         * Converts this EventDestination to JSON.
         * @function toJSON
         * @memberof akkaserverless.EventDestination
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EventDestination.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return EventDestination;
    })();

    akkaserverless.View = (function() {

        /**
         * Properties of a View.
         * @memberof akkaserverless
         * @interface IView
         * @property {akkaserverless.View.IUpdate|null} [update] View update
         * @property {akkaserverless.View.IQuery|null} [query] View query
         */

        /**
         * Constructs a new View.
         * @memberof akkaserverless
         * @classdesc Represents a View.
         * @implements IView
         * @constructor
         * @param {akkaserverless.IView=} [properties] Properties to set
         */
        function View(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * View update.
         * @member {akkaserverless.View.IUpdate|null|undefined} update
         * @memberof akkaserverless.View
         * @instance
         */
        View.prototype.update = null;

        /**
         * View query.
         * @member {akkaserverless.View.IQuery|null|undefined} query
         * @memberof akkaserverless.View
         * @instance
         */
        View.prototype.query = null;

        /**
         * Creates a new View instance using the specified properties.
         * @function create
         * @memberof akkaserverless.View
         * @static
         * @param {akkaserverless.IView=} [properties] Properties to set
         * @returns {akkaserverless.View} View instance
         */
        View.create = function create(properties) {
            return new View(properties);
        };

        /**
         * Encodes the specified View message. Does not implicitly {@link akkaserverless.View.verify|verify} messages.
         * @function encode
         * @memberof akkaserverless.View
         * @static
         * @param {akkaserverless.IView} message View message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        View.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.update != null && Object.hasOwnProperty.call(message, "update"))
                $root.akkaserverless.View.Update.encode(message.update, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.query != null && Object.hasOwnProperty.call(message, "query"))
                $root.akkaserverless.View.Query.encode(message.query, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified View message, length delimited. Does not implicitly {@link akkaserverless.View.verify|verify} messages.
         * @function encodeDelimited
         * @memberof akkaserverless.View
         * @static
         * @param {akkaserverless.IView} message View message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        View.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a View message from the specified reader or buffer.
         * @function decode
         * @memberof akkaserverless.View
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {akkaserverless.View} View
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        View.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.View();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.update = $root.akkaserverless.View.Update.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.query = $root.akkaserverless.View.Query.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a View message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof akkaserverless.View
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {akkaserverless.View} View
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        View.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a View message.
         * @function verify
         * @memberof akkaserverless.View
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        View.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.update != null && message.hasOwnProperty("update")) {
                var error = $root.akkaserverless.View.Update.verify(message.update);
                if (error)
                    return "update." + error;
            }
            if (message.query != null && message.hasOwnProperty("query")) {
                var error = $root.akkaserverless.View.Query.verify(message.query);
                if (error)
                    return "query." + error;
            }
            return null;
        };

        /**
         * Creates a View message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof akkaserverless.View
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {akkaserverless.View} View
         */
        View.fromObject = function fromObject(object) {
            if (object instanceof $root.akkaserverless.View)
                return object;
            var message = new $root.akkaserverless.View();
            if (object.update != null) {
                if (typeof object.update !== "object")
                    throw TypeError(".akkaserverless.View.update: object expected");
                message.update = $root.akkaserverless.View.Update.fromObject(object.update);
            }
            if (object.query != null) {
                if (typeof object.query !== "object")
                    throw TypeError(".akkaserverless.View.query: object expected");
                message.query = $root.akkaserverless.View.Query.fromObject(object.query);
            }
            return message;
        };

        /**
         * Creates a plain object from a View message. Also converts values to other types if specified.
         * @function toObject
         * @memberof akkaserverless.View
         * @static
         * @param {akkaserverless.View} message View
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        View.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.update = null;
                object.query = null;
            }
            if (message.update != null && message.hasOwnProperty("update"))
                object.update = $root.akkaserverless.View.Update.toObject(message.update, options);
            if (message.query != null && message.hasOwnProperty("query"))
                object.query = $root.akkaserverless.View.Query.toObject(message.query, options);
            return object;
        };

        /**
         * Converts this View to JSON.
         * @function toJSON
         * @memberof akkaserverless.View
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        View.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        View.Update = (function() {

            /**
             * Properties of an Update.
             * @memberof akkaserverless.View
             * @interface IUpdate
             * @property {string|null} [table] Update table
             * @property {boolean|null} [transformUpdates] Update transformUpdates
             */

            /**
             * Constructs a new Update.
             * @memberof akkaserverless.View
             * @classdesc Represents an Update.
             * @implements IUpdate
             * @constructor
             * @param {akkaserverless.View.IUpdate=} [properties] Properties to set
             */
            function Update(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Update table.
             * @member {string} table
             * @memberof akkaserverless.View.Update
             * @instance
             */
            Update.prototype.table = "";

            /**
             * Update transformUpdates.
             * @member {boolean} transformUpdates
             * @memberof akkaserverless.View.Update
             * @instance
             */
            Update.prototype.transformUpdates = false;

            /**
             * Creates a new Update instance using the specified properties.
             * @function create
             * @memberof akkaserverless.View.Update
             * @static
             * @param {akkaserverless.View.IUpdate=} [properties] Properties to set
             * @returns {akkaserverless.View.Update} Update instance
             */
            Update.create = function create(properties) {
                return new Update(properties);
            };

            /**
             * Encodes the specified Update message. Does not implicitly {@link akkaserverless.View.Update.verify|verify} messages.
             * @function encode
             * @memberof akkaserverless.View.Update
             * @static
             * @param {akkaserverless.View.IUpdate} message Update message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Update.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.table != null && Object.hasOwnProperty.call(message, "table"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.table);
                if (message.transformUpdates != null && Object.hasOwnProperty.call(message, "transformUpdates"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.transformUpdates);
                return writer;
            };

            /**
             * Encodes the specified Update message, length delimited. Does not implicitly {@link akkaserverless.View.Update.verify|verify} messages.
             * @function encodeDelimited
             * @memberof akkaserverless.View.Update
             * @static
             * @param {akkaserverless.View.IUpdate} message Update message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Update.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an Update message from the specified reader or buffer.
             * @function decode
             * @memberof akkaserverless.View.Update
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {akkaserverless.View.Update} Update
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Update.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.View.Update();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.table = reader.string();
                        break;
                    case 2:
                        message.transformUpdates = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an Update message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof akkaserverless.View.Update
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {akkaserverless.View.Update} Update
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Update.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an Update message.
             * @function verify
             * @memberof akkaserverless.View.Update
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Update.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.table != null && message.hasOwnProperty("table"))
                    if (!$util.isString(message.table))
                        return "table: string expected";
                if (message.transformUpdates != null && message.hasOwnProperty("transformUpdates"))
                    if (typeof message.transformUpdates !== "boolean")
                        return "transformUpdates: boolean expected";
                return null;
            };

            /**
             * Creates an Update message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof akkaserverless.View.Update
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {akkaserverless.View.Update} Update
             */
            Update.fromObject = function fromObject(object) {
                if (object instanceof $root.akkaserverless.View.Update)
                    return object;
                var message = new $root.akkaserverless.View.Update();
                if (object.table != null)
                    message.table = String(object.table);
                if (object.transformUpdates != null)
                    message.transformUpdates = Boolean(object.transformUpdates);
                return message;
            };

            /**
             * Creates a plain object from an Update message. Also converts values to other types if specified.
             * @function toObject
             * @memberof akkaserverless.View.Update
             * @static
             * @param {akkaserverless.View.Update} message Update
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Update.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.table = "";
                    object.transformUpdates = false;
                }
                if (message.table != null && message.hasOwnProperty("table"))
                    object.table = message.table;
                if (message.transformUpdates != null && message.hasOwnProperty("transformUpdates"))
                    object.transformUpdates = message.transformUpdates;
                return object;
            };

            /**
             * Converts this Update to JSON.
             * @function toJSON
             * @memberof akkaserverless.View.Update
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Update.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Update;
        })();

        View.Query = (function() {

            /**
             * Properties of a Query.
             * @memberof akkaserverless.View
             * @interface IQuery
             * @property {string|null} [query] Query query
             * @property {boolean|null} [transformResults] Query transformResults
             */

            /**
             * Constructs a new Query.
             * @memberof akkaserverless.View
             * @classdesc Represents a Query.
             * @implements IQuery
             * @constructor
             * @param {akkaserverless.View.IQuery=} [properties] Properties to set
             */
            function Query(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Query query.
             * @member {string} query
             * @memberof akkaserverless.View.Query
             * @instance
             */
            Query.prototype.query = "";

            /**
             * Query transformResults.
             * @member {boolean} transformResults
             * @memberof akkaserverless.View.Query
             * @instance
             */
            Query.prototype.transformResults = false;

            /**
             * Creates a new Query instance using the specified properties.
             * @function create
             * @memberof akkaserverless.View.Query
             * @static
             * @param {akkaserverless.View.IQuery=} [properties] Properties to set
             * @returns {akkaserverless.View.Query} Query instance
             */
            Query.create = function create(properties) {
                return new Query(properties);
            };

            /**
             * Encodes the specified Query message. Does not implicitly {@link akkaserverless.View.Query.verify|verify} messages.
             * @function encode
             * @memberof akkaserverless.View.Query
             * @static
             * @param {akkaserverless.View.IQuery} message Query message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Query.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.query != null && Object.hasOwnProperty.call(message, "query"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.query);
                if (message.transformResults != null && Object.hasOwnProperty.call(message, "transformResults"))
                    writer.uint32(/* id 4, wireType 0 =*/32).bool(message.transformResults);
                return writer;
            };

            /**
             * Encodes the specified Query message, length delimited. Does not implicitly {@link akkaserverless.View.Query.verify|verify} messages.
             * @function encodeDelimited
             * @memberof akkaserverless.View.Query
             * @static
             * @param {akkaserverless.View.IQuery} message Query message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Query.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Query message from the specified reader or buffer.
             * @function decode
             * @memberof akkaserverless.View.Query
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {akkaserverless.View.Query} Query
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Query.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.View.Query();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 3:
                        message.query = reader.string();
                        break;
                    case 4:
                        message.transformResults = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Query message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof akkaserverless.View.Query
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {akkaserverless.View.Query} Query
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Query.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Query message.
             * @function verify
             * @memberof akkaserverless.View.Query
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Query.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.query != null && message.hasOwnProperty("query"))
                    if (!$util.isString(message.query))
                        return "query: string expected";
                if (message.transformResults != null && message.hasOwnProperty("transformResults"))
                    if (typeof message.transformResults !== "boolean")
                        return "transformResults: boolean expected";
                return null;
            };

            /**
             * Creates a Query message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof akkaserverless.View.Query
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {akkaserverless.View.Query} Query
             */
            Query.fromObject = function fromObject(object) {
                if (object instanceof $root.akkaserverless.View.Query)
                    return object;
                var message = new $root.akkaserverless.View.Query();
                if (object.query != null)
                    message.query = String(object.query);
                if (object.transformResults != null)
                    message.transformResults = Boolean(object.transformResults);
                return message;
            };

            /**
             * Creates a plain object from a Query message. Also converts values to other types if specified.
             * @function toObject
             * @memberof akkaserverless.View.Query
             * @static
             * @param {akkaserverless.View.Query} message Query
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Query.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.query = "";
                    object.transformResults = false;
                }
                if (message.query != null && message.hasOwnProperty("query"))
                    object.query = message.query;
                if (message.transformResults != null && message.hasOwnProperty("transformResults"))
                    object.transformResults = message.transformResults;
                return object;
            };

            /**
             * Converts this Query to JSON.
             * @function toJSON
             * @memberof akkaserverless.View.Query
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Query.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Query;
        })();

        return View;
    })();

    akkaserverless.protocol = (function() {

        /**
         * Namespace protocol.
         * @memberof akkaserverless
         * @namespace
         */
        var protocol = {};

        protocol.Spec = (function() {

            /**
             * Properties of a Spec.
             * @memberof akkaserverless.protocol
             * @interface ISpec
             * @property {Uint8Array|null} [proto] Spec proto
             * @property {Array.<akkaserverless.protocol.IComponent>|null} [components] Spec components
             * @property {akkaserverless.protocol.IServiceInfo|null} [serviceInfo] Spec serviceInfo
             */

            /**
             * Constructs a new Spec.
             * @memberof akkaserverless.protocol
             * @classdesc Represents a Spec.
             * @implements ISpec
             * @constructor
             * @param {akkaserverless.protocol.ISpec=} [properties] Properties to set
             */
            function Spec(properties) {
                this.components = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Spec proto.
             * @member {Uint8Array} proto
             * @memberof akkaserverless.protocol.Spec
             * @instance
             */
            Spec.prototype.proto = $util.newBuffer([]);

            /**
             * Spec components.
             * @member {Array.<akkaserverless.protocol.IComponent>} components
             * @memberof akkaserverless.protocol.Spec
             * @instance
             */
            Spec.prototype.components = $util.emptyArray;

            /**
             * Spec serviceInfo.
             * @member {akkaserverless.protocol.IServiceInfo|null|undefined} serviceInfo
             * @memberof akkaserverless.protocol.Spec
             * @instance
             */
            Spec.prototype.serviceInfo = null;

            /**
             * Creates a new Spec instance using the specified properties.
             * @function create
             * @memberof akkaserverless.protocol.Spec
             * @static
             * @param {akkaserverless.protocol.ISpec=} [properties] Properties to set
             * @returns {akkaserverless.protocol.Spec} Spec instance
             */
            Spec.create = function create(properties) {
                return new Spec(properties);
            };

            /**
             * Encodes the specified Spec message. Does not implicitly {@link akkaserverless.protocol.Spec.verify|verify} messages.
             * @function encode
             * @memberof akkaserverless.protocol.Spec
             * @static
             * @param {akkaserverless.protocol.ISpec} message Spec message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Spec.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.proto != null && Object.hasOwnProperty.call(message, "proto"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.proto);
                if (message.components != null && message.components.length)
                    for (var i = 0; i < message.components.length; ++i)
                        $root.akkaserverless.protocol.Component.encode(message.components[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.serviceInfo != null && Object.hasOwnProperty.call(message, "serviceInfo"))
                    $root.akkaserverless.protocol.ServiceInfo.encode(message.serviceInfo, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Spec message, length delimited. Does not implicitly {@link akkaserverless.protocol.Spec.verify|verify} messages.
             * @function encodeDelimited
             * @memberof akkaserverless.protocol.Spec
             * @static
             * @param {akkaserverless.protocol.ISpec} message Spec message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Spec.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Spec message from the specified reader or buffer.
             * @function decode
             * @memberof akkaserverless.protocol.Spec
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {akkaserverless.protocol.Spec} Spec
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Spec.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.protocol.Spec();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.proto = reader.bytes();
                        break;
                    case 2:
                        if (!(message.components && message.components.length))
                            message.components = [];
                        message.components.push($root.akkaserverless.protocol.Component.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.serviceInfo = $root.akkaserverless.protocol.ServiceInfo.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Spec message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof akkaserverless.protocol.Spec
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {akkaserverless.protocol.Spec} Spec
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Spec.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Spec message.
             * @function verify
             * @memberof akkaserverless.protocol.Spec
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Spec.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.proto != null && message.hasOwnProperty("proto"))
                    if (!(message.proto && typeof message.proto.length === "number" || $util.isString(message.proto)))
                        return "proto: buffer expected";
                if (message.components != null && message.hasOwnProperty("components")) {
                    if (!Array.isArray(message.components))
                        return "components: array expected";
                    for (var i = 0; i < message.components.length; ++i) {
                        var error = $root.akkaserverless.protocol.Component.verify(message.components[i]);
                        if (error)
                            return "components." + error;
                    }
                }
                if (message.serviceInfo != null && message.hasOwnProperty("serviceInfo")) {
                    var error = $root.akkaserverless.protocol.ServiceInfo.verify(message.serviceInfo);
                    if (error)
                        return "serviceInfo." + error;
                }
                return null;
            };

            /**
             * Creates a Spec message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof akkaserverless.protocol.Spec
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {akkaserverless.protocol.Spec} Spec
             */
            Spec.fromObject = function fromObject(object) {
                if (object instanceof $root.akkaserverless.protocol.Spec)
                    return object;
                var message = new $root.akkaserverless.protocol.Spec();
                if (object.proto != null)
                    if (typeof object.proto === "string")
                        $util.base64.decode(object.proto, message.proto = $util.newBuffer($util.base64.length(object.proto)), 0);
                    else if (object.proto.length)
                        message.proto = object.proto;
                if (object.components) {
                    if (!Array.isArray(object.components))
                        throw TypeError(".akkaserverless.protocol.Spec.components: array expected");
                    message.components = [];
                    for (var i = 0; i < object.components.length; ++i) {
                        if (typeof object.components[i] !== "object")
                            throw TypeError(".akkaserverless.protocol.Spec.components: object expected");
                        message.components[i] = $root.akkaserverless.protocol.Component.fromObject(object.components[i]);
                    }
                }
                if (object.serviceInfo != null) {
                    if (typeof object.serviceInfo !== "object")
                        throw TypeError(".akkaserverless.protocol.Spec.serviceInfo: object expected");
                    message.serviceInfo = $root.akkaserverless.protocol.ServiceInfo.fromObject(object.serviceInfo);
                }
                return message;
            };

            /**
             * Creates a plain object from a Spec message. Also converts values to other types if specified.
             * @function toObject
             * @memberof akkaserverless.protocol.Spec
             * @static
             * @param {akkaserverless.protocol.Spec} message Spec
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Spec.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.components = [];
                if (options.defaults) {
                    if (options.bytes === String)
                        object.proto = "";
                    else {
                        object.proto = [];
                        if (options.bytes !== Array)
                            object.proto = $util.newBuffer(object.proto);
                    }
                    object.serviceInfo = null;
                }
                if (message.proto != null && message.hasOwnProperty("proto"))
                    object.proto = options.bytes === String ? $util.base64.encode(message.proto, 0, message.proto.length) : options.bytes === Array ? Array.prototype.slice.call(message.proto) : message.proto;
                if (message.components && message.components.length) {
                    object.components = [];
                    for (var j = 0; j < message.components.length; ++j)
                        object.components[j] = $root.akkaserverless.protocol.Component.toObject(message.components[j], options);
                }
                if (message.serviceInfo != null && message.hasOwnProperty("serviceInfo"))
                    object.serviceInfo = $root.akkaserverless.protocol.ServiceInfo.toObject(message.serviceInfo, options);
                return object;
            };

            /**
             * Converts this Spec to JSON.
             * @function toJSON
             * @memberof akkaserverless.protocol.Spec
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Spec.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Spec;
        })();

        protocol.ServiceInfo = (function() {

            /**
             * Properties of a ServiceInfo.
             * @memberof akkaserverless.protocol
             * @interface IServiceInfo
             * @property {string|null} [serviceName] ServiceInfo serviceName
             * @property {string|null} [serviceVersion] ServiceInfo serviceVersion
             * @property {string|null} [serviceRuntime] ServiceInfo serviceRuntime
             * @property {string|null} [supportLibraryName] ServiceInfo supportLibraryName
             * @property {string|null} [supportLibraryVersion] ServiceInfo supportLibraryVersion
             * @property {number|null} [protocolMajorVersion] ServiceInfo protocolMajorVersion
             * @property {number|null} [protocolMinorVersion] ServiceInfo protocolMinorVersion
             */

            /**
             * Constructs a new ServiceInfo.
             * @memberof akkaserverless.protocol
             * @classdesc Represents a ServiceInfo.
             * @implements IServiceInfo
             * @constructor
             * @param {akkaserverless.protocol.IServiceInfo=} [properties] Properties to set
             */
            function ServiceInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ServiceInfo serviceName.
             * @member {string} serviceName
             * @memberof akkaserverless.protocol.ServiceInfo
             * @instance
             */
            ServiceInfo.prototype.serviceName = "";

            /**
             * ServiceInfo serviceVersion.
             * @member {string} serviceVersion
             * @memberof akkaserverless.protocol.ServiceInfo
             * @instance
             */
            ServiceInfo.prototype.serviceVersion = "";

            /**
             * ServiceInfo serviceRuntime.
             * @member {string} serviceRuntime
             * @memberof akkaserverless.protocol.ServiceInfo
             * @instance
             */
            ServiceInfo.prototype.serviceRuntime = "";

            /**
             * ServiceInfo supportLibraryName.
             * @member {string} supportLibraryName
             * @memberof akkaserverless.protocol.ServiceInfo
             * @instance
             */
            ServiceInfo.prototype.supportLibraryName = "";

            /**
             * ServiceInfo supportLibraryVersion.
             * @member {string} supportLibraryVersion
             * @memberof akkaserverless.protocol.ServiceInfo
             * @instance
             */
            ServiceInfo.prototype.supportLibraryVersion = "";

            /**
             * ServiceInfo protocolMajorVersion.
             * @member {number} protocolMajorVersion
             * @memberof akkaserverless.protocol.ServiceInfo
             * @instance
             */
            ServiceInfo.prototype.protocolMajorVersion = 0;

            /**
             * ServiceInfo protocolMinorVersion.
             * @member {number} protocolMinorVersion
             * @memberof akkaserverless.protocol.ServiceInfo
             * @instance
             */
            ServiceInfo.prototype.protocolMinorVersion = 0;

            /**
             * Creates a new ServiceInfo instance using the specified properties.
             * @function create
             * @memberof akkaserverless.protocol.ServiceInfo
             * @static
             * @param {akkaserverless.protocol.IServiceInfo=} [properties] Properties to set
             * @returns {akkaserverless.protocol.ServiceInfo} ServiceInfo instance
             */
            ServiceInfo.create = function create(properties) {
                return new ServiceInfo(properties);
            };

            /**
             * Encodes the specified ServiceInfo message. Does not implicitly {@link akkaserverless.protocol.ServiceInfo.verify|verify} messages.
             * @function encode
             * @memberof akkaserverless.protocol.ServiceInfo
             * @static
             * @param {akkaserverless.protocol.IServiceInfo} message ServiceInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.serviceName != null && Object.hasOwnProperty.call(message, "serviceName"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.serviceName);
                if (message.serviceVersion != null && Object.hasOwnProperty.call(message, "serviceVersion"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.serviceVersion);
                if (message.serviceRuntime != null && Object.hasOwnProperty.call(message, "serviceRuntime"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.serviceRuntime);
                if (message.supportLibraryName != null && Object.hasOwnProperty.call(message, "supportLibraryName"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.supportLibraryName);
                if (message.supportLibraryVersion != null && Object.hasOwnProperty.call(message, "supportLibraryVersion"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.supportLibraryVersion);
                if (message.protocolMajorVersion != null && Object.hasOwnProperty.call(message, "protocolMajorVersion"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.protocolMajorVersion);
                if (message.protocolMinorVersion != null && Object.hasOwnProperty.call(message, "protocolMinorVersion"))
                    writer.uint32(/* id 7, wireType 0 =*/56).int32(message.protocolMinorVersion);
                return writer;
            };

            /**
             * Encodes the specified ServiceInfo message, length delimited. Does not implicitly {@link akkaserverless.protocol.ServiceInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof akkaserverless.protocol.ServiceInfo
             * @static
             * @param {akkaserverless.protocol.IServiceInfo} message ServiceInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ServiceInfo message from the specified reader or buffer.
             * @function decode
             * @memberof akkaserverless.protocol.ServiceInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {akkaserverless.protocol.ServiceInfo} ServiceInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.protocol.ServiceInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.serviceName = reader.string();
                        break;
                    case 2:
                        message.serviceVersion = reader.string();
                        break;
                    case 3:
                        message.serviceRuntime = reader.string();
                        break;
                    case 4:
                        message.supportLibraryName = reader.string();
                        break;
                    case 5:
                        message.supportLibraryVersion = reader.string();
                        break;
                    case 6:
                        message.protocolMajorVersion = reader.int32();
                        break;
                    case 7:
                        message.protocolMinorVersion = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ServiceInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof akkaserverless.protocol.ServiceInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {akkaserverless.protocol.ServiceInfo} ServiceInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ServiceInfo message.
             * @function verify
             * @memberof akkaserverless.protocol.ServiceInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ServiceInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                    if (!$util.isString(message.serviceName))
                        return "serviceName: string expected";
                if (message.serviceVersion != null && message.hasOwnProperty("serviceVersion"))
                    if (!$util.isString(message.serviceVersion))
                        return "serviceVersion: string expected";
                if (message.serviceRuntime != null && message.hasOwnProperty("serviceRuntime"))
                    if (!$util.isString(message.serviceRuntime))
                        return "serviceRuntime: string expected";
                if (message.supportLibraryName != null && message.hasOwnProperty("supportLibraryName"))
                    if (!$util.isString(message.supportLibraryName))
                        return "supportLibraryName: string expected";
                if (message.supportLibraryVersion != null && message.hasOwnProperty("supportLibraryVersion"))
                    if (!$util.isString(message.supportLibraryVersion))
                        return "supportLibraryVersion: string expected";
                if (message.protocolMajorVersion != null && message.hasOwnProperty("protocolMajorVersion"))
                    if (!$util.isInteger(message.protocolMajorVersion))
                        return "protocolMajorVersion: integer expected";
                if (message.protocolMinorVersion != null && message.hasOwnProperty("protocolMinorVersion"))
                    if (!$util.isInteger(message.protocolMinorVersion))
                        return "protocolMinorVersion: integer expected";
                return null;
            };

            /**
             * Creates a ServiceInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof akkaserverless.protocol.ServiceInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {akkaserverless.protocol.ServiceInfo} ServiceInfo
             */
            ServiceInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.akkaserverless.protocol.ServiceInfo)
                    return object;
                var message = new $root.akkaserverless.protocol.ServiceInfo();
                if (object.serviceName != null)
                    message.serviceName = String(object.serviceName);
                if (object.serviceVersion != null)
                    message.serviceVersion = String(object.serviceVersion);
                if (object.serviceRuntime != null)
                    message.serviceRuntime = String(object.serviceRuntime);
                if (object.supportLibraryName != null)
                    message.supportLibraryName = String(object.supportLibraryName);
                if (object.supportLibraryVersion != null)
                    message.supportLibraryVersion = String(object.supportLibraryVersion);
                if (object.protocolMajorVersion != null)
                    message.protocolMajorVersion = object.protocolMajorVersion | 0;
                if (object.protocolMinorVersion != null)
                    message.protocolMinorVersion = object.protocolMinorVersion | 0;
                return message;
            };

            /**
             * Creates a plain object from a ServiceInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof akkaserverless.protocol.ServiceInfo
             * @static
             * @param {akkaserverless.protocol.ServiceInfo} message ServiceInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ServiceInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.serviceName = "";
                    object.serviceVersion = "";
                    object.serviceRuntime = "";
                    object.supportLibraryName = "";
                    object.supportLibraryVersion = "";
                    object.protocolMajorVersion = 0;
                    object.protocolMinorVersion = 0;
                }
                if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                    object.serviceName = message.serviceName;
                if (message.serviceVersion != null && message.hasOwnProperty("serviceVersion"))
                    object.serviceVersion = message.serviceVersion;
                if (message.serviceRuntime != null && message.hasOwnProperty("serviceRuntime"))
                    object.serviceRuntime = message.serviceRuntime;
                if (message.supportLibraryName != null && message.hasOwnProperty("supportLibraryName"))
                    object.supportLibraryName = message.supportLibraryName;
                if (message.supportLibraryVersion != null && message.hasOwnProperty("supportLibraryVersion"))
                    object.supportLibraryVersion = message.supportLibraryVersion;
                if (message.protocolMajorVersion != null && message.hasOwnProperty("protocolMajorVersion"))
                    object.protocolMajorVersion = message.protocolMajorVersion;
                if (message.protocolMinorVersion != null && message.hasOwnProperty("protocolMinorVersion"))
                    object.protocolMinorVersion = message.protocolMinorVersion;
                return object;
            };

            /**
             * Converts this ServiceInfo to JSON.
             * @function toJSON
             * @memberof akkaserverless.protocol.ServiceInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ServiceInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ServiceInfo;
        })();

        protocol.Component = (function() {

            /**
             * Properties of a Component.
             * @memberof akkaserverless.protocol
             * @interface IComponent
             * @property {string|null} [componentType] Component componentType
             * @property {string|null} [serviceName] Component serviceName
             * @property {akkaserverless.protocol.IEntitySettings|null} [entity] Component entity
             */

            /**
             * Constructs a new Component.
             * @memberof akkaserverless.protocol
             * @classdesc Represents a Component.
             * @implements IComponent
             * @constructor
             * @param {akkaserverless.protocol.IComponent=} [properties] Properties to set
             */
            function Component(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Component componentType.
             * @member {string} componentType
             * @memberof akkaserverless.protocol.Component
             * @instance
             */
            Component.prototype.componentType = "";

            /**
             * Component serviceName.
             * @member {string} serviceName
             * @memberof akkaserverless.protocol.Component
             * @instance
             */
            Component.prototype.serviceName = "";

            /**
             * Component entity.
             * @member {akkaserverless.protocol.IEntitySettings|null|undefined} entity
             * @memberof akkaserverless.protocol.Component
             * @instance
             */
            Component.prototype.entity = null;

            // OneOf field names bound to virtual getters and setters
            var $oneOfFields;

            /**
             * Component componentSettings.
             * @member {"entity"|undefined} componentSettings
             * @memberof akkaserverless.protocol.Component
             * @instance
             */
            Object.defineProperty(Component.prototype, "componentSettings", {
                get: $util.oneOfGetter($oneOfFields = ["entity"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new Component instance using the specified properties.
             * @function create
             * @memberof akkaserverless.protocol.Component
             * @static
             * @param {akkaserverless.protocol.IComponent=} [properties] Properties to set
             * @returns {akkaserverless.protocol.Component} Component instance
             */
            Component.create = function create(properties) {
                return new Component(properties);
            };

            /**
             * Encodes the specified Component message. Does not implicitly {@link akkaserverless.protocol.Component.verify|verify} messages.
             * @function encode
             * @memberof akkaserverless.protocol.Component
             * @static
             * @param {akkaserverless.protocol.IComponent} message Component message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Component.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.componentType != null && Object.hasOwnProperty.call(message, "componentType"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.componentType);
                if (message.serviceName != null && Object.hasOwnProperty.call(message, "serviceName"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.serviceName);
                if (message.entity != null && Object.hasOwnProperty.call(message, "entity"))
                    $root.akkaserverless.protocol.EntitySettings.encode(message.entity, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Component message, length delimited. Does not implicitly {@link akkaserverless.protocol.Component.verify|verify} messages.
             * @function encodeDelimited
             * @memberof akkaserverless.protocol.Component
             * @static
             * @param {akkaserverless.protocol.IComponent} message Component message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Component.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Component message from the specified reader or buffer.
             * @function decode
             * @memberof akkaserverless.protocol.Component
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {akkaserverless.protocol.Component} Component
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Component.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.protocol.Component();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.componentType = reader.string();
                        break;
                    case 2:
                        message.serviceName = reader.string();
                        break;
                    case 3:
                        message.entity = $root.akkaserverless.protocol.EntitySettings.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Component message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof akkaserverless.protocol.Component
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {akkaserverless.protocol.Component} Component
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Component.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Component message.
             * @function verify
             * @memberof akkaserverless.protocol.Component
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Component.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.componentType != null && message.hasOwnProperty("componentType"))
                    if (!$util.isString(message.componentType))
                        return "componentType: string expected";
                if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                    if (!$util.isString(message.serviceName))
                        return "serviceName: string expected";
                if (message.entity != null && message.hasOwnProperty("entity")) {
                    properties.componentSettings = 1;
                    {
                        var error = $root.akkaserverless.protocol.EntitySettings.verify(message.entity);
                        if (error)
                            return "entity." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a Component message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof akkaserverless.protocol.Component
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {akkaserverless.protocol.Component} Component
             */
            Component.fromObject = function fromObject(object) {
                if (object instanceof $root.akkaserverless.protocol.Component)
                    return object;
                var message = new $root.akkaserverless.protocol.Component();
                if (object.componentType != null)
                    message.componentType = String(object.componentType);
                if (object.serviceName != null)
                    message.serviceName = String(object.serviceName);
                if (object.entity != null) {
                    if (typeof object.entity !== "object")
                        throw TypeError(".akkaserverless.protocol.Component.entity: object expected");
                    message.entity = $root.akkaserverless.protocol.EntitySettings.fromObject(object.entity);
                }
                return message;
            };

            /**
             * Creates a plain object from a Component message. Also converts values to other types if specified.
             * @function toObject
             * @memberof akkaserverless.protocol.Component
             * @static
             * @param {akkaserverless.protocol.Component} message Component
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Component.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.componentType = "";
                    object.serviceName = "";
                }
                if (message.componentType != null && message.hasOwnProperty("componentType"))
                    object.componentType = message.componentType;
                if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                    object.serviceName = message.serviceName;
                if (message.entity != null && message.hasOwnProperty("entity")) {
                    object.entity = $root.akkaserverless.protocol.EntitySettings.toObject(message.entity, options);
                    if (options.oneofs)
                        object.componentSettings = "entity";
                }
                return object;
            };

            /**
             * Converts this Component to JSON.
             * @function toJSON
             * @memberof akkaserverless.protocol.Component
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Component.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Component;
        })();

        protocol.EntitySettings = (function() {

            /**
             * Properties of an EntitySettings.
             * @memberof akkaserverless.protocol
             * @interface IEntitySettings
             * @property {string|null} [entityType] EntitySettings entityType
             * @property {akkaserverless.protocol.IPassivationStrategy|null} [passivationStrategy] EntitySettings passivationStrategy
             */

            /**
             * Constructs a new EntitySettings.
             * @memberof akkaserverless.protocol
             * @classdesc Represents an EntitySettings.
             * @implements IEntitySettings
             * @constructor
             * @param {akkaserverless.protocol.IEntitySettings=} [properties] Properties to set
             */
            function EntitySettings(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EntitySettings entityType.
             * @member {string} entityType
             * @memberof akkaserverless.protocol.EntitySettings
             * @instance
             */
            EntitySettings.prototype.entityType = "";

            /**
             * EntitySettings passivationStrategy.
             * @member {akkaserverless.protocol.IPassivationStrategy|null|undefined} passivationStrategy
             * @memberof akkaserverless.protocol.EntitySettings
             * @instance
             */
            EntitySettings.prototype.passivationStrategy = null;

            /**
             * Creates a new EntitySettings instance using the specified properties.
             * @function create
             * @memberof akkaserverless.protocol.EntitySettings
             * @static
             * @param {akkaserverless.protocol.IEntitySettings=} [properties] Properties to set
             * @returns {akkaserverless.protocol.EntitySettings} EntitySettings instance
             */
            EntitySettings.create = function create(properties) {
                return new EntitySettings(properties);
            };

            /**
             * Encodes the specified EntitySettings message. Does not implicitly {@link akkaserverless.protocol.EntitySettings.verify|verify} messages.
             * @function encode
             * @memberof akkaserverless.protocol.EntitySettings
             * @static
             * @param {akkaserverless.protocol.IEntitySettings} message EntitySettings message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EntitySettings.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.entityType != null && Object.hasOwnProperty.call(message, "entityType"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.entityType);
                if (message.passivationStrategy != null && Object.hasOwnProperty.call(message, "passivationStrategy"))
                    $root.akkaserverless.protocol.PassivationStrategy.encode(message.passivationStrategy, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified EntitySettings message, length delimited. Does not implicitly {@link akkaserverless.protocol.EntitySettings.verify|verify} messages.
             * @function encodeDelimited
             * @memberof akkaserverless.protocol.EntitySettings
             * @static
             * @param {akkaserverless.protocol.IEntitySettings} message EntitySettings message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EntitySettings.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EntitySettings message from the specified reader or buffer.
             * @function decode
             * @memberof akkaserverless.protocol.EntitySettings
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {akkaserverless.protocol.EntitySettings} EntitySettings
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EntitySettings.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.protocol.EntitySettings();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 3:
                        message.entityType = reader.string();
                        break;
                    case 4:
                        message.passivationStrategy = $root.akkaserverless.protocol.PassivationStrategy.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EntitySettings message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof akkaserverless.protocol.EntitySettings
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {akkaserverless.protocol.EntitySettings} EntitySettings
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EntitySettings.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EntitySettings message.
             * @function verify
             * @memberof akkaserverless.protocol.EntitySettings
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EntitySettings.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.entityType != null && message.hasOwnProperty("entityType"))
                    if (!$util.isString(message.entityType))
                        return "entityType: string expected";
                if (message.passivationStrategy != null && message.hasOwnProperty("passivationStrategy")) {
                    var error = $root.akkaserverless.protocol.PassivationStrategy.verify(message.passivationStrategy);
                    if (error)
                        return "passivationStrategy." + error;
                }
                return null;
            };

            /**
             * Creates an EntitySettings message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof akkaserverless.protocol.EntitySettings
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {akkaserverless.protocol.EntitySettings} EntitySettings
             */
            EntitySettings.fromObject = function fromObject(object) {
                if (object instanceof $root.akkaserverless.protocol.EntitySettings)
                    return object;
                var message = new $root.akkaserverless.protocol.EntitySettings();
                if (object.entityType != null)
                    message.entityType = String(object.entityType);
                if (object.passivationStrategy != null) {
                    if (typeof object.passivationStrategy !== "object")
                        throw TypeError(".akkaserverless.protocol.EntitySettings.passivationStrategy: object expected");
                    message.passivationStrategy = $root.akkaserverless.protocol.PassivationStrategy.fromObject(object.passivationStrategy);
                }
                return message;
            };

            /**
             * Creates a plain object from an EntitySettings message. Also converts values to other types if specified.
             * @function toObject
             * @memberof akkaserverless.protocol.EntitySettings
             * @static
             * @param {akkaserverless.protocol.EntitySettings} message EntitySettings
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EntitySettings.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.entityType = "";
                    object.passivationStrategy = null;
                }
                if (message.entityType != null && message.hasOwnProperty("entityType"))
                    object.entityType = message.entityType;
                if (message.passivationStrategy != null && message.hasOwnProperty("passivationStrategy"))
                    object.passivationStrategy = $root.akkaserverless.protocol.PassivationStrategy.toObject(message.passivationStrategy, options);
                return object;
            };

            /**
             * Converts this EntitySettings to JSON.
             * @function toJSON
             * @memberof akkaserverless.protocol.EntitySettings
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EntitySettings.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EntitySettings;
        })();

        protocol.PassivationStrategy = (function() {

            /**
             * Properties of a PassivationStrategy.
             * @memberof akkaserverless.protocol
             * @interface IPassivationStrategy
             * @property {akkaserverless.protocol.ITimeoutPassivationStrategy|null} [timeout] PassivationStrategy timeout
             */

            /**
             * Constructs a new PassivationStrategy.
             * @memberof akkaserverless.protocol
             * @classdesc Represents a PassivationStrategy.
             * @implements IPassivationStrategy
             * @constructor
             * @param {akkaserverless.protocol.IPassivationStrategy=} [properties] Properties to set
             */
            function PassivationStrategy(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PassivationStrategy timeout.
             * @member {akkaserverless.protocol.ITimeoutPassivationStrategy|null|undefined} timeout
             * @memberof akkaserverless.protocol.PassivationStrategy
             * @instance
             */
            PassivationStrategy.prototype.timeout = null;

            // OneOf field names bound to virtual getters and setters
            var $oneOfFields;

            /**
             * PassivationStrategy strategy.
             * @member {"timeout"|undefined} strategy
             * @memberof akkaserverless.protocol.PassivationStrategy
             * @instance
             */
            Object.defineProperty(PassivationStrategy.prototype, "strategy", {
                get: $util.oneOfGetter($oneOfFields = ["timeout"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new PassivationStrategy instance using the specified properties.
             * @function create
             * @memberof akkaserverless.protocol.PassivationStrategy
             * @static
             * @param {akkaserverless.protocol.IPassivationStrategy=} [properties] Properties to set
             * @returns {akkaserverless.protocol.PassivationStrategy} PassivationStrategy instance
             */
            PassivationStrategy.create = function create(properties) {
                return new PassivationStrategy(properties);
            };

            /**
             * Encodes the specified PassivationStrategy message. Does not implicitly {@link akkaserverless.protocol.PassivationStrategy.verify|verify} messages.
             * @function encode
             * @memberof akkaserverless.protocol.PassivationStrategy
             * @static
             * @param {akkaserverless.protocol.IPassivationStrategy} message PassivationStrategy message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PassivationStrategy.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.timeout != null && Object.hasOwnProperty.call(message, "timeout"))
                    $root.akkaserverless.protocol.TimeoutPassivationStrategy.encode(message.timeout, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified PassivationStrategy message, length delimited. Does not implicitly {@link akkaserverless.protocol.PassivationStrategy.verify|verify} messages.
             * @function encodeDelimited
             * @memberof akkaserverless.protocol.PassivationStrategy
             * @static
             * @param {akkaserverless.protocol.IPassivationStrategy} message PassivationStrategy message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PassivationStrategy.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PassivationStrategy message from the specified reader or buffer.
             * @function decode
             * @memberof akkaserverless.protocol.PassivationStrategy
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {akkaserverless.protocol.PassivationStrategy} PassivationStrategy
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PassivationStrategy.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.protocol.PassivationStrategy();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.timeout = $root.akkaserverless.protocol.TimeoutPassivationStrategy.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PassivationStrategy message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof akkaserverless.protocol.PassivationStrategy
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {akkaserverless.protocol.PassivationStrategy} PassivationStrategy
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PassivationStrategy.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PassivationStrategy message.
             * @function verify
             * @memberof akkaserverless.protocol.PassivationStrategy
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PassivationStrategy.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.timeout != null && message.hasOwnProperty("timeout")) {
                    properties.strategy = 1;
                    {
                        var error = $root.akkaserverless.protocol.TimeoutPassivationStrategy.verify(message.timeout);
                        if (error)
                            return "timeout." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a PassivationStrategy message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof akkaserverless.protocol.PassivationStrategy
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {akkaserverless.protocol.PassivationStrategy} PassivationStrategy
             */
            PassivationStrategy.fromObject = function fromObject(object) {
                if (object instanceof $root.akkaserverless.protocol.PassivationStrategy)
                    return object;
                var message = new $root.akkaserverless.protocol.PassivationStrategy();
                if (object.timeout != null) {
                    if (typeof object.timeout !== "object")
                        throw TypeError(".akkaserverless.protocol.PassivationStrategy.timeout: object expected");
                    message.timeout = $root.akkaserverless.protocol.TimeoutPassivationStrategy.fromObject(object.timeout);
                }
                return message;
            };

            /**
             * Creates a plain object from a PassivationStrategy message. Also converts values to other types if specified.
             * @function toObject
             * @memberof akkaserverless.protocol.PassivationStrategy
             * @static
             * @param {akkaserverless.protocol.PassivationStrategy} message PassivationStrategy
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PassivationStrategy.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (message.timeout != null && message.hasOwnProperty("timeout")) {
                    object.timeout = $root.akkaserverless.protocol.TimeoutPassivationStrategy.toObject(message.timeout, options);
                    if (options.oneofs)
                        object.strategy = "timeout";
                }
                return object;
            };

            /**
             * Converts this PassivationStrategy to JSON.
             * @function toJSON
             * @memberof akkaserverless.protocol.PassivationStrategy
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PassivationStrategy.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PassivationStrategy;
        })();

        protocol.TimeoutPassivationStrategy = (function() {

            /**
             * Properties of a TimeoutPassivationStrategy.
             * @memberof akkaserverless.protocol
             * @interface ITimeoutPassivationStrategy
             * @property {number|Long|null} [timeout] TimeoutPassivationStrategy timeout
             */

            /**
             * Constructs a new TimeoutPassivationStrategy.
             * @memberof akkaserverless.protocol
             * @classdesc Represents a TimeoutPassivationStrategy.
             * @implements ITimeoutPassivationStrategy
             * @constructor
             * @param {akkaserverless.protocol.ITimeoutPassivationStrategy=} [properties] Properties to set
             */
            function TimeoutPassivationStrategy(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * TimeoutPassivationStrategy timeout.
             * @member {number|Long} timeout
             * @memberof akkaserverless.protocol.TimeoutPassivationStrategy
             * @instance
             */
            TimeoutPassivationStrategy.prototype.timeout = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new TimeoutPassivationStrategy instance using the specified properties.
             * @function create
             * @memberof akkaserverless.protocol.TimeoutPassivationStrategy
             * @static
             * @param {akkaserverless.protocol.ITimeoutPassivationStrategy=} [properties] Properties to set
             * @returns {akkaserverless.protocol.TimeoutPassivationStrategy} TimeoutPassivationStrategy instance
             */
            TimeoutPassivationStrategy.create = function create(properties) {
                return new TimeoutPassivationStrategy(properties);
            };

            /**
             * Encodes the specified TimeoutPassivationStrategy message. Does not implicitly {@link akkaserverless.protocol.TimeoutPassivationStrategy.verify|verify} messages.
             * @function encode
             * @memberof akkaserverless.protocol.TimeoutPassivationStrategy
             * @static
             * @param {akkaserverless.protocol.ITimeoutPassivationStrategy} message TimeoutPassivationStrategy message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TimeoutPassivationStrategy.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.timeout != null && Object.hasOwnProperty.call(message, "timeout"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.timeout);
                return writer;
            };

            /**
             * Encodes the specified TimeoutPassivationStrategy message, length delimited. Does not implicitly {@link akkaserverless.protocol.TimeoutPassivationStrategy.verify|verify} messages.
             * @function encodeDelimited
             * @memberof akkaserverless.protocol.TimeoutPassivationStrategy
             * @static
             * @param {akkaserverless.protocol.ITimeoutPassivationStrategy} message TimeoutPassivationStrategy message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TimeoutPassivationStrategy.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a TimeoutPassivationStrategy message from the specified reader or buffer.
             * @function decode
             * @memberof akkaserverless.protocol.TimeoutPassivationStrategy
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {akkaserverless.protocol.TimeoutPassivationStrategy} TimeoutPassivationStrategy
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TimeoutPassivationStrategy.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.protocol.TimeoutPassivationStrategy();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.timeout = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a TimeoutPassivationStrategy message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof akkaserverless.protocol.TimeoutPassivationStrategy
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {akkaserverless.protocol.TimeoutPassivationStrategy} TimeoutPassivationStrategy
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TimeoutPassivationStrategy.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a TimeoutPassivationStrategy message.
             * @function verify
             * @memberof akkaserverless.protocol.TimeoutPassivationStrategy
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TimeoutPassivationStrategy.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.timeout != null && message.hasOwnProperty("timeout"))
                    if (!$util.isInteger(message.timeout) && !(message.timeout && $util.isInteger(message.timeout.low) && $util.isInteger(message.timeout.high)))
                        return "timeout: integer|Long expected";
                return null;
            };

            /**
             * Creates a TimeoutPassivationStrategy message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof akkaserverless.protocol.TimeoutPassivationStrategy
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {akkaserverless.protocol.TimeoutPassivationStrategy} TimeoutPassivationStrategy
             */
            TimeoutPassivationStrategy.fromObject = function fromObject(object) {
                if (object instanceof $root.akkaserverless.protocol.TimeoutPassivationStrategy)
                    return object;
                var message = new $root.akkaserverless.protocol.TimeoutPassivationStrategy();
                if (object.timeout != null)
                    if ($util.Long)
                        (message.timeout = $util.Long.fromValue(object.timeout)).unsigned = false;
                    else if (typeof object.timeout === "string")
                        message.timeout = parseInt(object.timeout, 10);
                    else if (typeof object.timeout === "number")
                        message.timeout = object.timeout;
                    else if (typeof object.timeout === "object")
                        message.timeout = new $util.LongBits(object.timeout.low >>> 0, object.timeout.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a TimeoutPassivationStrategy message. Also converts values to other types if specified.
             * @function toObject
             * @memberof akkaserverless.protocol.TimeoutPassivationStrategy
             * @static
             * @param {akkaserverless.protocol.TimeoutPassivationStrategy} message TimeoutPassivationStrategy
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TimeoutPassivationStrategy.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.timeout = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.timeout = options.longs === String ? "0" : 0;
                if (message.timeout != null && message.hasOwnProperty("timeout"))
                    if (typeof message.timeout === "number")
                        object.timeout = options.longs === String ? String(message.timeout) : message.timeout;
                    else
                        object.timeout = options.longs === String ? $util.Long.prototype.toString.call(message.timeout) : options.longs === Number ? new $util.LongBits(message.timeout.low >>> 0, message.timeout.high >>> 0).toNumber() : message.timeout;
                return object;
            };

            /**
             * Converts this TimeoutPassivationStrategy to JSON.
             * @function toJSON
             * @memberof akkaserverless.protocol.TimeoutPassivationStrategy
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TimeoutPassivationStrategy.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return TimeoutPassivationStrategy;
        })();

        protocol.UserFunctionError = (function() {

            /**
             * Properties of a UserFunctionError.
             * @memberof akkaserverless.protocol
             * @interface IUserFunctionError
             * @property {string|null} [message] UserFunctionError message
             * @property {string|null} [code] UserFunctionError code
             * @property {string|null} [detail] UserFunctionError detail
             * @property {Array.<akkaserverless.protocol.UserFunctionError.ISourceLocation>|null} [sourceLocations] UserFunctionError sourceLocations
             */

            /**
             * Constructs a new UserFunctionError.
             * @memberof akkaserverless.protocol
             * @classdesc Represents a UserFunctionError.
             * @implements IUserFunctionError
             * @constructor
             * @param {akkaserverless.protocol.IUserFunctionError=} [properties] Properties to set
             */
            function UserFunctionError(properties) {
                this.sourceLocations = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UserFunctionError message.
             * @member {string} message
             * @memberof akkaserverless.protocol.UserFunctionError
             * @instance
             */
            UserFunctionError.prototype.message = "";

            /**
             * UserFunctionError code.
             * @member {string} code
             * @memberof akkaserverless.protocol.UserFunctionError
             * @instance
             */
            UserFunctionError.prototype.code = "";

            /**
             * UserFunctionError detail.
             * @member {string} detail
             * @memberof akkaserverless.protocol.UserFunctionError
             * @instance
             */
            UserFunctionError.prototype.detail = "";

            /**
             * UserFunctionError sourceLocations.
             * @member {Array.<akkaserverless.protocol.UserFunctionError.ISourceLocation>} sourceLocations
             * @memberof akkaserverless.protocol.UserFunctionError
             * @instance
             */
            UserFunctionError.prototype.sourceLocations = $util.emptyArray;

            /**
             * Creates a new UserFunctionError instance using the specified properties.
             * @function create
             * @memberof akkaserverless.protocol.UserFunctionError
             * @static
             * @param {akkaserverless.protocol.IUserFunctionError=} [properties] Properties to set
             * @returns {akkaserverless.protocol.UserFunctionError} UserFunctionError instance
             */
            UserFunctionError.create = function create(properties) {
                return new UserFunctionError(properties);
            };

            /**
             * Encodes the specified UserFunctionError message. Does not implicitly {@link akkaserverless.protocol.UserFunctionError.verify|verify} messages.
             * @function encode
             * @memberof akkaserverless.protocol.UserFunctionError
             * @static
             * @param {akkaserverless.protocol.IUserFunctionError} message UserFunctionError message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UserFunctionError.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.message);
                if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.code);
                if (message.detail != null && Object.hasOwnProperty.call(message, "detail"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.detail);
                if (message.sourceLocations != null && message.sourceLocations.length)
                    for (var i = 0; i < message.sourceLocations.length; ++i)
                        $root.akkaserverless.protocol.UserFunctionError.SourceLocation.encode(message.sourceLocations[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified UserFunctionError message, length delimited. Does not implicitly {@link akkaserverless.protocol.UserFunctionError.verify|verify} messages.
             * @function encodeDelimited
             * @memberof akkaserverless.protocol.UserFunctionError
             * @static
             * @param {akkaserverless.protocol.IUserFunctionError} message UserFunctionError message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UserFunctionError.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a UserFunctionError message from the specified reader or buffer.
             * @function decode
             * @memberof akkaserverless.protocol.UserFunctionError
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {akkaserverless.protocol.UserFunctionError} UserFunctionError
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UserFunctionError.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.protocol.UserFunctionError();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.message = reader.string();
                        break;
                    case 2:
                        message.code = reader.string();
                        break;
                    case 3:
                        message.detail = reader.string();
                        break;
                    case 4:
                        if (!(message.sourceLocations && message.sourceLocations.length))
                            message.sourceLocations = [];
                        message.sourceLocations.push($root.akkaserverless.protocol.UserFunctionError.SourceLocation.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a UserFunctionError message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof akkaserverless.protocol.UserFunctionError
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {akkaserverless.protocol.UserFunctionError} UserFunctionError
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UserFunctionError.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a UserFunctionError message.
             * @function verify
             * @memberof akkaserverless.protocol.UserFunctionError
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UserFunctionError.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.message != null && message.hasOwnProperty("message"))
                    if (!$util.isString(message.message))
                        return "message: string expected";
                if (message.code != null && message.hasOwnProperty("code"))
                    if (!$util.isString(message.code))
                        return "code: string expected";
                if (message.detail != null && message.hasOwnProperty("detail"))
                    if (!$util.isString(message.detail))
                        return "detail: string expected";
                if (message.sourceLocations != null && message.hasOwnProperty("sourceLocations")) {
                    if (!Array.isArray(message.sourceLocations))
                        return "sourceLocations: array expected";
                    for (var i = 0; i < message.sourceLocations.length; ++i) {
                        var error = $root.akkaserverless.protocol.UserFunctionError.SourceLocation.verify(message.sourceLocations[i]);
                        if (error)
                            return "sourceLocations." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a UserFunctionError message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof akkaserverless.protocol.UserFunctionError
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {akkaserverless.protocol.UserFunctionError} UserFunctionError
             */
            UserFunctionError.fromObject = function fromObject(object) {
                if (object instanceof $root.akkaserverless.protocol.UserFunctionError)
                    return object;
                var message = new $root.akkaserverless.protocol.UserFunctionError();
                if (object.message != null)
                    message.message = String(object.message);
                if (object.code != null)
                    message.code = String(object.code);
                if (object.detail != null)
                    message.detail = String(object.detail);
                if (object.sourceLocations) {
                    if (!Array.isArray(object.sourceLocations))
                        throw TypeError(".akkaserverless.protocol.UserFunctionError.sourceLocations: array expected");
                    message.sourceLocations = [];
                    for (var i = 0; i < object.sourceLocations.length; ++i) {
                        if (typeof object.sourceLocations[i] !== "object")
                            throw TypeError(".akkaserverless.protocol.UserFunctionError.sourceLocations: object expected");
                        message.sourceLocations[i] = $root.akkaserverless.protocol.UserFunctionError.SourceLocation.fromObject(object.sourceLocations[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a UserFunctionError message. Also converts values to other types if specified.
             * @function toObject
             * @memberof akkaserverless.protocol.UserFunctionError
             * @static
             * @param {akkaserverless.protocol.UserFunctionError} message UserFunctionError
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UserFunctionError.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.sourceLocations = [];
                if (options.defaults) {
                    object.message = "";
                    object.code = "";
                    object.detail = "";
                }
                if (message.message != null && message.hasOwnProperty("message"))
                    object.message = message.message;
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                if (message.detail != null && message.hasOwnProperty("detail"))
                    object.detail = message.detail;
                if (message.sourceLocations && message.sourceLocations.length) {
                    object.sourceLocations = [];
                    for (var j = 0; j < message.sourceLocations.length; ++j)
                        object.sourceLocations[j] = $root.akkaserverless.protocol.UserFunctionError.SourceLocation.toObject(message.sourceLocations[j], options);
                }
                return object;
            };

            /**
             * Converts this UserFunctionError to JSON.
             * @function toJSON
             * @memberof akkaserverless.protocol.UserFunctionError
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UserFunctionError.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            UserFunctionError.SourceLocation = (function() {

                /**
                 * Properties of a SourceLocation.
                 * @memberof akkaserverless.protocol.UserFunctionError
                 * @interface ISourceLocation
                 * @property {string|null} [fileName] SourceLocation fileName
                 * @property {number|null} [startLine] SourceLocation startLine
                 * @property {number|null} [startCol] SourceLocation startCol
                 * @property {number|null} [endLine] SourceLocation endLine
                 * @property {number|null} [endCol] SourceLocation endCol
                 * @property {Array.<number>|null} [protoPath] SourceLocation protoPath
                 */

                /**
                 * Constructs a new SourceLocation.
                 * @memberof akkaserverless.protocol.UserFunctionError
                 * @classdesc Represents a SourceLocation.
                 * @implements ISourceLocation
                 * @constructor
                 * @param {akkaserverless.protocol.UserFunctionError.ISourceLocation=} [properties] Properties to set
                 */
                function SourceLocation(properties) {
                    this.protoPath = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * SourceLocation fileName.
                 * @member {string} fileName
                 * @memberof akkaserverless.protocol.UserFunctionError.SourceLocation
                 * @instance
                 */
                SourceLocation.prototype.fileName = "";

                /**
                 * SourceLocation startLine.
                 * @member {number} startLine
                 * @memberof akkaserverless.protocol.UserFunctionError.SourceLocation
                 * @instance
                 */
                SourceLocation.prototype.startLine = 0;

                /**
                 * SourceLocation startCol.
                 * @member {number} startCol
                 * @memberof akkaserverless.protocol.UserFunctionError.SourceLocation
                 * @instance
                 */
                SourceLocation.prototype.startCol = 0;

                /**
                 * SourceLocation endLine.
                 * @member {number} endLine
                 * @memberof akkaserverless.protocol.UserFunctionError.SourceLocation
                 * @instance
                 */
                SourceLocation.prototype.endLine = 0;

                /**
                 * SourceLocation endCol.
                 * @member {number} endCol
                 * @memberof akkaserverless.protocol.UserFunctionError.SourceLocation
                 * @instance
                 */
                SourceLocation.prototype.endCol = 0;

                /**
                 * SourceLocation protoPath.
                 * @member {Array.<number>} protoPath
                 * @memberof akkaserverless.protocol.UserFunctionError.SourceLocation
                 * @instance
                 */
                SourceLocation.prototype.protoPath = $util.emptyArray;

                /**
                 * Creates a new SourceLocation instance using the specified properties.
                 * @function create
                 * @memberof akkaserverless.protocol.UserFunctionError.SourceLocation
                 * @static
                 * @param {akkaserverless.protocol.UserFunctionError.ISourceLocation=} [properties] Properties to set
                 * @returns {akkaserverless.protocol.UserFunctionError.SourceLocation} SourceLocation instance
                 */
                SourceLocation.create = function create(properties) {
                    return new SourceLocation(properties);
                };

                /**
                 * Encodes the specified SourceLocation message. Does not implicitly {@link akkaserverless.protocol.UserFunctionError.SourceLocation.verify|verify} messages.
                 * @function encode
                 * @memberof akkaserverless.protocol.UserFunctionError.SourceLocation
                 * @static
                 * @param {akkaserverless.protocol.UserFunctionError.ISourceLocation} message SourceLocation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceLocation.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.fileName != null && Object.hasOwnProperty.call(message, "fileName"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.fileName);
                    if (message.startLine != null && Object.hasOwnProperty.call(message, "startLine"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.startLine);
                    if (message.startCol != null && Object.hasOwnProperty.call(message, "startCol"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.startCol);
                    if (message.endLine != null && Object.hasOwnProperty.call(message, "endLine"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.endLine);
                    if (message.endCol != null && Object.hasOwnProperty.call(message, "endCol"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.endCol);
                    if (message.protoPath != null && message.protoPath.length) {
                        writer.uint32(/* id 6, wireType 2 =*/50).fork();
                        for (var i = 0; i < message.protoPath.length; ++i)
                            writer.int32(message.protoPath[i]);
                        writer.ldelim();
                    }
                    return writer;
                };

                /**
                 * Encodes the specified SourceLocation message, length delimited. Does not implicitly {@link akkaserverless.protocol.UserFunctionError.SourceLocation.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof akkaserverless.protocol.UserFunctionError.SourceLocation
                 * @static
                 * @param {akkaserverless.protocol.UserFunctionError.ISourceLocation} message SourceLocation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceLocation.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a SourceLocation message from the specified reader or buffer.
                 * @function decode
                 * @memberof akkaserverless.protocol.UserFunctionError.SourceLocation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {akkaserverless.protocol.UserFunctionError.SourceLocation} SourceLocation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceLocation.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.protocol.UserFunctionError.SourceLocation();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.fileName = reader.string();
                            break;
                        case 2:
                            message.startLine = reader.int32();
                            break;
                        case 3:
                            message.startCol = reader.int32();
                            break;
                        case 4:
                            message.endLine = reader.int32();
                            break;
                        case 5:
                            message.endCol = reader.int32();
                            break;
                        case 6:
                            if (!(message.protoPath && message.protoPath.length))
                                message.protoPath = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.protoPath.push(reader.int32());
                            } else
                                message.protoPath.push(reader.int32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a SourceLocation message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof akkaserverless.protocol.UserFunctionError.SourceLocation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {akkaserverless.protocol.UserFunctionError.SourceLocation} SourceLocation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceLocation.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a SourceLocation message.
                 * @function verify
                 * @memberof akkaserverless.protocol.UserFunctionError.SourceLocation
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SourceLocation.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.fileName != null && message.hasOwnProperty("fileName"))
                        if (!$util.isString(message.fileName))
                            return "fileName: string expected";
                    if (message.startLine != null && message.hasOwnProperty("startLine"))
                        if (!$util.isInteger(message.startLine))
                            return "startLine: integer expected";
                    if (message.startCol != null && message.hasOwnProperty("startCol"))
                        if (!$util.isInteger(message.startCol))
                            return "startCol: integer expected";
                    if (message.endLine != null && message.hasOwnProperty("endLine"))
                        if (!$util.isInteger(message.endLine))
                            return "endLine: integer expected";
                    if (message.endCol != null && message.hasOwnProperty("endCol"))
                        if (!$util.isInteger(message.endCol))
                            return "endCol: integer expected";
                    if (message.protoPath != null && message.hasOwnProperty("protoPath")) {
                        if (!Array.isArray(message.protoPath))
                            return "protoPath: array expected";
                        for (var i = 0; i < message.protoPath.length; ++i)
                            if (!$util.isInteger(message.protoPath[i]))
                                return "protoPath: integer[] expected";
                    }
                    return null;
                };

                /**
                 * Creates a SourceLocation message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof akkaserverless.protocol.UserFunctionError.SourceLocation
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {akkaserverless.protocol.UserFunctionError.SourceLocation} SourceLocation
                 */
                SourceLocation.fromObject = function fromObject(object) {
                    if (object instanceof $root.akkaserverless.protocol.UserFunctionError.SourceLocation)
                        return object;
                    var message = new $root.akkaserverless.protocol.UserFunctionError.SourceLocation();
                    if (object.fileName != null)
                        message.fileName = String(object.fileName);
                    if (object.startLine != null)
                        message.startLine = object.startLine | 0;
                    if (object.startCol != null)
                        message.startCol = object.startCol | 0;
                    if (object.endLine != null)
                        message.endLine = object.endLine | 0;
                    if (object.endCol != null)
                        message.endCol = object.endCol | 0;
                    if (object.protoPath) {
                        if (!Array.isArray(object.protoPath))
                            throw TypeError(".akkaserverless.protocol.UserFunctionError.SourceLocation.protoPath: array expected");
                        message.protoPath = [];
                        for (var i = 0; i < object.protoPath.length; ++i)
                            message.protoPath[i] = object.protoPath[i] | 0;
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a SourceLocation message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof akkaserverless.protocol.UserFunctionError.SourceLocation
                 * @static
                 * @param {akkaserverless.protocol.UserFunctionError.SourceLocation} message SourceLocation
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SourceLocation.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.protoPath = [];
                    if (options.defaults) {
                        object.fileName = "";
                        object.startLine = 0;
                        object.startCol = 0;
                        object.endLine = 0;
                        object.endCol = 0;
                    }
                    if (message.fileName != null && message.hasOwnProperty("fileName"))
                        object.fileName = message.fileName;
                    if (message.startLine != null && message.hasOwnProperty("startLine"))
                        object.startLine = message.startLine;
                    if (message.startCol != null && message.hasOwnProperty("startCol"))
                        object.startCol = message.startCol;
                    if (message.endLine != null && message.hasOwnProperty("endLine"))
                        object.endLine = message.endLine;
                    if (message.endCol != null && message.hasOwnProperty("endCol"))
                        object.endCol = message.endCol;
                    if (message.protoPath && message.protoPath.length) {
                        object.protoPath = [];
                        for (var j = 0; j < message.protoPath.length; ++j)
                            object.protoPath[j] = message.protoPath[j];
                    }
                    return object;
                };

                /**
                 * Converts this SourceLocation to JSON.
                 * @function toJSON
                 * @memberof akkaserverless.protocol.UserFunctionError.SourceLocation
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SourceLocation.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return SourceLocation;
            })();

            return UserFunctionError;
        })();

        protocol.ProxyInfo = (function() {

            /**
             * Properties of a ProxyInfo.
             * @memberof akkaserverless.protocol
             * @interface IProxyInfo
             * @property {number|null} [protocolMajorVersion] ProxyInfo protocolMajorVersion
             * @property {number|null} [protocolMinorVersion] ProxyInfo protocolMinorVersion
             * @property {string|null} [proxyName] ProxyInfo proxyName
             * @property {string|null} [proxyVersion] ProxyInfo proxyVersion
             * @property {Array.<string>|null} [supportedEntityTypes] ProxyInfo supportedEntityTypes
             */

            /**
             * Constructs a new ProxyInfo.
             * @memberof akkaserverless.protocol
             * @classdesc Represents a ProxyInfo.
             * @implements IProxyInfo
             * @constructor
             * @param {akkaserverless.protocol.IProxyInfo=} [properties] Properties to set
             */
            function ProxyInfo(properties) {
                this.supportedEntityTypes = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ProxyInfo protocolMajorVersion.
             * @member {number} protocolMajorVersion
             * @memberof akkaserverless.protocol.ProxyInfo
             * @instance
             */
            ProxyInfo.prototype.protocolMajorVersion = 0;

            /**
             * ProxyInfo protocolMinorVersion.
             * @member {number} protocolMinorVersion
             * @memberof akkaserverless.protocol.ProxyInfo
             * @instance
             */
            ProxyInfo.prototype.protocolMinorVersion = 0;

            /**
             * ProxyInfo proxyName.
             * @member {string} proxyName
             * @memberof akkaserverless.protocol.ProxyInfo
             * @instance
             */
            ProxyInfo.prototype.proxyName = "";

            /**
             * ProxyInfo proxyVersion.
             * @member {string} proxyVersion
             * @memberof akkaserverless.protocol.ProxyInfo
             * @instance
             */
            ProxyInfo.prototype.proxyVersion = "";

            /**
             * ProxyInfo supportedEntityTypes.
             * @member {Array.<string>} supportedEntityTypes
             * @memberof akkaserverless.protocol.ProxyInfo
             * @instance
             */
            ProxyInfo.prototype.supportedEntityTypes = $util.emptyArray;

            /**
             * Creates a new ProxyInfo instance using the specified properties.
             * @function create
             * @memberof akkaserverless.protocol.ProxyInfo
             * @static
             * @param {akkaserverless.protocol.IProxyInfo=} [properties] Properties to set
             * @returns {akkaserverless.protocol.ProxyInfo} ProxyInfo instance
             */
            ProxyInfo.create = function create(properties) {
                return new ProxyInfo(properties);
            };

            /**
             * Encodes the specified ProxyInfo message. Does not implicitly {@link akkaserverless.protocol.ProxyInfo.verify|verify} messages.
             * @function encode
             * @memberof akkaserverless.protocol.ProxyInfo
             * @static
             * @param {akkaserverless.protocol.IProxyInfo} message ProxyInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProxyInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.protocolMajorVersion != null && Object.hasOwnProperty.call(message, "protocolMajorVersion"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.protocolMajorVersion);
                if (message.protocolMinorVersion != null && Object.hasOwnProperty.call(message, "protocolMinorVersion"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.protocolMinorVersion);
                if (message.proxyName != null && Object.hasOwnProperty.call(message, "proxyName"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.proxyName);
                if (message.proxyVersion != null && Object.hasOwnProperty.call(message, "proxyVersion"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.proxyVersion);
                if (message.supportedEntityTypes != null && message.supportedEntityTypes.length)
                    for (var i = 0; i < message.supportedEntityTypes.length; ++i)
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.supportedEntityTypes[i]);
                return writer;
            };

            /**
             * Encodes the specified ProxyInfo message, length delimited. Does not implicitly {@link akkaserverless.protocol.ProxyInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof akkaserverless.protocol.ProxyInfo
             * @static
             * @param {akkaserverless.protocol.IProxyInfo} message ProxyInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProxyInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ProxyInfo message from the specified reader or buffer.
             * @function decode
             * @memberof akkaserverless.protocol.ProxyInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {akkaserverless.protocol.ProxyInfo} ProxyInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProxyInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.protocol.ProxyInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.protocolMajorVersion = reader.int32();
                        break;
                    case 2:
                        message.protocolMinorVersion = reader.int32();
                        break;
                    case 3:
                        message.proxyName = reader.string();
                        break;
                    case 4:
                        message.proxyVersion = reader.string();
                        break;
                    case 5:
                        if (!(message.supportedEntityTypes && message.supportedEntityTypes.length))
                            message.supportedEntityTypes = [];
                        message.supportedEntityTypes.push(reader.string());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ProxyInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof akkaserverless.protocol.ProxyInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {akkaserverless.protocol.ProxyInfo} ProxyInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProxyInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ProxyInfo message.
             * @function verify
             * @memberof akkaserverless.protocol.ProxyInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ProxyInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.protocolMajorVersion != null && message.hasOwnProperty("protocolMajorVersion"))
                    if (!$util.isInteger(message.protocolMajorVersion))
                        return "protocolMajorVersion: integer expected";
                if (message.protocolMinorVersion != null && message.hasOwnProperty("protocolMinorVersion"))
                    if (!$util.isInteger(message.protocolMinorVersion))
                        return "protocolMinorVersion: integer expected";
                if (message.proxyName != null && message.hasOwnProperty("proxyName"))
                    if (!$util.isString(message.proxyName))
                        return "proxyName: string expected";
                if (message.proxyVersion != null && message.hasOwnProperty("proxyVersion"))
                    if (!$util.isString(message.proxyVersion))
                        return "proxyVersion: string expected";
                if (message.supportedEntityTypes != null && message.hasOwnProperty("supportedEntityTypes")) {
                    if (!Array.isArray(message.supportedEntityTypes))
                        return "supportedEntityTypes: array expected";
                    for (var i = 0; i < message.supportedEntityTypes.length; ++i)
                        if (!$util.isString(message.supportedEntityTypes[i]))
                            return "supportedEntityTypes: string[] expected";
                }
                return null;
            };

            /**
             * Creates a ProxyInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof akkaserverless.protocol.ProxyInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {akkaserverless.protocol.ProxyInfo} ProxyInfo
             */
            ProxyInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.akkaserverless.protocol.ProxyInfo)
                    return object;
                var message = new $root.akkaserverless.protocol.ProxyInfo();
                if (object.protocolMajorVersion != null)
                    message.protocolMajorVersion = object.protocolMajorVersion | 0;
                if (object.protocolMinorVersion != null)
                    message.protocolMinorVersion = object.protocolMinorVersion | 0;
                if (object.proxyName != null)
                    message.proxyName = String(object.proxyName);
                if (object.proxyVersion != null)
                    message.proxyVersion = String(object.proxyVersion);
                if (object.supportedEntityTypes) {
                    if (!Array.isArray(object.supportedEntityTypes))
                        throw TypeError(".akkaserverless.protocol.ProxyInfo.supportedEntityTypes: array expected");
                    message.supportedEntityTypes = [];
                    for (var i = 0; i < object.supportedEntityTypes.length; ++i)
                        message.supportedEntityTypes[i] = String(object.supportedEntityTypes[i]);
                }
                return message;
            };

            /**
             * Creates a plain object from a ProxyInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof akkaserverless.protocol.ProxyInfo
             * @static
             * @param {akkaserverless.protocol.ProxyInfo} message ProxyInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ProxyInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.supportedEntityTypes = [];
                if (options.defaults) {
                    object.protocolMajorVersion = 0;
                    object.protocolMinorVersion = 0;
                    object.proxyName = "";
                    object.proxyVersion = "";
                }
                if (message.protocolMajorVersion != null && message.hasOwnProperty("protocolMajorVersion"))
                    object.protocolMajorVersion = message.protocolMajorVersion;
                if (message.protocolMinorVersion != null && message.hasOwnProperty("protocolMinorVersion"))
                    object.protocolMinorVersion = message.protocolMinorVersion;
                if (message.proxyName != null && message.hasOwnProperty("proxyName"))
                    object.proxyName = message.proxyName;
                if (message.proxyVersion != null && message.hasOwnProperty("proxyVersion"))
                    object.proxyVersion = message.proxyVersion;
                if (message.supportedEntityTypes && message.supportedEntityTypes.length) {
                    object.supportedEntityTypes = [];
                    for (var j = 0; j < message.supportedEntityTypes.length; ++j)
                        object.supportedEntityTypes[j] = message.supportedEntityTypes[j];
                }
                return object;
            };

            /**
             * Converts this ProxyInfo to JSON.
             * @function toJSON
             * @memberof akkaserverless.protocol.ProxyInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ProxyInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ProxyInfo;
        })();

        protocol.Discovery = (function() {

            /**
             * Constructs a new Discovery service.
             * @memberof akkaserverless.protocol
             * @classdesc Represents a Discovery
             * @extends $protobuf.rpc.Service
             * @constructor
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             */
            function Discovery(rpcImpl, requestDelimited, responseDelimited) {
                $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
            }

            (Discovery.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Discovery;

            /**
             * Creates new Discovery service using the specified rpc implementation.
             * @function create
             * @memberof akkaserverless.protocol.Discovery
             * @static
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             * @returns {Discovery} RPC service. Useful where requests and/or responses are streamed.
             */
            Discovery.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                return new this(rpcImpl, requestDelimited, responseDelimited);
            };

            /**
             * Callback as used by {@link akkaserverless.protocol.Discovery#discover}.
             * @memberof akkaserverless.protocol.Discovery
             * @typedef DiscoverCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {akkaserverless.protocol.Spec} [response] Spec
             */

            /**
             * Calls Discover.
             * @function discover
             * @memberof akkaserverless.protocol.Discovery
             * @instance
             * @param {akkaserverless.protocol.IProxyInfo} request ProxyInfo message or plain object
             * @param {akkaserverless.protocol.Discovery.DiscoverCallback} callback Node-style callback called with the error, if any, and Spec
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Discovery.prototype.discover = function discover(request, callback) {
                return this.rpcCall(discover, $root.akkaserverless.protocol.ProxyInfo, $root.akkaserverless.protocol.Spec, request, callback);
            }, "name", { value: "Discover" });

            /**
             * Calls Discover.
             * @function discover
             * @memberof akkaserverless.protocol.Discovery
             * @instance
             * @param {akkaserverless.protocol.IProxyInfo} request ProxyInfo message or plain object
             * @returns {Promise<akkaserverless.protocol.Spec>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link akkaserverless.protocol.Discovery#reportError}.
             * @memberof akkaserverless.protocol.Discovery
             * @typedef ReportErrorCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {google.protobuf.Empty} [response] Empty
             */

            /**
             * Calls ReportError.
             * @function reportError
             * @memberof akkaserverless.protocol.Discovery
             * @instance
             * @param {akkaserverless.protocol.IUserFunctionError} request UserFunctionError message or plain object
             * @param {akkaserverless.protocol.Discovery.ReportErrorCallback} callback Node-style callback called with the error, if any, and Empty
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Discovery.prototype.reportError = function reportError(request, callback) {
                return this.rpcCall(reportError, $root.akkaserverless.protocol.UserFunctionError, $root.google.protobuf.Empty, request, callback);
            }, "name", { value: "ReportError" });

            /**
             * Calls ReportError.
             * @function reportError
             * @memberof akkaserverless.protocol.Discovery
             * @instance
             * @param {akkaserverless.protocol.IUserFunctionError} request UserFunctionError message or plain object
             * @returns {Promise<google.protobuf.Empty>} Promise
             * @variation 2
             */

            return Discovery;
        })();

        return protocol;
    })();

    akkaserverless.component = (function() {

        /**
         * Namespace component.
         * @memberof akkaserverless
         * @namespace
         */
        var component = {};

        component.Metadata = (function() {

            /**
             * Properties of a Metadata.
             * @memberof akkaserverless.component
             * @interface IMetadata
             * @property {Array.<akkaserverless.component.IMetadataEntry>|null} [entries] Metadata entries
             */

            /**
             * Constructs a new Metadata.
             * @memberof akkaserverless.component
             * @classdesc Represents a Metadata.
             * @implements IMetadata
             * @constructor
             * @param {akkaserverless.component.IMetadata=} [properties] Properties to set
             */
            function Metadata(properties) {
                this.entries = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Metadata entries.
             * @member {Array.<akkaserverless.component.IMetadataEntry>} entries
             * @memberof akkaserverless.component.Metadata
             * @instance
             */
            Metadata.prototype.entries = $util.emptyArray;

            /**
             * Creates a new Metadata instance using the specified properties.
             * @function create
             * @memberof akkaserverless.component.Metadata
             * @static
             * @param {akkaserverless.component.IMetadata=} [properties] Properties to set
             * @returns {akkaserverless.component.Metadata} Metadata instance
             */
            Metadata.create = function create(properties) {
                return new Metadata(properties);
            };

            /**
             * Encodes the specified Metadata message. Does not implicitly {@link akkaserverless.component.Metadata.verify|verify} messages.
             * @function encode
             * @memberof akkaserverless.component.Metadata
             * @static
             * @param {akkaserverless.component.IMetadata} message Metadata message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Metadata.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.entries != null && message.entries.length)
                    for (var i = 0; i < message.entries.length; ++i)
                        $root.akkaserverless.component.MetadataEntry.encode(message.entries[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Metadata message, length delimited. Does not implicitly {@link akkaserverless.component.Metadata.verify|verify} messages.
             * @function encodeDelimited
             * @memberof akkaserverless.component.Metadata
             * @static
             * @param {akkaserverless.component.IMetadata} message Metadata message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Metadata.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Metadata message from the specified reader or buffer.
             * @function decode
             * @memberof akkaserverless.component.Metadata
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {akkaserverless.component.Metadata} Metadata
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Metadata.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.Metadata();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.entries && message.entries.length))
                            message.entries = [];
                        message.entries.push($root.akkaserverless.component.MetadataEntry.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Metadata message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof akkaserverless.component.Metadata
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {akkaserverless.component.Metadata} Metadata
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Metadata.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Metadata message.
             * @function verify
             * @memberof akkaserverless.component.Metadata
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Metadata.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.entries != null && message.hasOwnProperty("entries")) {
                    if (!Array.isArray(message.entries))
                        return "entries: array expected";
                    for (var i = 0; i < message.entries.length; ++i) {
                        var error = $root.akkaserverless.component.MetadataEntry.verify(message.entries[i]);
                        if (error)
                            return "entries." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a Metadata message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof akkaserverless.component.Metadata
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {akkaserverless.component.Metadata} Metadata
             */
            Metadata.fromObject = function fromObject(object) {
                if (object instanceof $root.akkaserverless.component.Metadata)
                    return object;
                var message = new $root.akkaserverless.component.Metadata();
                if (object.entries) {
                    if (!Array.isArray(object.entries))
                        throw TypeError(".akkaserverless.component.Metadata.entries: array expected");
                    message.entries = [];
                    for (var i = 0; i < object.entries.length; ++i) {
                        if (typeof object.entries[i] !== "object")
                            throw TypeError(".akkaserverless.component.Metadata.entries: object expected");
                        message.entries[i] = $root.akkaserverless.component.MetadataEntry.fromObject(object.entries[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a Metadata message. Also converts values to other types if specified.
             * @function toObject
             * @memberof akkaserverless.component.Metadata
             * @static
             * @param {akkaserverless.component.Metadata} message Metadata
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Metadata.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.entries = [];
                if (message.entries && message.entries.length) {
                    object.entries = [];
                    for (var j = 0; j < message.entries.length; ++j)
                        object.entries[j] = $root.akkaserverless.component.MetadataEntry.toObject(message.entries[j], options);
                }
                return object;
            };

            /**
             * Converts this Metadata to JSON.
             * @function toJSON
             * @memberof akkaserverless.component.Metadata
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Metadata.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Metadata;
        })();

        component.MetadataEntry = (function() {

            /**
             * Properties of a MetadataEntry.
             * @memberof akkaserverless.component
             * @interface IMetadataEntry
             * @property {string|null} [key] MetadataEntry key
             * @property {string|null} [stringValue] MetadataEntry stringValue
             * @property {Uint8Array|null} [bytesValue] MetadataEntry bytesValue
             */

            /**
             * Constructs a new MetadataEntry.
             * @memberof akkaserverless.component
             * @classdesc Represents a MetadataEntry.
             * @implements IMetadataEntry
             * @constructor
             * @param {akkaserverless.component.IMetadataEntry=} [properties] Properties to set
             */
            function MetadataEntry(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MetadataEntry key.
             * @member {string} key
             * @memberof akkaserverless.component.MetadataEntry
             * @instance
             */
            MetadataEntry.prototype.key = "";

            /**
             * MetadataEntry stringValue.
             * @member {string} stringValue
             * @memberof akkaserverless.component.MetadataEntry
             * @instance
             */
            MetadataEntry.prototype.stringValue = "";

            /**
             * MetadataEntry bytesValue.
             * @member {Uint8Array} bytesValue
             * @memberof akkaserverless.component.MetadataEntry
             * @instance
             */
            MetadataEntry.prototype.bytesValue = $util.newBuffer([]);

            // OneOf field names bound to virtual getters and setters
            var $oneOfFields;

            /**
             * MetadataEntry value.
             * @member {"stringValue"|"bytesValue"|undefined} value
             * @memberof akkaserverless.component.MetadataEntry
             * @instance
             */
            Object.defineProperty(MetadataEntry.prototype, "value", {
                get: $util.oneOfGetter($oneOfFields = ["stringValue", "bytesValue"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new MetadataEntry instance using the specified properties.
             * @function create
             * @memberof akkaserverless.component.MetadataEntry
             * @static
             * @param {akkaserverless.component.IMetadataEntry=} [properties] Properties to set
             * @returns {akkaserverless.component.MetadataEntry} MetadataEntry instance
             */
            MetadataEntry.create = function create(properties) {
                return new MetadataEntry(properties);
            };

            /**
             * Encodes the specified MetadataEntry message. Does not implicitly {@link akkaserverless.component.MetadataEntry.verify|verify} messages.
             * @function encode
             * @memberof akkaserverless.component.MetadataEntry
             * @static
             * @param {akkaserverless.component.IMetadataEntry} message MetadataEntry message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MetadataEntry.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);
                if (message.stringValue != null && Object.hasOwnProperty.call(message, "stringValue"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.stringValue);
                if (message.bytesValue != null && Object.hasOwnProperty.call(message, "bytesValue"))
                    writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.bytesValue);
                return writer;
            };

            /**
             * Encodes the specified MetadataEntry message, length delimited. Does not implicitly {@link akkaserverless.component.MetadataEntry.verify|verify} messages.
             * @function encodeDelimited
             * @memberof akkaserverless.component.MetadataEntry
             * @static
             * @param {akkaserverless.component.IMetadataEntry} message MetadataEntry message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MetadataEntry.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MetadataEntry message from the specified reader or buffer.
             * @function decode
             * @memberof akkaserverless.component.MetadataEntry
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {akkaserverless.component.MetadataEntry} MetadataEntry
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MetadataEntry.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.MetadataEntry();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.key = reader.string();
                        break;
                    case 2:
                        message.stringValue = reader.string();
                        break;
                    case 3:
                        message.bytesValue = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MetadataEntry message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof akkaserverless.component.MetadataEntry
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {akkaserverless.component.MetadataEntry} MetadataEntry
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MetadataEntry.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MetadataEntry message.
             * @function verify
             * @memberof akkaserverless.component.MetadataEntry
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MetadataEntry.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.key != null && message.hasOwnProperty("key"))
                    if (!$util.isString(message.key))
                        return "key: string expected";
                if (message.stringValue != null && message.hasOwnProperty("stringValue")) {
                    properties.value = 1;
                    if (!$util.isString(message.stringValue))
                        return "stringValue: string expected";
                }
                if (message.bytesValue != null && message.hasOwnProperty("bytesValue")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    if (!(message.bytesValue && typeof message.bytesValue.length === "number" || $util.isString(message.bytesValue)))
                        return "bytesValue: buffer expected";
                }
                return null;
            };

            /**
             * Creates a MetadataEntry message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof akkaserverless.component.MetadataEntry
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {akkaserverless.component.MetadataEntry} MetadataEntry
             */
            MetadataEntry.fromObject = function fromObject(object) {
                if (object instanceof $root.akkaserverless.component.MetadataEntry)
                    return object;
                var message = new $root.akkaserverless.component.MetadataEntry();
                if (object.key != null)
                    message.key = String(object.key);
                if (object.stringValue != null)
                    message.stringValue = String(object.stringValue);
                if (object.bytesValue != null)
                    if (typeof object.bytesValue === "string")
                        $util.base64.decode(object.bytesValue, message.bytesValue = $util.newBuffer($util.base64.length(object.bytesValue)), 0);
                    else if (object.bytesValue.length)
                        message.bytesValue = object.bytesValue;
                return message;
            };

            /**
             * Creates a plain object from a MetadataEntry message. Also converts values to other types if specified.
             * @function toObject
             * @memberof akkaserverless.component.MetadataEntry
             * @static
             * @param {akkaserverless.component.MetadataEntry} message MetadataEntry
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MetadataEntry.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.key = "";
                if (message.key != null && message.hasOwnProperty("key"))
                    object.key = message.key;
                if (message.stringValue != null && message.hasOwnProperty("stringValue")) {
                    object.stringValue = message.stringValue;
                    if (options.oneofs)
                        object.value = "stringValue";
                }
                if (message.bytesValue != null && message.hasOwnProperty("bytesValue")) {
                    object.bytesValue = options.bytes === String ? $util.base64.encode(message.bytesValue, 0, message.bytesValue.length) : options.bytes === Array ? Array.prototype.slice.call(message.bytesValue) : message.bytesValue;
                    if (options.oneofs)
                        object.value = "bytesValue";
                }
                return object;
            };

            /**
             * Converts this MetadataEntry to JSON.
             * @function toJSON
             * @memberof akkaserverless.component.MetadataEntry
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MetadataEntry.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MetadataEntry;
        })();

        component.Reply = (function() {

            /**
             * Properties of a Reply.
             * @memberof akkaserverless.component
             * @interface IReply
             * @property {google.protobuf.IAny|null} [payload] Reply payload
             * @property {akkaserverless.component.IMetadata|null} [metadata] Reply metadata
             */

            /**
             * Constructs a new Reply.
             * @memberof akkaserverless.component
             * @classdesc Represents a Reply.
             * @implements IReply
             * @constructor
             * @param {akkaserverless.component.IReply=} [properties] Properties to set
             */
            function Reply(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Reply payload.
             * @member {google.protobuf.IAny|null|undefined} payload
             * @memberof akkaserverless.component.Reply
             * @instance
             */
            Reply.prototype.payload = null;

            /**
             * Reply metadata.
             * @member {akkaserverless.component.IMetadata|null|undefined} metadata
             * @memberof akkaserverless.component.Reply
             * @instance
             */
            Reply.prototype.metadata = null;

            /**
             * Creates a new Reply instance using the specified properties.
             * @function create
             * @memberof akkaserverless.component.Reply
             * @static
             * @param {akkaserverless.component.IReply=} [properties] Properties to set
             * @returns {akkaserverless.component.Reply} Reply instance
             */
            Reply.create = function create(properties) {
                return new Reply(properties);
            };

            /**
             * Encodes the specified Reply message. Does not implicitly {@link akkaserverless.component.Reply.verify|verify} messages.
             * @function encode
             * @memberof akkaserverless.component.Reply
             * @static
             * @param {akkaserverless.component.IReply} message Reply message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Reply.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.payload != null && Object.hasOwnProperty.call(message, "payload"))
                    $root.google.protobuf.Any.encode(message.payload, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                    $root.akkaserverless.component.Metadata.encode(message.metadata, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Reply message, length delimited. Does not implicitly {@link akkaserverless.component.Reply.verify|verify} messages.
             * @function encodeDelimited
             * @memberof akkaserverless.component.Reply
             * @static
             * @param {akkaserverless.component.IReply} message Reply message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Reply.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Reply message from the specified reader or buffer.
             * @function decode
             * @memberof akkaserverless.component.Reply
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {akkaserverless.component.Reply} Reply
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Reply.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.Reply();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.payload = $root.google.protobuf.Any.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.metadata = $root.akkaserverless.component.Metadata.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Reply message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof akkaserverless.component.Reply
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {akkaserverless.component.Reply} Reply
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Reply.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Reply message.
             * @function verify
             * @memberof akkaserverless.component.Reply
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Reply.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.payload != null && message.hasOwnProperty("payload")) {
                    var error = $root.google.protobuf.Any.verify(message.payload);
                    if (error)
                        return "payload." + error;
                }
                if (message.metadata != null && message.hasOwnProperty("metadata")) {
                    var error = $root.akkaserverless.component.Metadata.verify(message.metadata);
                    if (error)
                        return "metadata." + error;
                }
                return null;
            };

            /**
             * Creates a Reply message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof akkaserverless.component.Reply
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {akkaserverless.component.Reply} Reply
             */
            Reply.fromObject = function fromObject(object) {
                if (object instanceof $root.akkaserverless.component.Reply)
                    return object;
                var message = new $root.akkaserverless.component.Reply();
                if (object.payload != null) {
                    if (typeof object.payload !== "object")
                        throw TypeError(".akkaserverless.component.Reply.payload: object expected");
                    message.payload = $root.google.protobuf.Any.fromObject(object.payload);
                }
                if (object.metadata != null) {
                    if (typeof object.metadata !== "object")
                        throw TypeError(".akkaserverless.component.Reply.metadata: object expected");
                    message.metadata = $root.akkaserverless.component.Metadata.fromObject(object.metadata);
                }
                return message;
            };

            /**
             * Creates a plain object from a Reply message. Also converts values to other types if specified.
             * @function toObject
             * @memberof akkaserverless.component.Reply
             * @static
             * @param {akkaserverless.component.Reply} message Reply
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Reply.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.payload = null;
                    object.metadata = null;
                }
                if (message.payload != null && message.hasOwnProperty("payload"))
                    object.payload = $root.google.protobuf.Any.toObject(message.payload, options);
                if (message.metadata != null && message.hasOwnProperty("metadata"))
                    object.metadata = $root.akkaserverless.component.Metadata.toObject(message.metadata, options);
                return object;
            };

            /**
             * Converts this Reply to JSON.
             * @function toJSON
             * @memberof akkaserverless.component.Reply
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Reply.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Reply;
        })();

        component.Forward = (function() {

            /**
             * Properties of a Forward.
             * @memberof akkaserverless.component
             * @interface IForward
             * @property {string|null} [serviceName] Forward serviceName
             * @property {string|null} [commandName] Forward commandName
             * @property {google.protobuf.IAny|null} [payload] Forward payload
             * @property {akkaserverless.component.IMetadata|null} [metadata] Forward metadata
             */

            /**
             * Constructs a new Forward.
             * @memberof akkaserverless.component
             * @classdesc Represents a Forward.
             * @implements IForward
             * @constructor
             * @param {akkaserverless.component.IForward=} [properties] Properties to set
             */
            function Forward(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Forward serviceName.
             * @member {string} serviceName
             * @memberof akkaserverless.component.Forward
             * @instance
             */
            Forward.prototype.serviceName = "";

            /**
             * Forward commandName.
             * @member {string} commandName
             * @memberof akkaserverless.component.Forward
             * @instance
             */
            Forward.prototype.commandName = "";

            /**
             * Forward payload.
             * @member {google.protobuf.IAny|null|undefined} payload
             * @memberof akkaserverless.component.Forward
             * @instance
             */
            Forward.prototype.payload = null;

            /**
             * Forward metadata.
             * @member {akkaserverless.component.IMetadata|null|undefined} metadata
             * @memberof akkaserverless.component.Forward
             * @instance
             */
            Forward.prototype.metadata = null;

            /**
             * Creates a new Forward instance using the specified properties.
             * @function create
             * @memberof akkaserverless.component.Forward
             * @static
             * @param {akkaserverless.component.IForward=} [properties] Properties to set
             * @returns {akkaserverless.component.Forward} Forward instance
             */
            Forward.create = function create(properties) {
                return new Forward(properties);
            };

            /**
             * Encodes the specified Forward message. Does not implicitly {@link akkaserverless.component.Forward.verify|verify} messages.
             * @function encode
             * @memberof akkaserverless.component.Forward
             * @static
             * @param {akkaserverless.component.IForward} message Forward message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Forward.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.serviceName != null && Object.hasOwnProperty.call(message, "serviceName"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.serviceName);
                if (message.commandName != null && Object.hasOwnProperty.call(message, "commandName"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.commandName);
                if (message.payload != null && Object.hasOwnProperty.call(message, "payload"))
                    $root.google.protobuf.Any.encode(message.payload, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                    $root.akkaserverless.component.Metadata.encode(message.metadata, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Forward message, length delimited. Does not implicitly {@link akkaserverless.component.Forward.verify|verify} messages.
             * @function encodeDelimited
             * @memberof akkaserverless.component.Forward
             * @static
             * @param {akkaserverless.component.IForward} message Forward message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Forward.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Forward message from the specified reader or buffer.
             * @function decode
             * @memberof akkaserverless.component.Forward
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {akkaserverless.component.Forward} Forward
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Forward.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.Forward();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.serviceName = reader.string();
                        break;
                    case 2:
                        message.commandName = reader.string();
                        break;
                    case 3:
                        message.payload = $root.google.protobuf.Any.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.metadata = $root.akkaserverless.component.Metadata.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Forward message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof akkaserverless.component.Forward
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {akkaserverless.component.Forward} Forward
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Forward.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Forward message.
             * @function verify
             * @memberof akkaserverless.component.Forward
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Forward.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                    if (!$util.isString(message.serviceName))
                        return "serviceName: string expected";
                if (message.commandName != null && message.hasOwnProperty("commandName"))
                    if (!$util.isString(message.commandName))
                        return "commandName: string expected";
                if (message.payload != null && message.hasOwnProperty("payload")) {
                    var error = $root.google.protobuf.Any.verify(message.payload);
                    if (error)
                        return "payload." + error;
                }
                if (message.metadata != null && message.hasOwnProperty("metadata")) {
                    var error = $root.akkaserverless.component.Metadata.verify(message.metadata);
                    if (error)
                        return "metadata." + error;
                }
                return null;
            };

            /**
             * Creates a Forward message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof akkaserverless.component.Forward
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {akkaserverless.component.Forward} Forward
             */
            Forward.fromObject = function fromObject(object) {
                if (object instanceof $root.akkaserverless.component.Forward)
                    return object;
                var message = new $root.akkaserverless.component.Forward();
                if (object.serviceName != null)
                    message.serviceName = String(object.serviceName);
                if (object.commandName != null)
                    message.commandName = String(object.commandName);
                if (object.payload != null) {
                    if (typeof object.payload !== "object")
                        throw TypeError(".akkaserverless.component.Forward.payload: object expected");
                    message.payload = $root.google.protobuf.Any.fromObject(object.payload);
                }
                if (object.metadata != null) {
                    if (typeof object.metadata !== "object")
                        throw TypeError(".akkaserverless.component.Forward.metadata: object expected");
                    message.metadata = $root.akkaserverless.component.Metadata.fromObject(object.metadata);
                }
                return message;
            };

            /**
             * Creates a plain object from a Forward message. Also converts values to other types if specified.
             * @function toObject
             * @memberof akkaserverless.component.Forward
             * @static
             * @param {akkaserverless.component.Forward} message Forward
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Forward.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.serviceName = "";
                    object.commandName = "";
                    object.payload = null;
                    object.metadata = null;
                }
                if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                    object.serviceName = message.serviceName;
                if (message.commandName != null && message.hasOwnProperty("commandName"))
                    object.commandName = message.commandName;
                if (message.payload != null && message.hasOwnProperty("payload"))
                    object.payload = $root.google.protobuf.Any.toObject(message.payload, options);
                if (message.metadata != null && message.hasOwnProperty("metadata"))
                    object.metadata = $root.akkaserverless.component.Metadata.toObject(message.metadata, options);
                return object;
            };

            /**
             * Converts this Forward to JSON.
             * @function toJSON
             * @memberof akkaserverless.component.Forward
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Forward.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Forward;
        })();

        component.ClientAction = (function() {

            /**
             * Properties of a ClientAction.
             * @memberof akkaserverless.component
             * @interface IClientAction
             * @property {akkaserverless.component.IReply|null} [reply] ClientAction reply
             * @property {akkaserverless.component.IForward|null} [forward] ClientAction forward
             * @property {akkaserverless.component.IFailure|null} [failure] ClientAction failure
             */

            /**
             * Constructs a new ClientAction.
             * @memberof akkaserverless.component
             * @classdesc Represents a ClientAction.
             * @implements IClientAction
             * @constructor
             * @param {akkaserverless.component.IClientAction=} [properties] Properties to set
             */
            function ClientAction(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ClientAction reply.
             * @member {akkaserverless.component.IReply|null|undefined} reply
             * @memberof akkaserverless.component.ClientAction
             * @instance
             */
            ClientAction.prototype.reply = null;

            /**
             * ClientAction forward.
             * @member {akkaserverless.component.IForward|null|undefined} forward
             * @memberof akkaserverless.component.ClientAction
             * @instance
             */
            ClientAction.prototype.forward = null;

            /**
             * ClientAction failure.
             * @member {akkaserverless.component.IFailure|null|undefined} failure
             * @memberof akkaserverless.component.ClientAction
             * @instance
             */
            ClientAction.prototype.failure = null;

            // OneOf field names bound to virtual getters and setters
            var $oneOfFields;

            /**
             * ClientAction action.
             * @member {"reply"|"forward"|"failure"|undefined} action
             * @memberof akkaserverless.component.ClientAction
             * @instance
             */
            Object.defineProperty(ClientAction.prototype, "action", {
                get: $util.oneOfGetter($oneOfFields = ["reply", "forward", "failure"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new ClientAction instance using the specified properties.
             * @function create
             * @memberof akkaserverless.component.ClientAction
             * @static
             * @param {akkaserverless.component.IClientAction=} [properties] Properties to set
             * @returns {akkaserverless.component.ClientAction} ClientAction instance
             */
            ClientAction.create = function create(properties) {
                return new ClientAction(properties);
            };

            /**
             * Encodes the specified ClientAction message. Does not implicitly {@link akkaserverless.component.ClientAction.verify|verify} messages.
             * @function encode
             * @memberof akkaserverless.component.ClientAction
             * @static
             * @param {akkaserverless.component.IClientAction} message ClientAction message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ClientAction.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.reply != null && Object.hasOwnProperty.call(message, "reply"))
                    $root.akkaserverless.component.Reply.encode(message.reply, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.forward != null && Object.hasOwnProperty.call(message, "forward"))
                    $root.akkaserverless.component.Forward.encode(message.forward, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.failure != null && Object.hasOwnProperty.call(message, "failure"))
                    $root.akkaserverless.component.Failure.encode(message.failure, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ClientAction message, length delimited. Does not implicitly {@link akkaserverless.component.ClientAction.verify|verify} messages.
             * @function encodeDelimited
             * @memberof akkaserverless.component.ClientAction
             * @static
             * @param {akkaserverless.component.IClientAction} message ClientAction message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ClientAction.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ClientAction message from the specified reader or buffer.
             * @function decode
             * @memberof akkaserverless.component.ClientAction
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {akkaserverless.component.ClientAction} ClientAction
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ClientAction.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.ClientAction();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.reply = $root.akkaserverless.component.Reply.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.forward = $root.akkaserverless.component.Forward.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.failure = $root.akkaserverless.component.Failure.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ClientAction message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof akkaserverless.component.ClientAction
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {akkaserverless.component.ClientAction} ClientAction
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ClientAction.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ClientAction message.
             * @function verify
             * @memberof akkaserverless.component.ClientAction
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ClientAction.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.reply != null && message.hasOwnProperty("reply")) {
                    properties.action = 1;
                    {
                        var error = $root.akkaserverless.component.Reply.verify(message.reply);
                        if (error)
                            return "reply." + error;
                    }
                }
                if (message.forward != null && message.hasOwnProperty("forward")) {
                    if (properties.action === 1)
                        return "action: multiple values";
                    properties.action = 1;
                    {
                        var error = $root.akkaserverless.component.Forward.verify(message.forward);
                        if (error)
                            return "forward." + error;
                    }
                }
                if (message.failure != null && message.hasOwnProperty("failure")) {
                    if (properties.action === 1)
                        return "action: multiple values";
                    properties.action = 1;
                    {
                        var error = $root.akkaserverless.component.Failure.verify(message.failure);
                        if (error)
                            return "failure." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a ClientAction message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof akkaserverless.component.ClientAction
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {akkaserverless.component.ClientAction} ClientAction
             */
            ClientAction.fromObject = function fromObject(object) {
                if (object instanceof $root.akkaserverless.component.ClientAction)
                    return object;
                var message = new $root.akkaserverless.component.ClientAction();
                if (object.reply != null) {
                    if (typeof object.reply !== "object")
                        throw TypeError(".akkaserverless.component.ClientAction.reply: object expected");
                    message.reply = $root.akkaserverless.component.Reply.fromObject(object.reply);
                }
                if (object.forward != null) {
                    if (typeof object.forward !== "object")
                        throw TypeError(".akkaserverless.component.ClientAction.forward: object expected");
                    message.forward = $root.akkaserverless.component.Forward.fromObject(object.forward);
                }
                if (object.failure != null) {
                    if (typeof object.failure !== "object")
                        throw TypeError(".akkaserverless.component.ClientAction.failure: object expected");
                    message.failure = $root.akkaserverless.component.Failure.fromObject(object.failure);
                }
                return message;
            };

            /**
             * Creates a plain object from a ClientAction message. Also converts values to other types if specified.
             * @function toObject
             * @memberof akkaserverless.component.ClientAction
             * @static
             * @param {akkaserverless.component.ClientAction} message ClientAction
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ClientAction.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (message.reply != null && message.hasOwnProperty("reply")) {
                    object.reply = $root.akkaserverless.component.Reply.toObject(message.reply, options);
                    if (options.oneofs)
                        object.action = "reply";
                }
                if (message.forward != null && message.hasOwnProperty("forward")) {
                    object.forward = $root.akkaserverless.component.Forward.toObject(message.forward, options);
                    if (options.oneofs)
                        object.action = "forward";
                }
                if (message.failure != null && message.hasOwnProperty("failure")) {
                    object.failure = $root.akkaserverless.component.Failure.toObject(message.failure, options);
                    if (options.oneofs)
                        object.action = "failure";
                }
                return object;
            };

            /**
             * Converts this ClientAction to JSON.
             * @function toJSON
             * @memberof akkaserverless.component.ClientAction
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ClientAction.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ClientAction;
        })();

        component.SideEffect = (function() {

            /**
             * Properties of a SideEffect.
             * @memberof akkaserverless.component
             * @interface ISideEffect
             * @property {string|null} [serviceName] SideEffect serviceName
             * @property {string|null} [commandName] SideEffect commandName
             * @property {google.protobuf.IAny|null} [payload] SideEffect payload
             * @property {boolean|null} [synchronous] SideEffect synchronous
             * @property {akkaserverless.component.IMetadata|null} [metadata] SideEffect metadata
             */

            /**
             * Constructs a new SideEffect.
             * @memberof akkaserverless.component
             * @classdesc Represents a SideEffect.
             * @implements ISideEffect
             * @constructor
             * @param {akkaserverless.component.ISideEffect=} [properties] Properties to set
             */
            function SideEffect(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SideEffect serviceName.
             * @member {string} serviceName
             * @memberof akkaserverless.component.SideEffect
             * @instance
             */
            SideEffect.prototype.serviceName = "";

            /**
             * SideEffect commandName.
             * @member {string} commandName
             * @memberof akkaserverless.component.SideEffect
             * @instance
             */
            SideEffect.prototype.commandName = "";

            /**
             * SideEffect payload.
             * @member {google.protobuf.IAny|null|undefined} payload
             * @memberof akkaserverless.component.SideEffect
             * @instance
             */
            SideEffect.prototype.payload = null;

            /**
             * SideEffect synchronous.
             * @member {boolean} synchronous
             * @memberof akkaserverless.component.SideEffect
             * @instance
             */
            SideEffect.prototype.synchronous = false;

            /**
             * SideEffect metadata.
             * @member {akkaserverless.component.IMetadata|null|undefined} metadata
             * @memberof akkaserverless.component.SideEffect
             * @instance
             */
            SideEffect.prototype.metadata = null;

            /**
             * Creates a new SideEffect instance using the specified properties.
             * @function create
             * @memberof akkaserverless.component.SideEffect
             * @static
             * @param {akkaserverless.component.ISideEffect=} [properties] Properties to set
             * @returns {akkaserverless.component.SideEffect} SideEffect instance
             */
            SideEffect.create = function create(properties) {
                return new SideEffect(properties);
            };

            /**
             * Encodes the specified SideEffect message. Does not implicitly {@link akkaserverless.component.SideEffect.verify|verify} messages.
             * @function encode
             * @memberof akkaserverless.component.SideEffect
             * @static
             * @param {akkaserverless.component.ISideEffect} message SideEffect message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SideEffect.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.serviceName != null && Object.hasOwnProperty.call(message, "serviceName"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.serviceName);
                if (message.commandName != null && Object.hasOwnProperty.call(message, "commandName"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.commandName);
                if (message.payload != null && Object.hasOwnProperty.call(message, "payload"))
                    $root.google.protobuf.Any.encode(message.payload, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.synchronous != null && Object.hasOwnProperty.call(message, "synchronous"))
                    writer.uint32(/* id 4, wireType 0 =*/32).bool(message.synchronous);
                if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                    $root.akkaserverless.component.Metadata.encode(message.metadata, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified SideEffect message, length delimited. Does not implicitly {@link akkaserverless.component.SideEffect.verify|verify} messages.
             * @function encodeDelimited
             * @memberof akkaserverless.component.SideEffect
             * @static
             * @param {akkaserverless.component.ISideEffect} message SideEffect message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SideEffect.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SideEffect message from the specified reader or buffer.
             * @function decode
             * @memberof akkaserverless.component.SideEffect
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {akkaserverless.component.SideEffect} SideEffect
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SideEffect.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.SideEffect();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.serviceName = reader.string();
                        break;
                    case 2:
                        message.commandName = reader.string();
                        break;
                    case 3:
                        message.payload = $root.google.protobuf.Any.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.synchronous = reader.bool();
                        break;
                    case 5:
                        message.metadata = $root.akkaserverless.component.Metadata.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SideEffect message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof akkaserverless.component.SideEffect
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {akkaserverless.component.SideEffect} SideEffect
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SideEffect.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SideEffect message.
             * @function verify
             * @memberof akkaserverless.component.SideEffect
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SideEffect.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                    if (!$util.isString(message.serviceName))
                        return "serviceName: string expected";
                if (message.commandName != null && message.hasOwnProperty("commandName"))
                    if (!$util.isString(message.commandName))
                        return "commandName: string expected";
                if (message.payload != null && message.hasOwnProperty("payload")) {
                    var error = $root.google.protobuf.Any.verify(message.payload);
                    if (error)
                        return "payload." + error;
                }
                if (message.synchronous != null && message.hasOwnProperty("synchronous"))
                    if (typeof message.synchronous !== "boolean")
                        return "synchronous: boolean expected";
                if (message.metadata != null && message.hasOwnProperty("metadata")) {
                    var error = $root.akkaserverless.component.Metadata.verify(message.metadata);
                    if (error)
                        return "metadata." + error;
                }
                return null;
            };

            /**
             * Creates a SideEffect message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof akkaserverless.component.SideEffect
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {akkaserverless.component.SideEffect} SideEffect
             */
            SideEffect.fromObject = function fromObject(object) {
                if (object instanceof $root.akkaserverless.component.SideEffect)
                    return object;
                var message = new $root.akkaserverless.component.SideEffect();
                if (object.serviceName != null)
                    message.serviceName = String(object.serviceName);
                if (object.commandName != null)
                    message.commandName = String(object.commandName);
                if (object.payload != null) {
                    if (typeof object.payload !== "object")
                        throw TypeError(".akkaserverless.component.SideEffect.payload: object expected");
                    message.payload = $root.google.protobuf.Any.fromObject(object.payload);
                }
                if (object.synchronous != null)
                    message.synchronous = Boolean(object.synchronous);
                if (object.metadata != null) {
                    if (typeof object.metadata !== "object")
                        throw TypeError(".akkaserverless.component.SideEffect.metadata: object expected");
                    message.metadata = $root.akkaserverless.component.Metadata.fromObject(object.metadata);
                }
                return message;
            };

            /**
             * Creates a plain object from a SideEffect message. Also converts values to other types if specified.
             * @function toObject
             * @memberof akkaserverless.component.SideEffect
             * @static
             * @param {akkaserverless.component.SideEffect} message SideEffect
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SideEffect.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.serviceName = "";
                    object.commandName = "";
                    object.payload = null;
                    object.synchronous = false;
                    object.metadata = null;
                }
                if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                    object.serviceName = message.serviceName;
                if (message.commandName != null && message.hasOwnProperty("commandName"))
                    object.commandName = message.commandName;
                if (message.payload != null && message.hasOwnProperty("payload"))
                    object.payload = $root.google.protobuf.Any.toObject(message.payload, options);
                if (message.synchronous != null && message.hasOwnProperty("synchronous"))
                    object.synchronous = message.synchronous;
                if (message.metadata != null && message.hasOwnProperty("metadata"))
                    object.metadata = $root.akkaserverless.component.Metadata.toObject(message.metadata, options);
                return object;
            };

            /**
             * Converts this SideEffect to JSON.
             * @function toJSON
             * @memberof akkaserverless.component.SideEffect
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SideEffect.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return SideEffect;
        })();

        component.StreamCancelled = (function() {

            /**
             * Properties of a StreamCancelled.
             * @memberof akkaserverless.component
             * @interface IStreamCancelled
             * @property {string|null} [componentId] StreamCancelled componentId
             * @property {number|Long|null} [id] StreamCancelled id
             */

            /**
             * Constructs a new StreamCancelled.
             * @memberof akkaserverless.component
             * @classdesc Represents a StreamCancelled.
             * @implements IStreamCancelled
             * @constructor
             * @param {akkaserverless.component.IStreamCancelled=} [properties] Properties to set
             */
            function StreamCancelled(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * StreamCancelled componentId.
             * @member {string} componentId
             * @memberof akkaserverless.component.StreamCancelled
             * @instance
             */
            StreamCancelled.prototype.componentId = "";

            /**
             * StreamCancelled id.
             * @member {number|Long} id
             * @memberof akkaserverless.component.StreamCancelled
             * @instance
             */
            StreamCancelled.prototype.id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new StreamCancelled instance using the specified properties.
             * @function create
             * @memberof akkaserverless.component.StreamCancelled
             * @static
             * @param {akkaserverless.component.IStreamCancelled=} [properties] Properties to set
             * @returns {akkaserverless.component.StreamCancelled} StreamCancelled instance
             */
            StreamCancelled.create = function create(properties) {
                return new StreamCancelled(properties);
            };

            /**
             * Encodes the specified StreamCancelled message. Does not implicitly {@link akkaserverless.component.StreamCancelled.verify|verify} messages.
             * @function encode
             * @memberof akkaserverless.component.StreamCancelled
             * @static
             * @param {akkaserverless.component.IStreamCancelled} message StreamCancelled message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StreamCancelled.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.componentId != null && Object.hasOwnProperty.call(message, "componentId"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.componentId);
                if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.id);
                return writer;
            };

            /**
             * Encodes the specified StreamCancelled message, length delimited. Does not implicitly {@link akkaserverless.component.StreamCancelled.verify|verify} messages.
             * @function encodeDelimited
             * @memberof akkaserverless.component.StreamCancelled
             * @static
             * @param {akkaserverless.component.IStreamCancelled} message StreamCancelled message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StreamCancelled.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a StreamCancelled message from the specified reader or buffer.
             * @function decode
             * @memberof akkaserverless.component.StreamCancelled
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {akkaserverless.component.StreamCancelled} StreamCancelled
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StreamCancelled.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.StreamCancelled();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.componentId = reader.string();
                        break;
                    case 2:
                        message.id = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a StreamCancelled message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof akkaserverless.component.StreamCancelled
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {akkaserverless.component.StreamCancelled} StreamCancelled
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StreamCancelled.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a StreamCancelled message.
             * @function verify
             * @memberof akkaserverless.component.StreamCancelled
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            StreamCancelled.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.componentId != null && message.hasOwnProperty("componentId"))
                    if (!$util.isString(message.componentId))
                        return "componentId: string expected";
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                        return "id: integer|Long expected";
                return null;
            };

            /**
             * Creates a StreamCancelled message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof akkaserverless.component.StreamCancelled
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {akkaserverless.component.StreamCancelled} StreamCancelled
             */
            StreamCancelled.fromObject = function fromObject(object) {
                if (object instanceof $root.akkaserverless.component.StreamCancelled)
                    return object;
                var message = new $root.akkaserverless.component.StreamCancelled();
                if (object.componentId != null)
                    message.componentId = String(object.componentId);
                if (object.id != null)
                    if ($util.Long)
                        (message.id = $util.Long.fromValue(object.id)).unsigned = false;
                    else if (typeof object.id === "string")
                        message.id = parseInt(object.id, 10);
                    else if (typeof object.id === "number")
                        message.id = object.id;
                    else if (typeof object.id === "object")
                        message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a StreamCancelled message. Also converts values to other types if specified.
             * @function toObject
             * @memberof akkaserverless.component.StreamCancelled
             * @static
             * @param {akkaserverless.component.StreamCancelled} message StreamCancelled
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            StreamCancelled.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.componentId = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.id = options.longs === String ? "0" : 0;
                }
                if (message.componentId != null && message.hasOwnProperty("componentId"))
                    object.componentId = message.componentId;
                if (message.id != null && message.hasOwnProperty("id"))
                    if (typeof message.id === "number")
                        object.id = options.longs === String ? String(message.id) : message.id;
                    else
                        object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber() : message.id;
                return object;
            };

            /**
             * Converts this StreamCancelled to JSON.
             * @function toJSON
             * @memberof akkaserverless.component.StreamCancelled
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            StreamCancelled.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return StreamCancelled;
        })();

        component.Failure = (function() {

            /**
             * Properties of a Failure.
             * @memberof akkaserverless.component
             * @interface IFailure
             * @property {number|Long|null} [commandId] Failure commandId
             * @property {string|null} [description] Failure description
             * @property {boolean|null} [restart] Failure restart
             */

            /**
             * Constructs a new Failure.
             * @memberof akkaserverless.component
             * @classdesc Represents a Failure.
             * @implements IFailure
             * @constructor
             * @param {akkaserverless.component.IFailure=} [properties] Properties to set
             */
            function Failure(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Failure commandId.
             * @member {number|Long} commandId
             * @memberof akkaserverless.component.Failure
             * @instance
             */
            Failure.prototype.commandId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Failure description.
             * @member {string} description
             * @memberof akkaserverless.component.Failure
             * @instance
             */
            Failure.prototype.description = "";

            /**
             * Failure restart.
             * @member {boolean} restart
             * @memberof akkaserverless.component.Failure
             * @instance
             */
            Failure.prototype.restart = false;

            /**
             * Creates a new Failure instance using the specified properties.
             * @function create
             * @memberof akkaserverless.component.Failure
             * @static
             * @param {akkaserverless.component.IFailure=} [properties] Properties to set
             * @returns {akkaserverless.component.Failure} Failure instance
             */
            Failure.create = function create(properties) {
                return new Failure(properties);
            };

            /**
             * Encodes the specified Failure message. Does not implicitly {@link akkaserverless.component.Failure.verify|verify} messages.
             * @function encode
             * @memberof akkaserverless.component.Failure
             * @static
             * @param {akkaserverless.component.IFailure} message Failure message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Failure.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.commandId != null && Object.hasOwnProperty.call(message, "commandId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.commandId);
                if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                if (message.restart != null && Object.hasOwnProperty.call(message, "restart"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.restart);
                return writer;
            };

            /**
             * Encodes the specified Failure message, length delimited. Does not implicitly {@link akkaserverless.component.Failure.verify|verify} messages.
             * @function encodeDelimited
             * @memberof akkaserverless.component.Failure
             * @static
             * @param {akkaserverless.component.IFailure} message Failure message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Failure.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Failure message from the specified reader or buffer.
             * @function decode
             * @memberof akkaserverless.component.Failure
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {akkaserverless.component.Failure} Failure
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Failure.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.Failure();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.commandId = reader.int64();
                        break;
                    case 2:
                        message.description = reader.string();
                        break;
                    case 3:
                        message.restart = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Failure message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof akkaserverless.component.Failure
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {akkaserverless.component.Failure} Failure
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Failure.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Failure message.
             * @function verify
             * @memberof akkaserverless.component.Failure
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Failure.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.commandId != null && message.hasOwnProperty("commandId"))
                    if (!$util.isInteger(message.commandId) && !(message.commandId && $util.isInteger(message.commandId.low) && $util.isInteger(message.commandId.high)))
                        return "commandId: integer|Long expected";
                if (message.description != null && message.hasOwnProperty("description"))
                    if (!$util.isString(message.description))
                        return "description: string expected";
                if (message.restart != null && message.hasOwnProperty("restart"))
                    if (typeof message.restart !== "boolean")
                        return "restart: boolean expected";
                return null;
            };

            /**
             * Creates a Failure message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof akkaserverless.component.Failure
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {akkaserverless.component.Failure} Failure
             */
            Failure.fromObject = function fromObject(object) {
                if (object instanceof $root.akkaserverless.component.Failure)
                    return object;
                var message = new $root.akkaserverless.component.Failure();
                if (object.commandId != null)
                    if ($util.Long)
                        (message.commandId = $util.Long.fromValue(object.commandId)).unsigned = false;
                    else if (typeof object.commandId === "string")
                        message.commandId = parseInt(object.commandId, 10);
                    else if (typeof object.commandId === "number")
                        message.commandId = object.commandId;
                    else if (typeof object.commandId === "object")
                        message.commandId = new $util.LongBits(object.commandId.low >>> 0, object.commandId.high >>> 0).toNumber();
                if (object.description != null)
                    message.description = String(object.description);
                if (object.restart != null)
                    message.restart = Boolean(object.restart);
                return message;
            };

            /**
             * Creates a plain object from a Failure message. Also converts values to other types if specified.
             * @function toObject
             * @memberof akkaserverless.component.Failure
             * @static
             * @param {akkaserverless.component.Failure} message Failure
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Failure.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.commandId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.commandId = options.longs === String ? "0" : 0;
                    object.description = "";
                    object.restart = false;
                }
                if (message.commandId != null && message.hasOwnProperty("commandId"))
                    if (typeof message.commandId === "number")
                        object.commandId = options.longs === String ? String(message.commandId) : message.commandId;
                    else
                        object.commandId = options.longs === String ? $util.Long.prototype.toString.call(message.commandId) : options.longs === Number ? new $util.LongBits(message.commandId.low >>> 0, message.commandId.high >>> 0).toNumber() : message.commandId;
                if (message.description != null && message.hasOwnProperty("description"))
                    object.description = message.description;
                if (message.restart != null && message.hasOwnProperty("restart"))
                    object.restart = message.restart;
                return object;
            };

            /**
             * Converts this Failure to JSON.
             * @function toJSON
             * @memberof akkaserverless.component.Failure
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Failure.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Failure;
        })();

        component.action = (function() {

            /**
             * Namespace action.
             * @memberof akkaserverless.component
             * @namespace
             */
            var action = {};

            action.ActionCommand = (function() {

                /**
                 * Properties of an ActionCommand.
                 * @memberof akkaserverless.component.action
                 * @interface IActionCommand
                 * @property {string|null} [serviceName] ActionCommand serviceName
                 * @property {string|null} [name] ActionCommand name
                 * @property {google.protobuf.IAny|null} [payload] ActionCommand payload
                 * @property {akkaserverless.component.IMetadata|null} [metadata] ActionCommand metadata
                 */

                /**
                 * Constructs a new ActionCommand.
                 * @memberof akkaserverless.component.action
                 * @classdesc Represents an ActionCommand.
                 * @implements IActionCommand
                 * @constructor
                 * @param {akkaserverless.component.action.IActionCommand=} [properties] Properties to set
                 */
                function ActionCommand(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ActionCommand serviceName.
                 * @member {string} serviceName
                 * @memberof akkaserverless.component.action.ActionCommand
                 * @instance
                 */
                ActionCommand.prototype.serviceName = "";

                /**
                 * ActionCommand name.
                 * @member {string} name
                 * @memberof akkaserverless.component.action.ActionCommand
                 * @instance
                 */
                ActionCommand.prototype.name = "";

                /**
                 * ActionCommand payload.
                 * @member {google.protobuf.IAny|null|undefined} payload
                 * @memberof akkaserverless.component.action.ActionCommand
                 * @instance
                 */
                ActionCommand.prototype.payload = null;

                /**
                 * ActionCommand metadata.
                 * @member {akkaserverless.component.IMetadata|null|undefined} metadata
                 * @memberof akkaserverless.component.action.ActionCommand
                 * @instance
                 */
                ActionCommand.prototype.metadata = null;

                /**
                 * Creates a new ActionCommand instance using the specified properties.
                 * @function create
                 * @memberof akkaserverless.component.action.ActionCommand
                 * @static
                 * @param {akkaserverless.component.action.IActionCommand=} [properties] Properties to set
                 * @returns {akkaserverless.component.action.ActionCommand} ActionCommand instance
                 */
                ActionCommand.create = function create(properties) {
                    return new ActionCommand(properties);
                };

                /**
                 * Encodes the specified ActionCommand message. Does not implicitly {@link akkaserverless.component.action.ActionCommand.verify|verify} messages.
                 * @function encode
                 * @memberof akkaserverless.component.action.ActionCommand
                 * @static
                 * @param {akkaserverless.component.action.IActionCommand} message ActionCommand message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ActionCommand.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.serviceName != null && Object.hasOwnProperty.call(message, "serviceName"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.serviceName);
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
                    if (message.payload != null && Object.hasOwnProperty.call(message, "payload"))
                        $root.google.protobuf.Any.encode(message.payload, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                        $root.akkaserverless.component.Metadata.encode(message.metadata, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified ActionCommand message, length delimited. Does not implicitly {@link akkaserverless.component.action.ActionCommand.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof akkaserverless.component.action.ActionCommand
                 * @static
                 * @param {akkaserverless.component.action.IActionCommand} message ActionCommand message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ActionCommand.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an ActionCommand message from the specified reader or buffer.
                 * @function decode
                 * @memberof akkaserverless.component.action.ActionCommand
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {akkaserverless.component.action.ActionCommand} ActionCommand
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ActionCommand.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.action.ActionCommand();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            message.serviceName = reader.string();
                            break;
                        case 3:
                            message.name = reader.string();
                            break;
                        case 4:
                            message.payload = $root.google.protobuf.Any.decode(reader, reader.uint32());
                            break;
                        case 5:
                            message.metadata = $root.akkaserverless.component.Metadata.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an ActionCommand message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof akkaserverless.component.action.ActionCommand
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {akkaserverless.component.action.ActionCommand} ActionCommand
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ActionCommand.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an ActionCommand message.
                 * @function verify
                 * @memberof akkaserverless.component.action.ActionCommand
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ActionCommand.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                        if (!$util.isString(message.serviceName))
                            return "serviceName: string expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.payload != null && message.hasOwnProperty("payload")) {
                        var error = $root.google.protobuf.Any.verify(message.payload);
                        if (error)
                            return "payload." + error;
                    }
                    if (message.metadata != null && message.hasOwnProperty("metadata")) {
                        var error = $root.akkaserverless.component.Metadata.verify(message.metadata);
                        if (error)
                            return "metadata." + error;
                    }
                    return null;
                };

                /**
                 * Creates an ActionCommand message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof akkaserverless.component.action.ActionCommand
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {akkaserverless.component.action.ActionCommand} ActionCommand
                 */
                ActionCommand.fromObject = function fromObject(object) {
                    if (object instanceof $root.akkaserverless.component.action.ActionCommand)
                        return object;
                    var message = new $root.akkaserverless.component.action.ActionCommand();
                    if (object.serviceName != null)
                        message.serviceName = String(object.serviceName);
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.payload != null) {
                        if (typeof object.payload !== "object")
                            throw TypeError(".akkaserverless.component.action.ActionCommand.payload: object expected");
                        message.payload = $root.google.protobuf.Any.fromObject(object.payload);
                    }
                    if (object.metadata != null) {
                        if (typeof object.metadata !== "object")
                            throw TypeError(".akkaserverless.component.action.ActionCommand.metadata: object expected");
                        message.metadata = $root.akkaserverless.component.Metadata.fromObject(object.metadata);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an ActionCommand message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof akkaserverless.component.action.ActionCommand
                 * @static
                 * @param {akkaserverless.component.action.ActionCommand} message ActionCommand
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ActionCommand.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.serviceName = "";
                        object.name = "";
                        object.payload = null;
                        object.metadata = null;
                    }
                    if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                        object.serviceName = message.serviceName;
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.payload != null && message.hasOwnProperty("payload"))
                        object.payload = $root.google.protobuf.Any.toObject(message.payload, options);
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        object.metadata = $root.akkaserverless.component.Metadata.toObject(message.metadata, options);
                    return object;
                };

                /**
                 * Converts this ActionCommand to JSON.
                 * @function toJSON
                 * @memberof akkaserverless.component.action.ActionCommand
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ActionCommand.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ActionCommand;
            })();

            action.ActionResponse = (function() {

                /**
                 * Properties of an ActionResponse.
                 * @memberof akkaserverless.component.action
                 * @interface IActionResponse
                 * @property {akkaserverless.component.IFailure|null} [failure] ActionResponse failure
                 * @property {akkaserverless.component.IReply|null} [reply] ActionResponse reply
                 * @property {akkaserverless.component.IForward|null} [forward] ActionResponse forward
                 * @property {Array.<akkaserverless.component.ISideEffect>|null} [sideEffects] ActionResponse sideEffects
                 */

                /**
                 * Constructs a new ActionResponse.
                 * @memberof akkaserverless.component.action
                 * @classdesc Represents an ActionResponse.
                 * @implements IActionResponse
                 * @constructor
                 * @param {akkaserverless.component.action.IActionResponse=} [properties] Properties to set
                 */
                function ActionResponse(properties) {
                    this.sideEffects = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ActionResponse failure.
                 * @member {akkaserverless.component.IFailure|null|undefined} failure
                 * @memberof akkaserverless.component.action.ActionResponse
                 * @instance
                 */
                ActionResponse.prototype.failure = null;

                /**
                 * ActionResponse reply.
                 * @member {akkaserverless.component.IReply|null|undefined} reply
                 * @memberof akkaserverless.component.action.ActionResponse
                 * @instance
                 */
                ActionResponse.prototype.reply = null;

                /**
                 * ActionResponse forward.
                 * @member {akkaserverless.component.IForward|null|undefined} forward
                 * @memberof akkaserverless.component.action.ActionResponse
                 * @instance
                 */
                ActionResponse.prototype.forward = null;

                /**
                 * ActionResponse sideEffects.
                 * @member {Array.<akkaserverless.component.ISideEffect>} sideEffects
                 * @memberof akkaserverless.component.action.ActionResponse
                 * @instance
                 */
                ActionResponse.prototype.sideEffects = $util.emptyArray;

                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;

                /**
                 * ActionResponse response.
                 * @member {"failure"|"reply"|"forward"|undefined} response
                 * @memberof akkaserverless.component.action.ActionResponse
                 * @instance
                 */
                Object.defineProperty(ActionResponse.prototype, "response", {
                    get: $util.oneOfGetter($oneOfFields = ["failure", "reply", "forward"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Creates a new ActionResponse instance using the specified properties.
                 * @function create
                 * @memberof akkaserverless.component.action.ActionResponse
                 * @static
                 * @param {akkaserverless.component.action.IActionResponse=} [properties] Properties to set
                 * @returns {akkaserverless.component.action.ActionResponse} ActionResponse instance
                 */
                ActionResponse.create = function create(properties) {
                    return new ActionResponse(properties);
                };

                /**
                 * Encodes the specified ActionResponse message. Does not implicitly {@link akkaserverless.component.action.ActionResponse.verify|verify} messages.
                 * @function encode
                 * @memberof akkaserverless.component.action.ActionResponse
                 * @static
                 * @param {akkaserverless.component.action.IActionResponse} message ActionResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ActionResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.failure != null && Object.hasOwnProperty.call(message, "failure"))
                        $root.akkaserverless.component.Failure.encode(message.failure, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.reply != null && Object.hasOwnProperty.call(message, "reply"))
                        $root.akkaserverless.component.Reply.encode(message.reply, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.forward != null && Object.hasOwnProperty.call(message, "forward"))
                        $root.akkaserverless.component.Forward.encode(message.forward, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.sideEffects != null && message.sideEffects.length)
                        for (var i = 0; i < message.sideEffects.length; ++i)
                            $root.akkaserverless.component.SideEffect.encode(message.sideEffects[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified ActionResponse message, length delimited. Does not implicitly {@link akkaserverless.component.action.ActionResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof akkaserverless.component.action.ActionResponse
                 * @static
                 * @param {akkaserverless.component.action.IActionResponse} message ActionResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ActionResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an ActionResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof akkaserverless.component.action.ActionResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {akkaserverless.component.action.ActionResponse} ActionResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ActionResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.action.ActionResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.failure = $root.akkaserverless.component.Failure.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.reply = $root.akkaserverless.component.Reply.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.forward = $root.akkaserverless.component.Forward.decode(reader, reader.uint32());
                            break;
                        case 4:
                            if (!(message.sideEffects && message.sideEffects.length))
                                message.sideEffects = [];
                            message.sideEffects.push($root.akkaserverless.component.SideEffect.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an ActionResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof akkaserverless.component.action.ActionResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {akkaserverless.component.action.ActionResponse} ActionResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ActionResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an ActionResponse message.
                 * @function verify
                 * @memberof akkaserverless.component.action.ActionResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ActionResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.failure != null && message.hasOwnProperty("failure")) {
                        properties.response = 1;
                        {
                            var error = $root.akkaserverless.component.Failure.verify(message.failure);
                            if (error)
                                return "failure." + error;
                        }
                    }
                    if (message.reply != null && message.hasOwnProperty("reply")) {
                        if (properties.response === 1)
                            return "response: multiple values";
                        properties.response = 1;
                        {
                            var error = $root.akkaserverless.component.Reply.verify(message.reply);
                            if (error)
                                return "reply." + error;
                        }
                    }
                    if (message.forward != null && message.hasOwnProperty("forward")) {
                        if (properties.response === 1)
                            return "response: multiple values";
                        properties.response = 1;
                        {
                            var error = $root.akkaserverless.component.Forward.verify(message.forward);
                            if (error)
                                return "forward." + error;
                        }
                    }
                    if (message.sideEffects != null && message.hasOwnProperty("sideEffects")) {
                        if (!Array.isArray(message.sideEffects))
                            return "sideEffects: array expected";
                        for (var i = 0; i < message.sideEffects.length; ++i) {
                            var error = $root.akkaserverless.component.SideEffect.verify(message.sideEffects[i]);
                            if (error)
                                return "sideEffects." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates an ActionResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof akkaserverless.component.action.ActionResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {akkaserverless.component.action.ActionResponse} ActionResponse
                 */
                ActionResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.akkaserverless.component.action.ActionResponse)
                        return object;
                    var message = new $root.akkaserverless.component.action.ActionResponse();
                    if (object.failure != null) {
                        if (typeof object.failure !== "object")
                            throw TypeError(".akkaserverless.component.action.ActionResponse.failure: object expected");
                        message.failure = $root.akkaserverless.component.Failure.fromObject(object.failure);
                    }
                    if (object.reply != null) {
                        if (typeof object.reply !== "object")
                            throw TypeError(".akkaserverless.component.action.ActionResponse.reply: object expected");
                        message.reply = $root.akkaserverless.component.Reply.fromObject(object.reply);
                    }
                    if (object.forward != null) {
                        if (typeof object.forward !== "object")
                            throw TypeError(".akkaserverless.component.action.ActionResponse.forward: object expected");
                        message.forward = $root.akkaserverless.component.Forward.fromObject(object.forward);
                    }
                    if (object.sideEffects) {
                        if (!Array.isArray(object.sideEffects))
                            throw TypeError(".akkaserverless.component.action.ActionResponse.sideEffects: array expected");
                        message.sideEffects = [];
                        for (var i = 0; i < object.sideEffects.length; ++i) {
                            if (typeof object.sideEffects[i] !== "object")
                                throw TypeError(".akkaserverless.component.action.ActionResponse.sideEffects: object expected");
                            message.sideEffects[i] = $root.akkaserverless.component.SideEffect.fromObject(object.sideEffects[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an ActionResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof akkaserverless.component.action.ActionResponse
                 * @static
                 * @param {akkaserverless.component.action.ActionResponse} message ActionResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ActionResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.sideEffects = [];
                    if (message.failure != null && message.hasOwnProperty("failure")) {
                        object.failure = $root.akkaserverless.component.Failure.toObject(message.failure, options);
                        if (options.oneofs)
                            object.response = "failure";
                    }
                    if (message.reply != null && message.hasOwnProperty("reply")) {
                        object.reply = $root.akkaserverless.component.Reply.toObject(message.reply, options);
                        if (options.oneofs)
                            object.response = "reply";
                    }
                    if (message.forward != null && message.hasOwnProperty("forward")) {
                        object.forward = $root.akkaserverless.component.Forward.toObject(message.forward, options);
                        if (options.oneofs)
                            object.response = "forward";
                    }
                    if (message.sideEffects && message.sideEffects.length) {
                        object.sideEffects = [];
                        for (var j = 0; j < message.sideEffects.length; ++j)
                            object.sideEffects[j] = $root.akkaserverless.component.SideEffect.toObject(message.sideEffects[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this ActionResponse to JSON.
                 * @function toJSON
                 * @memberof akkaserverless.component.action.ActionResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ActionResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ActionResponse;
            })();

            action.Actions = (function() {

                /**
                 * Constructs a new Actions service.
                 * @memberof akkaserverless.component.action
                 * @classdesc Represents an Actions
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function Actions(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (Actions.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Actions;

                /**
                 * Creates new Actions service using the specified rpc implementation.
                 * @function create
                 * @memberof akkaserverless.component.action.Actions
                 * @static
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 * @returns {Actions} RPC service. Useful where requests and/or responses are streamed.
                 */
                Actions.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                    return new this(rpcImpl, requestDelimited, responseDelimited);
                };

                /**
                 * Callback as used by {@link akkaserverless.component.action.Actions#handleUnary}.
                 * @memberof akkaserverless.component.action.Actions
                 * @typedef HandleUnaryCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {akkaserverless.component.action.ActionResponse} [response] ActionResponse
                 */

                /**
                 * Calls HandleUnary.
                 * @function handleUnary
                 * @memberof akkaserverless.component.action.Actions
                 * @instance
                 * @param {akkaserverless.component.action.IActionCommand} request ActionCommand message or plain object
                 * @param {akkaserverless.component.action.Actions.HandleUnaryCallback} callback Node-style callback called with the error, if any, and ActionResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Actions.prototype.handleUnary = function handleUnary(request, callback) {
                    return this.rpcCall(handleUnary, $root.akkaserverless.component.action.ActionCommand, $root.akkaserverless.component.action.ActionResponse, request, callback);
                }, "name", { value: "HandleUnary" });

                /**
                 * Calls HandleUnary.
                 * @function handleUnary
                 * @memberof akkaserverless.component.action.Actions
                 * @instance
                 * @param {akkaserverless.component.action.IActionCommand} request ActionCommand message or plain object
                 * @returns {Promise<akkaserverless.component.action.ActionResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link akkaserverless.component.action.Actions#handleStreamedIn}.
                 * @memberof akkaserverless.component.action.Actions
                 * @typedef HandleStreamedInCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {akkaserverless.component.action.ActionResponse} [response] ActionResponse
                 */

                /**
                 * Calls HandleStreamedIn.
                 * @function handleStreamedIn
                 * @memberof akkaserverless.component.action.Actions
                 * @instance
                 * @param {akkaserverless.component.action.IActionCommand} request ActionCommand message or plain object
                 * @param {akkaserverless.component.action.Actions.HandleStreamedInCallback} callback Node-style callback called with the error, if any, and ActionResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Actions.prototype.handleStreamedIn = function handleStreamedIn(request, callback) {
                    return this.rpcCall(handleStreamedIn, $root.akkaserverless.component.action.ActionCommand, $root.akkaserverless.component.action.ActionResponse, request, callback);
                }, "name", { value: "HandleStreamedIn" });

                /**
                 * Calls HandleStreamedIn.
                 * @function handleStreamedIn
                 * @memberof akkaserverless.component.action.Actions
                 * @instance
                 * @param {akkaserverless.component.action.IActionCommand} request ActionCommand message or plain object
                 * @returns {Promise<akkaserverless.component.action.ActionResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link akkaserverless.component.action.Actions#handleStreamedOut}.
                 * @memberof akkaserverless.component.action.Actions
                 * @typedef HandleStreamedOutCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {akkaserverless.component.action.ActionResponse} [response] ActionResponse
                 */

                /**
                 * Calls HandleStreamedOut.
                 * @function handleStreamedOut
                 * @memberof akkaserverless.component.action.Actions
                 * @instance
                 * @param {akkaserverless.component.action.IActionCommand} request ActionCommand message or plain object
                 * @param {akkaserverless.component.action.Actions.HandleStreamedOutCallback} callback Node-style callback called with the error, if any, and ActionResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Actions.prototype.handleStreamedOut = function handleStreamedOut(request, callback) {
                    return this.rpcCall(handleStreamedOut, $root.akkaserverless.component.action.ActionCommand, $root.akkaserverless.component.action.ActionResponse, request, callback);
                }, "name", { value: "HandleStreamedOut" });

                /**
                 * Calls HandleStreamedOut.
                 * @function handleStreamedOut
                 * @memberof akkaserverless.component.action.Actions
                 * @instance
                 * @param {akkaserverless.component.action.IActionCommand} request ActionCommand message or plain object
                 * @returns {Promise<akkaserverless.component.action.ActionResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link akkaserverless.component.action.Actions#handleStreamed}.
                 * @memberof akkaserverless.component.action.Actions
                 * @typedef HandleStreamedCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {akkaserverless.component.action.ActionResponse} [response] ActionResponse
                 */

                /**
                 * Calls HandleStreamed.
                 * @function handleStreamed
                 * @memberof akkaserverless.component.action.Actions
                 * @instance
                 * @param {akkaserverless.component.action.IActionCommand} request ActionCommand message or plain object
                 * @param {akkaserverless.component.action.Actions.HandleStreamedCallback} callback Node-style callback called with the error, if any, and ActionResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Actions.prototype.handleStreamed = function handleStreamed(request, callback) {
                    return this.rpcCall(handleStreamed, $root.akkaserverless.component.action.ActionCommand, $root.akkaserverless.component.action.ActionResponse, request, callback);
                }, "name", { value: "HandleStreamed" });

                /**
                 * Calls HandleStreamed.
                 * @function handleStreamed
                 * @memberof akkaserverless.component.action.Actions
                 * @instance
                 * @param {akkaserverless.component.action.IActionCommand} request ActionCommand message or plain object
                 * @returns {Promise<akkaserverless.component.action.ActionResponse>} Promise
                 * @variation 2
                 */

                return Actions;
            })();

            return action;
        })();

        component.crdt = (function() {

            /**
             * Namespace crdt.
             * @memberof akkaserverless.component
             * @namespace
             */
            var crdt = {};

            crdt.Crdt = (function() {

                /**
                 * Constructs a new Crdt service.
                 * @memberof akkaserverless.component.crdt
                 * @classdesc Represents a Crdt
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function Crdt(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (Crdt.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Crdt;

                /**
                 * Creates new Crdt service using the specified rpc implementation.
                 * @function create
                 * @memberof akkaserverless.component.crdt.Crdt
                 * @static
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 * @returns {Crdt} RPC service. Useful where requests and/or responses are streamed.
                 */
                Crdt.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                    return new this(rpcImpl, requestDelimited, responseDelimited);
                };

                /**
                 * Callback as used by {@link akkaserverless.component.crdt.Crdt#handle}.
                 * @memberof akkaserverless.component.crdt.Crdt
                 * @typedef HandleCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {akkaserverless.component.crdt.CrdtStreamOut} [response] CrdtStreamOut
                 */

                /**
                 * Calls Handle.
                 * @function handle
                 * @memberof akkaserverless.component.crdt.Crdt
                 * @instance
                 * @param {akkaserverless.component.crdt.ICrdtStreamIn} request CrdtStreamIn message or plain object
                 * @param {akkaserverless.component.crdt.Crdt.HandleCallback} callback Node-style callback called with the error, if any, and CrdtStreamOut
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Crdt.prototype.handle = function handle(request, callback) {
                    return this.rpcCall(handle, $root.akkaserverless.component.crdt.CrdtStreamIn, $root.akkaserverless.component.crdt.CrdtStreamOut, request, callback);
                }, "name", { value: "Handle" });

                /**
                 * Calls Handle.
                 * @function handle
                 * @memberof akkaserverless.component.crdt.Crdt
                 * @instance
                 * @param {akkaserverless.component.crdt.ICrdtStreamIn} request CrdtStreamIn message or plain object
                 * @returns {Promise<akkaserverless.component.crdt.CrdtStreamOut>} Promise
                 * @variation 2
                 */

                return Crdt;
            })();

            crdt.CrdtStreamIn = (function() {

                /**
                 * Properties of a CrdtStreamIn.
                 * @memberof akkaserverless.component.crdt
                 * @interface ICrdtStreamIn
                 * @property {akkaserverless.component.crdt.ICrdtInit|null} [init] CrdtStreamIn init
                 * @property {akkaserverless.component.crdt.ICrdtDelta|null} [delta] CrdtStreamIn delta
                 * @property {akkaserverless.component.crdt.ICrdtDelete|null} ["delete"] CrdtStreamIn delete
                 * @property {akkaserverless.component.entity.ICommand|null} [command] CrdtStreamIn command
                 * @property {akkaserverless.component.IStreamCancelled|null} [streamCancelled] CrdtStreamIn streamCancelled
                 */

                /**
                 * Constructs a new CrdtStreamIn.
                 * @memberof akkaserverless.component.crdt
                 * @classdesc Represents a CrdtStreamIn.
                 * @implements ICrdtStreamIn
                 * @constructor
                 * @param {akkaserverless.component.crdt.ICrdtStreamIn=} [properties] Properties to set
                 */
                function CrdtStreamIn(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CrdtStreamIn init.
                 * @member {akkaserverless.component.crdt.ICrdtInit|null|undefined} init
                 * @memberof akkaserverless.component.crdt.CrdtStreamIn
                 * @instance
                 */
                CrdtStreamIn.prototype.init = null;

                /**
                 * CrdtStreamIn delta.
                 * @member {akkaserverless.component.crdt.ICrdtDelta|null|undefined} delta
                 * @memberof akkaserverless.component.crdt.CrdtStreamIn
                 * @instance
                 */
                CrdtStreamIn.prototype.delta = null;

                /**
                 * CrdtStreamIn delete.
                 * @member {akkaserverless.component.crdt.ICrdtDelete|null|undefined} delete
                 * @memberof akkaserverless.component.crdt.CrdtStreamIn
                 * @instance
                 */
                CrdtStreamIn.prototype["delete"] = null;

                /**
                 * CrdtStreamIn command.
                 * @member {akkaserverless.component.entity.ICommand|null|undefined} command
                 * @memberof akkaserverless.component.crdt.CrdtStreamIn
                 * @instance
                 */
                CrdtStreamIn.prototype.command = null;

                /**
                 * CrdtStreamIn streamCancelled.
                 * @member {akkaserverless.component.IStreamCancelled|null|undefined} streamCancelled
                 * @memberof akkaserverless.component.crdt.CrdtStreamIn
                 * @instance
                 */
                CrdtStreamIn.prototype.streamCancelled = null;

                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;

                /**
                 * CrdtStreamIn message.
                 * @member {"init"|"delta"|"delete"|"command"|"streamCancelled"|undefined} message
                 * @memberof akkaserverless.component.crdt.CrdtStreamIn
                 * @instance
                 */
                Object.defineProperty(CrdtStreamIn.prototype, "message", {
                    get: $util.oneOfGetter($oneOfFields = ["init", "delta", "delete", "command", "streamCancelled"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Creates a new CrdtStreamIn instance using the specified properties.
                 * @function create
                 * @memberof akkaserverless.component.crdt.CrdtStreamIn
                 * @static
                 * @param {akkaserverless.component.crdt.ICrdtStreamIn=} [properties] Properties to set
                 * @returns {akkaserverless.component.crdt.CrdtStreamIn} CrdtStreamIn instance
                 */
                CrdtStreamIn.create = function create(properties) {
                    return new CrdtStreamIn(properties);
                };

                /**
                 * Encodes the specified CrdtStreamIn message. Does not implicitly {@link akkaserverless.component.crdt.CrdtStreamIn.verify|verify} messages.
                 * @function encode
                 * @memberof akkaserverless.component.crdt.CrdtStreamIn
                 * @static
                 * @param {akkaserverless.component.crdt.ICrdtStreamIn} message CrdtStreamIn message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CrdtStreamIn.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.init != null && Object.hasOwnProperty.call(message, "init"))
                        $root.akkaserverless.component.crdt.CrdtInit.encode(message.init, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.delta != null && Object.hasOwnProperty.call(message, "delta"))
                        $root.akkaserverless.component.crdt.CrdtDelta.encode(message.delta, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message["delete"] != null && Object.hasOwnProperty.call(message, "delete"))
                        $root.akkaserverless.component.crdt.CrdtDelete.encode(message["delete"], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.command != null && Object.hasOwnProperty.call(message, "command"))
                        $root.akkaserverless.component.entity.Command.encode(message.command, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.streamCancelled != null && Object.hasOwnProperty.call(message, "streamCancelled"))
                        $root.akkaserverless.component.StreamCancelled.encode(message.streamCancelled, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified CrdtStreamIn message, length delimited. Does not implicitly {@link akkaserverless.component.crdt.CrdtStreamIn.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof akkaserverless.component.crdt.CrdtStreamIn
                 * @static
                 * @param {akkaserverless.component.crdt.ICrdtStreamIn} message CrdtStreamIn message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CrdtStreamIn.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a CrdtStreamIn message from the specified reader or buffer.
                 * @function decode
                 * @memberof akkaserverless.component.crdt.CrdtStreamIn
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {akkaserverless.component.crdt.CrdtStreamIn} CrdtStreamIn
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CrdtStreamIn.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.crdt.CrdtStreamIn();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.init = $root.akkaserverless.component.crdt.CrdtInit.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.delta = $root.akkaserverless.component.crdt.CrdtDelta.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message["delete"] = $root.akkaserverless.component.crdt.CrdtDelete.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.command = $root.akkaserverless.component.entity.Command.decode(reader, reader.uint32());
                            break;
                        case 5:
                            message.streamCancelled = $root.akkaserverless.component.StreamCancelled.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a CrdtStreamIn message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof akkaserverless.component.crdt.CrdtStreamIn
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {akkaserverless.component.crdt.CrdtStreamIn} CrdtStreamIn
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CrdtStreamIn.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a CrdtStreamIn message.
                 * @function verify
                 * @memberof akkaserverless.component.crdt.CrdtStreamIn
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CrdtStreamIn.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.init != null && message.hasOwnProperty("init")) {
                        properties.message = 1;
                        {
                            var error = $root.akkaserverless.component.crdt.CrdtInit.verify(message.init);
                            if (error)
                                return "init." + error;
                        }
                    }
                    if (message.delta != null && message.hasOwnProperty("delta")) {
                        if (properties.message === 1)
                            return "message: multiple values";
                        properties.message = 1;
                        {
                            var error = $root.akkaserverless.component.crdt.CrdtDelta.verify(message.delta);
                            if (error)
                                return "delta." + error;
                        }
                    }
                    if (message["delete"] != null && message.hasOwnProperty("delete")) {
                        if (properties.message === 1)
                            return "message: multiple values";
                        properties.message = 1;
                        {
                            var error = $root.akkaserverless.component.crdt.CrdtDelete.verify(message["delete"]);
                            if (error)
                                return "delete." + error;
                        }
                    }
                    if (message.command != null && message.hasOwnProperty("command")) {
                        if (properties.message === 1)
                            return "message: multiple values";
                        properties.message = 1;
                        {
                            var error = $root.akkaserverless.component.entity.Command.verify(message.command);
                            if (error)
                                return "command." + error;
                        }
                    }
                    if (message.streamCancelled != null && message.hasOwnProperty("streamCancelled")) {
                        if (properties.message === 1)
                            return "message: multiple values";
                        properties.message = 1;
                        {
                            var error = $root.akkaserverless.component.StreamCancelled.verify(message.streamCancelled);
                            if (error)
                                return "streamCancelled." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a CrdtStreamIn message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof akkaserverless.component.crdt.CrdtStreamIn
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {akkaserverless.component.crdt.CrdtStreamIn} CrdtStreamIn
                 */
                CrdtStreamIn.fromObject = function fromObject(object) {
                    if (object instanceof $root.akkaserverless.component.crdt.CrdtStreamIn)
                        return object;
                    var message = new $root.akkaserverless.component.crdt.CrdtStreamIn();
                    if (object.init != null) {
                        if (typeof object.init !== "object")
                            throw TypeError(".akkaserverless.component.crdt.CrdtStreamIn.init: object expected");
                        message.init = $root.akkaserverless.component.crdt.CrdtInit.fromObject(object.init);
                    }
                    if (object.delta != null) {
                        if (typeof object.delta !== "object")
                            throw TypeError(".akkaserverless.component.crdt.CrdtStreamIn.delta: object expected");
                        message.delta = $root.akkaserverless.component.crdt.CrdtDelta.fromObject(object.delta);
                    }
                    if (object["delete"] != null) {
                        if (typeof object["delete"] !== "object")
                            throw TypeError(".akkaserverless.component.crdt.CrdtStreamIn.delete: object expected");
                        message["delete"] = $root.akkaserverless.component.crdt.CrdtDelete.fromObject(object["delete"]);
                    }
                    if (object.command != null) {
                        if (typeof object.command !== "object")
                            throw TypeError(".akkaserverless.component.crdt.CrdtStreamIn.command: object expected");
                        message.command = $root.akkaserverless.component.entity.Command.fromObject(object.command);
                    }
                    if (object.streamCancelled != null) {
                        if (typeof object.streamCancelled !== "object")
                            throw TypeError(".akkaserverless.component.crdt.CrdtStreamIn.streamCancelled: object expected");
                        message.streamCancelled = $root.akkaserverless.component.StreamCancelled.fromObject(object.streamCancelled);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a CrdtStreamIn message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof akkaserverless.component.crdt.CrdtStreamIn
                 * @static
                 * @param {akkaserverless.component.crdt.CrdtStreamIn} message CrdtStreamIn
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CrdtStreamIn.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (message.init != null && message.hasOwnProperty("init")) {
                        object.init = $root.akkaserverless.component.crdt.CrdtInit.toObject(message.init, options);
                        if (options.oneofs)
                            object.message = "init";
                    }
                    if (message.delta != null && message.hasOwnProperty("delta")) {
                        object.delta = $root.akkaserverless.component.crdt.CrdtDelta.toObject(message.delta, options);
                        if (options.oneofs)
                            object.message = "delta";
                    }
                    if (message["delete"] != null && message.hasOwnProperty("delete")) {
                        object["delete"] = $root.akkaserverless.component.crdt.CrdtDelete.toObject(message["delete"], options);
                        if (options.oneofs)
                            object.message = "delete";
                    }
                    if (message.command != null && message.hasOwnProperty("command")) {
                        object.command = $root.akkaserverless.component.entity.Command.toObject(message.command, options);
                        if (options.oneofs)
                            object.message = "command";
                    }
                    if (message.streamCancelled != null && message.hasOwnProperty("streamCancelled")) {
                        object.streamCancelled = $root.akkaserverless.component.StreamCancelled.toObject(message.streamCancelled, options);
                        if (options.oneofs)
                            object.message = "streamCancelled";
                    }
                    return object;
                };

                /**
                 * Converts this CrdtStreamIn to JSON.
                 * @function toJSON
                 * @memberof akkaserverless.component.crdt.CrdtStreamIn
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CrdtStreamIn.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return CrdtStreamIn;
            })();

            crdt.CrdtStreamOut = (function() {

                /**
                 * Properties of a CrdtStreamOut.
                 * @memberof akkaserverless.component.crdt
                 * @interface ICrdtStreamOut
                 * @property {akkaserverless.component.crdt.ICrdtReply|null} [reply] CrdtStreamOut reply
                 * @property {akkaserverless.component.crdt.ICrdtStreamedMessage|null} [streamedMessage] CrdtStreamOut streamedMessage
                 * @property {akkaserverless.component.crdt.ICrdtStreamCancelledResponse|null} [streamCancelledResponse] CrdtStreamOut streamCancelledResponse
                 * @property {akkaserverless.component.IFailure|null} [failure] CrdtStreamOut failure
                 */

                /**
                 * Constructs a new CrdtStreamOut.
                 * @memberof akkaserverless.component.crdt
                 * @classdesc Represents a CrdtStreamOut.
                 * @implements ICrdtStreamOut
                 * @constructor
                 * @param {akkaserverless.component.crdt.ICrdtStreamOut=} [properties] Properties to set
                 */
                function CrdtStreamOut(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CrdtStreamOut reply.
                 * @member {akkaserverless.component.crdt.ICrdtReply|null|undefined} reply
                 * @memberof akkaserverless.component.crdt.CrdtStreamOut
                 * @instance
                 */
                CrdtStreamOut.prototype.reply = null;

                /**
                 * CrdtStreamOut streamedMessage.
                 * @member {akkaserverless.component.crdt.ICrdtStreamedMessage|null|undefined} streamedMessage
                 * @memberof akkaserverless.component.crdt.CrdtStreamOut
                 * @instance
                 */
                CrdtStreamOut.prototype.streamedMessage = null;

                /**
                 * CrdtStreamOut streamCancelledResponse.
                 * @member {akkaserverless.component.crdt.ICrdtStreamCancelledResponse|null|undefined} streamCancelledResponse
                 * @memberof akkaserverless.component.crdt.CrdtStreamOut
                 * @instance
                 */
                CrdtStreamOut.prototype.streamCancelledResponse = null;

                /**
                 * CrdtStreamOut failure.
                 * @member {akkaserverless.component.IFailure|null|undefined} failure
                 * @memberof akkaserverless.component.crdt.CrdtStreamOut
                 * @instance
                 */
                CrdtStreamOut.prototype.failure = null;

                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;

                /**
                 * CrdtStreamOut message.
                 * @member {"reply"|"streamedMessage"|"streamCancelledResponse"|"failure"|undefined} message
                 * @memberof akkaserverless.component.crdt.CrdtStreamOut
                 * @instance
                 */
                Object.defineProperty(CrdtStreamOut.prototype, "message", {
                    get: $util.oneOfGetter($oneOfFields = ["reply", "streamedMessage", "streamCancelledResponse", "failure"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Creates a new CrdtStreamOut instance using the specified properties.
                 * @function create
                 * @memberof akkaserverless.component.crdt.CrdtStreamOut
                 * @static
                 * @param {akkaserverless.component.crdt.ICrdtStreamOut=} [properties] Properties to set
                 * @returns {akkaserverless.component.crdt.CrdtStreamOut} CrdtStreamOut instance
                 */
                CrdtStreamOut.create = function create(properties) {
                    return new CrdtStreamOut(properties);
                };

                /**
                 * Encodes the specified CrdtStreamOut message. Does not implicitly {@link akkaserverless.component.crdt.CrdtStreamOut.verify|verify} messages.
                 * @function encode
                 * @memberof akkaserverless.component.crdt.CrdtStreamOut
                 * @static
                 * @param {akkaserverless.component.crdt.ICrdtStreamOut} message CrdtStreamOut message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CrdtStreamOut.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.reply != null && Object.hasOwnProperty.call(message, "reply"))
                        $root.akkaserverless.component.crdt.CrdtReply.encode(message.reply, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.streamedMessage != null && Object.hasOwnProperty.call(message, "streamedMessage"))
                        $root.akkaserverless.component.crdt.CrdtStreamedMessage.encode(message.streamedMessage, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.streamCancelledResponse != null && Object.hasOwnProperty.call(message, "streamCancelledResponse"))
                        $root.akkaserverless.component.crdt.CrdtStreamCancelledResponse.encode(message.streamCancelledResponse, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.failure != null && Object.hasOwnProperty.call(message, "failure"))
                        $root.akkaserverless.component.Failure.encode(message.failure, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified CrdtStreamOut message, length delimited. Does not implicitly {@link akkaserverless.component.crdt.CrdtStreamOut.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof akkaserverless.component.crdt.CrdtStreamOut
                 * @static
                 * @param {akkaserverless.component.crdt.ICrdtStreamOut} message CrdtStreamOut message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CrdtStreamOut.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a CrdtStreamOut message from the specified reader or buffer.
                 * @function decode
                 * @memberof akkaserverless.component.crdt.CrdtStreamOut
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {akkaserverless.component.crdt.CrdtStreamOut} CrdtStreamOut
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CrdtStreamOut.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.crdt.CrdtStreamOut();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.reply = $root.akkaserverless.component.crdt.CrdtReply.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.streamedMessage = $root.akkaserverless.component.crdt.CrdtStreamedMessage.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.streamCancelledResponse = $root.akkaserverless.component.crdt.CrdtStreamCancelledResponse.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.failure = $root.akkaserverless.component.Failure.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a CrdtStreamOut message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof akkaserverless.component.crdt.CrdtStreamOut
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {akkaserverless.component.crdt.CrdtStreamOut} CrdtStreamOut
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CrdtStreamOut.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a CrdtStreamOut message.
                 * @function verify
                 * @memberof akkaserverless.component.crdt.CrdtStreamOut
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CrdtStreamOut.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.reply != null && message.hasOwnProperty("reply")) {
                        properties.message = 1;
                        {
                            var error = $root.akkaserverless.component.crdt.CrdtReply.verify(message.reply);
                            if (error)
                                return "reply." + error;
                        }
                    }
                    if (message.streamedMessage != null && message.hasOwnProperty("streamedMessage")) {
                        if (properties.message === 1)
                            return "message: multiple values";
                        properties.message = 1;
                        {
                            var error = $root.akkaserverless.component.crdt.CrdtStreamedMessage.verify(message.streamedMessage);
                            if (error)
                                return "streamedMessage." + error;
                        }
                    }
                    if (message.streamCancelledResponse != null && message.hasOwnProperty("streamCancelledResponse")) {
                        if (properties.message === 1)
                            return "message: multiple values";
                        properties.message = 1;
                        {
                            var error = $root.akkaserverless.component.crdt.CrdtStreamCancelledResponse.verify(message.streamCancelledResponse);
                            if (error)
                                return "streamCancelledResponse." + error;
                        }
                    }
                    if (message.failure != null && message.hasOwnProperty("failure")) {
                        if (properties.message === 1)
                            return "message: multiple values";
                        properties.message = 1;
                        {
                            var error = $root.akkaserverless.component.Failure.verify(message.failure);
                            if (error)
                                return "failure." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a CrdtStreamOut message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof akkaserverless.component.crdt.CrdtStreamOut
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {akkaserverless.component.crdt.CrdtStreamOut} CrdtStreamOut
                 */
                CrdtStreamOut.fromObject = function fromObject(object) {
                    if (object instanceof $root.akkaserverless.component.crdt.CrdtStreamOut)
                        return object;
                    var message = new $root.akkaserverless.component.crdt.CrdtStreamOut();
                    if (object.reply != null) {
                        if (typeof object.reply !== "object")
                            throw TypeError(".akkaserverless.component.crdt.CrdtStreamOut.reply: object expected");
                        message.reply = $root.akkaserverless.component.crdt.CrdtReply.fromObject(object.reply);
                    }
                    if (object.streamedMessage != null) {
                        if (typeof object.streamedMessage !== "object")
                            throw TypeError(".akkaserverless.component.crdt.CrdtStreamOut.streamedMessage: object expected");
                        message.streamedMessage = $root.akkaserverless.component.crdt.CrdtStreamedMessage.fromObject(object.streamedMessage);
                    }
                    if (object.streamCancelledResponse != null) {
                        if (typeof object.streamCancelledResponse !== "object")
                            throw TypeError(".akkaserverless.component.crdt.CrdtStreamOut.streamCancelledResponse: object expected");
                        message.streamCancelledResponse = $root.akkaserverless.component.crdt.CrdtStreamCancelledResponse.fromObject(object.streamCancelledResponse);
                    }
                    if (object.failure != null) {
                        if (typeof object.failure !== "object")
                            throw TypeError(".akkaserverless.component.crdt.CrdtStreamOut.failure: object expected");
                        message.failure = $root.akkaserverless.component.Failure.fromObject(object.failure);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a CrdtStreamOut message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof akkaserverless.component.crdt.CrdtStreamOut
                 * @static
                 * @param {akkaserverless.component.crdt.CrdtStreamOut} message CrdtStreamOut
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CrdtStreamOut.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (message.reply != null && message.hasOwnProperty("reply")) {
                        object.reply = $root.akkaserverless.component.crdt.CrdtReply.toObject(message.reply, options);
                        if (options.oneofs)
                            object.message = "reply";
                    }
                    if (message.streamedMessage != null && message.hasOwnProperty("streamedMessage")) {
                        object.streamedMessage = $root.akkaserverless.component.crdt.CrdtStreamedMessage.toObject(message.streamedMessage, options);
                        if (options.oneofs)
                            object.message = "streamedMessage";
                    }
                    if (message.streamCancelledResponse != null && message.hasOwnProperty("streamCancelledResponse")) {
                        object.streamCancelledResponse = $root.akkaserverless.component.crdt.CrdtStreamCancelledResponse.toObject(message.streamCancelledResponse, options);
                        if (options.oneofs)
                            object.message = "streamCancelledResponse";
                    }
                    if (message.failure != null && message.hasOwnProperty("failure")) {
                        object.failure = $root.akkaserverless.component.Failure.toObject(message.failure, options);
                        if (options.oneofs)
                            object.message = "failure";
                    }
                    return object;
                };

                /**
                 * Converts this CrdtStreamOut to JSON.
                 * @function toJSON
                 * @memberof akkaserverless.component.crdt.CrdtStreamOut
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CrdtStreamOut.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return CrdtStreamOut;
            })();

            crdt.CrdtDelta = (function() {

                /**
                 * Properties of a CrdtDelta.
                 * @memberof akkaserverless.component.crdt
                 * @interface ICrdtDelta
                 * @property {akkaserverless.component.crdt.IGCounterDelta|null} [gcounter] CrdtDelta gcounter
                 * @property {akkaserverless.component.crdt.IPNCounterDelta|null} [pncounter] CrdtDelta pncounter
                 * @property {akkaserverless.component.crdt.IGSetDelta|null} [gset] CrdtDelta gset
                 * @property {akkaserverless.component.crdt.IORSetDelta|null} [orset] CrdtDelta orset
                 * @property {akkaserverless.component.crdt.ILWWRegisterDelta|null} [lwwregister] CrdtDelta lwwregister
                 * @property {akkaserverless.component.crdt.IFlagDelta|null} [flag] CrdtDelta flag
                 * @property {akkaserverless.component.crdt.IORMapDelta|null} [ormap] CrdtDelta ormap
                 * @property {akkaserverless.component.crdt.IVoteDelta|null} [vote] CrdtDelta vote
                 */

                /**
                 * Constructs a new CrdtDelta.
                 * @memberof akkaserverless.component.crdt
                 * @classdesc Represents a CrdtDelta.
                 * @implements ICrdtDelta
                 * @constructor
                 * @param {akkaserverless.component.crdt.ICrdtDelta=} [properties] Properties to set
                 */
                function CrdtDelta(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CrdtDelta gcounter.
                 * @member {akkaserverless.component.crdt.IGCounterDelta|null|undefined} gcounter
                 * @memberof akkaserverless.component.crdt.CrdtDelta
                 * @instance
                 */
                CrdtDelta.prototype.gcounter = null;

                /**
                 * CrdtDelta pncounter.
                 * @member {akkaserverless.component.crdt.IPNCounterDelta|null|undefined} pncounter
                 * @memberof akkaserverless.component.crdt.CrdtDelta
                 * @instance
                 */
                CrdtDelta.prototype.pncounter = null;

                /**
                 * CrdtDelta gset.
                 * @member {akkaserverless.component.crdt.IGSetDelta|null|undefined} gset
                 * @memberof akkaserverless.component.crdt.CrdtDelta
                 * @instance
                 */
                CrdtDelta.prototype.gset = null;

                /**
                 * CrdtDelta orset.
                 * @member {akkaserverless.component.crdt.IORSetDelta|null|undefined} orset
                 * @memberof akkaserverless.component.crdt.CrdtDelta
                 * @instance
                 */
                CrdtDelta.prototype.orset = null;

                /**
                 * CrdtDelta lwwregister.
                 * @member {akkaserverless.component.crdt.ILWWRegisterDelta|null|undefined} lwwregister
                 * @memberof akkaserverless.component.crdt.CrdtDelta
                 * @instance
                 */
                CrdtDelta.prototype.lwwregister = null;

                /**
                 * CrdtDelta flag.
                 * @member {akkaserverless.component.crdt.IFlagDelta|null|undefined} flag
                 * @memberof akkaserverless.component.crdt.CrdtDelta
                 * @instance
                 */
                CrdtDelta.prototype.flag = null;

                /**
                 * CrdtDelta ormap.
                 * @member {akkaserverless.component.crdt.IORMapDelta|null|undefined} ormap
                 * @memberof akkaserverless.component.crdt.CrdtDelta
                 * @instance
                 */
                CrdtDelta.prototype.ormap = null;

                /**
                 * CrdtDelta vote.
                 * @member {akkaserverless.component.crdt.IVoteDelta|null|undefined} vote
                 * @memberof akkaserverless.component.crdt.CrdtDelta
                 * @instance
                 */
                CrdtDelta.prototype.vote = null;

                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;

                /**
                 * CrdtDelta delta.
                 * @member {"gcounter"|"pncounter"|"gset"|"orset"|"lwwregister"|"flag"|"ormap"|"vote"|undefined} delta
                 * @memberof akkaserverless.component.crdt.CrdtDelta
                 * @instance
                 */
                Object.defineProperty(CrdtDelta.prototype, "delta", {
                    get: $util.oneOfGetter($oneOfFields = ["gcounter", "pncounter", "gset", "orset", "lwwregister", "flag", "ormap", "vote"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Creates a new CrdtDelta instance using the specified properties.
                 * @function create
                 * @memberof akkaserverless.component.crdt.CrdtDelta
                 * @static
                 * @param {akkaserverless.component.crdt.ICrdtDelta=} [properties] Properties to set
                 * @returns {akkaserverless.component.crdt.CrdtDelta} CrdtDelta instance
                 */
                CrdtDelta.create = function create(properties) {
                    return new CrdtDelta(properties);
                };

                /**
                 * Encodes the specified CrdtDelta message. Does not implicitly {@link akkaserverless.component.crdt.CrdtDelta.verify|verify} messages.
                 * @function encode
                 * @memberof akkaserverless.component.crdt.CrdtDelta
                 * @static
                 * @param {akkaserverless.component.crdt.ICrdtDelta} message CrdtDelta message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CrdtDelta.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.gcounter != null && Object.hasOwnProperty.call(message, "gcounter"))
                        $root.akkaserverless.component.crdt.GCounterDelta.encode(message.gcounter, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.pncounter != null && Object.hasOwnProperty.call(message, "pncounter"))
                        $root.akkaserverless.component.crdt.PNCounterDelta.encode(message.pncounter, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.gset != null && Object.hasOwnProperty.call(message, "gset"))
                        $root.akkaserverless.component.crdt.GSetDelta.encode(message.gset, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.orset != null && Object.hasOwnProperty.call(message, "orset"))
                        $root.akkaserverless.component.crdt.ORSetDelta.encode(message.orset, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.lwwregister != null && Object.hasOwnProperty.call(message, "lwwregister"))
                        $root.akkaserverless.component.crdt.LWWRegisterDelta.encode(message.lwwregister, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.flag != null && Object.hasOwnProperty.call(message, "flag"))
                        $root.akkaserverless.component.crdt.FlagDelta.encode(message.flag, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.ormap != null && Object.hasOwnProperty.call(message, "ormap"))
                        $root.akkaserverless.component.crdt.ORMapDelta.encode(message.ormap, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.vote != null && Object.hasOwnProperty.call(message, "vote"))
                        $root.akkaserverless.component.crdt.VoteDelta.encode(message.vote, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified CrdtDelta message, length delimited. Does not implicitly {@link akkaserverless.component.crdt.CrdtDelta.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof akkaserverless.component.crdt.CrdtDelta
                 * @static
                 * @param {akkaserverless.component.crdt.ICrdtDelta} message CrdtDelta message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CrdtDelta.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a CrdtDelta message from the specified reader or buffer.
                 * @function decode
                 * @memberof akkaserverless.component.crdt.CrdtDelta
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {akkaserverless.component.crdt.CrdtDelta} CrdtDelta
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CrdtDelta.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.crdt.CrdtDelta();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.gcounter = $root.akkaserverless.component.crdt.GCounterDelta.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.pncounter = $root.akkaserverless.component.crdt.PNCounterDelta.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.gset = $root.akkaserverless.component.crdt.GSetDelta.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.orset = $root.akkaserverless.component.crdt.ORSetDelta.decode(reader, reader.uint32());
                            break;
                        case 5:
                            message.lwwregister = $root.akkaserverless.component.crdt.LWWRegisterDelta.decode(reader, reader.uint32());
                            break;
                        case 6:
                            message.flag = $root.akkaserverless.component.crdt.FlagDelta.decode(reader, reader.uint32());
                            break;
                        case 7:
                            message.ormap = $root.akkaserverless.component.crdt.ORMapDelta.decode(reader, reader.uint32());
                            break;
                        case 8:
                            message.vote = $root.akkaserverless.component.crdt.VoteDelta.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a CrdtDelta message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof akkaserverless.component.crdt.CrdtDelta
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {akkaserverless.component.crdt.CrdtDelta} CrdtDelta
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CrdtDelta.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a CrdtDelta message.
                 * @function verify
                 * @memberof akkaserverless.component.crdt.CrdtDelta
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CrdtDelta.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.gcounter != null && message.hasOwnProperty("gcounter")) {
                        properties.delta = 1;
                        {
                            var error = $root.akkaserverless.component.crdt.GCounterDelta.verify(message.gcounter);
                            if (error)
                                return "gcounter." + error;
                        }
                    }
                    if (message.pncounter != null && message.hasOwnProperty("pncounter")) {
                        if (properties.delta === 1)
                            return "delta: multiple values";
                        properties.delta = 1;
                        {
                            var error = $root.akkaserverless.component.crdt.PNCounterDelta.verify(message.pncounter);
                            if (error)
                                return "pncounter." + error;
                        }
                    }
                    if (message.gset != null && message.hasOwnProperty("gset")) {
                        if (properties.delta === 1)
                            return "delta: multiple values";
                        properties.delta = 1;
                        {
                            var error = $root.akkaserverless.component.crdt.GSetDelta.verify(message.gset);
                            if (error)
                                return "gset." + error;
                        }
                    }
                    if (message.orset != null && message.hasOwnProperty("orset")) {
                        if (properties.delta === 1)
                            return "delta: multiple values";
                        properties.delta = 1;
                        {
                            var error = $root.akkaserverless.component.crdt.ORSetDelta.verify(message.orset);
                            if (error)
                                return "orset." + error;
                        }
                    }
                    if (message.lwwregister != null && message.hasOwnProperty("lwwregister")) {
                        if (properties.delta === 1)
                            return "delta: multiple values";
                        properties.delta = 1;
                        {
                            var error = $root.akkaserverless.component.crdt.LWWRegisterDelta.verify(message.lwwregister);
                            if (error)
                                return "lwwregister." + error;
                        }
                    }
                    if (message.flag != null && message.hasOwnProperty("flag")) {
                        if (properties.delta === 1)
                            return "delta: multiple values";
                        properties.delta = 1;
                        {
                            var error = $root.akkaserverless.component.crdt.FlagDelta.verify(message.flag);
                            if (error)
                                return "flag." + error;
                        }
                    }
                    if (message.ormap != null && message.hasOwnProperty("ormap")) {
                        if (properties.delta === 1)
                            return "delta: multiple values";
                        properties.delta = 1;
                        {
                            var error = $root.akkaserverless.component.crdt.ORMapDelta.verify(message.ormap);
                            if (error)
                                return "ormap." + error;
                        }
                    }
                    if (message.vote != null && message.hasOwnProperty("vote")) {
                        if (properties.delta === 1)
                            return "delta: multiple values";
                        properties.delta = 1;
                        {
                            var error = $root.akkaserverless.component.crdt.VoteDelta.verify(message.vote);
                            if (error)
                                return "vote." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a CrdtDelta message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof akkaserverless.component.crdt.CrdtDelta
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {akkaserverless.component.crdt.CrdtDelta} CrdtDelta
                 */
                CrdtDelta.fromObject = function fromObject(object) {
                    if (object instanceof $root.akkaserverless.component.crdt.CrdtDelta)
                        return object;
                    var message = new $root.akkaserverless.component.crdt.CrdtDelta();
                    if (object.gcounter != null) {
                        if (typeof object.gcounter !== "object")
                            throw TypeError(".akkaserverless.component.crdt.CrdtDelta.gcounter: object expected");
                        message.gcounter = $root.akkaserverless.component.crdt.GCounterDelta.fromObject(object.gcounter);
                    }
                    if (object.pncounter != null) {
                        if (typeof object.pncounter !== "object")
                            throw TypeError(".akkaserverless.component.crdt.CrdtDelta.pncounter: object expected");
                        message.pncounter = $root.akkaserverless.component.crdt.PNCounterDelta.fromObject(object.pncounter);
                    }
                    if (object.gset != null) {
                        if (typeof object.gset !== "object")
                            throw TypeError(".akkaserverless.component.crdt.CrdtDelta.gset: object expected");
                        message.gset = $root.akkaserverless.component.crdt.GSetDelta.fromObject(object.gset);
                    }
                    if (object.orset != null) {
                        if (typeof object.orset !== "object")
                            throw TypeError(".akkaserverless.component.crdt.CrdtDelta.orset: object expected");
                        message.orset = $root.akkaserverless.component.crdt.ORSetDelta.fromObject(object.orset);
                    }
                    if (object.lwwregister != null) {
                        if (typeof object.lwwregister !== "object")
                            throw TypeError(".akkaserverless.component.crdt.CrdtDelta.lwwregister: object expected");
                        message.lwwregister = $root.akkaserverless.component.crdt.LWWRegisterDelta.fromObject(object.lwwregister);
                    }
                    if (object.flag != null) {
                        if (typeof object.flag !== "object")
                            throw TypeError(".akkaserverless.component.crdt.CrdtDelta.flag: object expected");
                        message.flag = $root.akkaserverless.component.crdt.FlagDelta.fromObject(object.flag);
                    }
                    if (object.ormap != null) {
                        if (typeof object.ormap !== "object")
                            throw TypeError(".akkaserverless.component.crdt.CrdtDelta.ormap: object expected");
                        message.ormap = $root.akkaserverless.component.crdt.ORMapDelta.fromObject(object.ormap);
                    }
                    if (object.vote != null) {
                        if (typeof object.vote !== "object")
                            throw TypeError(".akkaserverless.component.crdt.CrdtDelta.vote: object expected");
                        message.vote = $root.akkaserverless.component.crdt.VoteDelta.fromObject(object.vote);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a CrdtDelta message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof akkaserverless.component.crdt.CrdtDelta
                 * @static
                 * @param {akkaserverless.component.crdt.CrdtDelta} message CrdtDelta
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CrdtDelta.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (message.gcounter != null && message.hasOwnProperty("gcounter")) {
                        object.gcounter = $root.akkaserverless.component.crdt.GCounterDelta.toObject(message.gcounter, options);
                        if (options.oneofs)
                            object.delta = "gcounter";
                    }
                    if (message.pncounter != null && message.hasOwnProperty("pncounter")) {
                        object.pncounter = $root.akkaserverless.component.crdt.PNCounterDelta.toObject(message.pncounter, options);
                        if (options.oneofs)
                            object.delta = "pncounter";
                    }
                    if (message.gset != null && message.hasOwnProperty("gset")) {
                        object.gset = $root.akkaserverless.component.crdt.GSetDelta.toObject(message.gset, options);
                        if (options.oneofs)
                            object.delta = "gset";
                    }
                    if (message.orset != null && message.hasOwnProperty("orset")) {
                        object.orset = $root.akkaserverless.component.crdt.ORSetDelta.toObject(message.orset, options);
                        if (options.oneofs)
                            object.delta = "orset";
                    }
                    if (message.lwwregister != null && message.hasOwnProperty("lwwregister")) {
                        object.lwwregister = $root.akkaserverless.component.crdt.LWWRegisterDelta.toObject(message.lwwregister, options);
                        if (options.oneofs)
                            object.delta = "lwwregister";
                    }
                    if (message.flag != null && message.hasOwnProperty("flag")) {
                        object.flag = $root.akkaserverless.component.crdt.FlagDelta.toObject(message.flag, options);
                        if (options.oneofs)
                            object.delta = "flag";
                    }
                    if (message.ormap != null && message.hasOwnProperty("ormap")) {
                        object.ormap = $root.akkaserverless.component.crdt.ORMapDelta.toObject(message.ormap, options);
                        if (options.oneofs)
                            object.delta = "ormap";
                    }
                    if (message.vote != null && message.hasOwnProperty("vote")) {
                        object.vote = $root.akkaserverless.component.crdt.VoteDelta.toObject(message.vote, options);
                        if (options.oneofs)
                            object.delta = "vote";
                    }
                    return object;
                };

                /**
                 * Converts this CrdtDelta to JSON.
                 * @function toJSON
                 * @memberof akkaserverless.component.crdt.CrdtDelta
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CrdtDelta.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return CrdtDelta;
            })();

            crdt.GCounterDelta = (function() {

                /**
                 * Properties of a GCounterDelta.
                 * @memberof akkaserverless.component.crdt
                 * @interface IGCounterDelta
                 * @property {number|Long|null} [increment] GCounterDelta increment
                 */

                /**
                 * Constructs a new GCounterDelta.
                 * @memberof akkaserverless.component.crdt
                 * @classdesc Represents a GCounterDelta.
                 * @implements IGCounterDelta
                 * @constructor
                 * @param {akkaserverless.component.crdt.IGCounterDelta=} [properties] Properties to set
                 */
                function GCounterDelta(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GCounterDelta increment.
                 * @member {number|Long} increment
                 * @memberof akkaserverless.component.crdt.GCounterDelta
                 * @instance
                 */
                GCounterDelta.prototype.increment = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * Creates a new GCounterDelta instance using the specified properties.
                 * @function create
                 * @memberof akkaserverless.component.crdt.GCounterDelta
                 * @static
                 * @param {akkaserverless.component.crdt.IGCounterDelta=} [properties] Properties to set
                 * @returns {akkaserverless.component.crdt.GCounterDelta} GCounterDelta instance
                 */
                GCounterDelta.create = function create(properties) {
                    return new GCounterDelta(properties);
                };

                /**
                 * Encodes the specified GCounterDelta message. Does not implicitly {@link akkaserverless.component.crdt.GCounterDelta.verify|verify} messages.
                 * @function encode
                 * @memberof akkaserverless.component.crdt.GCounterDelta
                 * @static
                 * @param {akkaserverless.component.crdt.IGCounterDelta} message GCounterDelta message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GCounterDelta.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.increment != null && Object.hasOwnProperty.call(message, "increment"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.increment);
                    return writer;
                };

                /**
                 * Encodes the specified GCounterDelta message, length delimited. Does not implicitly {@link akkaserverless.component.crdt.GCounterDelta.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof akkaserverless.component.crdt.GCounterDelta
                 * @static
                 * @param {akkaserverless.component.crdt.IGCounterDelta} message GCounterDelta message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GCounterDelta.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a GCounterDelta message from the specified reader or buffer.
                 * @function decode
                 * @memberof akkaserverless.component.crdt.GCounterDelta
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {akkaserverless.component.crdt.GCounterDelta} GCounterDelta
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GCounterDelta.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.crdt.GCounterDelta();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.increment = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a GCounterDelta message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof akkaserverless.component.crdt.GCounterDelta
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {akkaserverless.component.crdt.GCounterDelta} GCounterDelta
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GCounterDelta.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a GCounterDelta message.
                 * @function verify
                 * @memberof akkaserverless.component.crdt.GCounterDelta
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GCounterDelta.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.increment != null && message.hasOwnProperty("increment"))
                        if (!$util.isInteger(message.increment) && !(message.increment && $util.isInteger(message.increment.low) && $util.isInteger(message.increment.high)))
                            return "increment: integer|Long expected";
                    return null;
                };

                /**
                 * Creates a GCounterDelta message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof akkaserverless.component.crdt.GCounterDelta
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {akkaserverless.component.crdt.GCounterDelta} GCounterDelta
                 */
                GCounterDelta.fromObject = function fromObject(object) {
                    if (object instanceof $root.akkaserverless.component.crdt.GCounterDelta)
                        return object;
                    var message = new $root.akkaserverless.component.crdt.GCounterDelta();
                    if (object.increment != null)
                        if ($util.Long)
                            (message.increment = $util.Long.fromValue(object.increment)).unsigned = true;
                        else if (typeof object.increment === "string")
                            message.increment = parseInt(object.increment, 10);
                        else if (typeof object.increment === "number")
                            message.increment = object.increment;
                        else if (typeof object.increment === "object")
                            message.increment = new $util.LongBits(object.increment.low >>> 0, object.increment.high >>> 0).toNumber(true);
                    return message;
                };

                /**
                 * Creates a plain object from a GCounterDelta message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof akkaserverless.component.crdt.GCounterDelta
                 * @static
                 * @param {akkaserverless.component.crdt.GCounterDelta} message GCounterDelta
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GCounterDelta.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.increment = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.increment = options.longs === String ? "0" : 0;
                    if (message.increment != null && message.hasOwnProperty("increment"))
                        if (typeof message.increment === "number")
                            object.increment = options.longs === String ? String(message.increment) : message.increment;
                        else
                            object.increment = options.longs === String ? $util.Long.prototype.toString.call(message.increment) : options.longs === Number ? new $util.LongBits(message.increment.low >>> 0, message.increment.high >>> 0).toNumber(true) : message.increment;
                    return object;
                };

                /**
                 * Converts this GCounterDelta to JSON.
                 * @function toJSON
                 * @memberof akkaserverless.component.crdt.GCounterDelta
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GCounterDelta.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GCounterDelta;
            })();

            crdt.PNCounterDelta = (function() {

                /**
                 * Properties of a PNCounterDelta.
                 * @memberof akkaserverless.component.crdt
                 * @interface IPNCounterDelta
                 * @property {number|Long|null} [change] PNCounterDelta change
                 */

                /**
                 * Constructs a new PNCounterDelta.
                 * @memberof akkaserverless.component.crdt
                 * @classdesc Represents a PNCounterDelta.
                 * @implements IPNCounterDelta
                 * @constructor
                 * @param {akkaserverless.component.crdt.IPNCounterDelta=} [properties] Properties to set
                 */
                function PNCounterDelta(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * PNCounterDelta change.
                 * @member {number|Long} change
                 * @memberof akkaserverless.component.crdt.PNCounterDelta
                 * @instance
                 */
                PNCounterDelta.prototype.change = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * Creates a new PNCounterDelta instance using the specified properties.
                 * @function create
                 * @memberof akkaserverless.component.crdt.PNCounterDelta
                 * @static
                 * @param {akkaserverless.component.crdt.IPNCounterDelta=} [properties] Properties to set
                 * @returns {akkaserverless.component.crdt.PNCounterDelta} PNCounterDelta instance
                 */
                PNCounterDelta.create = function create(properties) {
                    return new PNCounterDelta(properties);
                };

                /**
                 * Encodes the specified PNCounterDelta message. Does not implicitly {@link akkaserverless.component.crdt.PNCounterDelta.verify|verify} messages.
                 * @function encode
                 * @memberof akkaserverless.component.crdt.PNCounterDelta
                 * @static
                 * @param {akkaserverless.component.crdt.IPNCounterDelta} message PNCounterDelta message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PNCounterDelta.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.change != null && Object.hasOwnProperty.call(message, "change"))
                        writer.uint32(/* id 1, wireType 0 =*/8).sint64(message.change);
                    return writer;
                };

                /**
                 * Encodes the specified PNCounterDelta message, length delimited. Does not implicitly {@link akkaserverless.component.crdt.PNCounterDelta.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof akkaserverless.component.crdt.PNCounterDelta
                 * @static
                 * @param {akkaserverless.component.crdt.IPNCounterDelta} message PNCounterDelta message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PNCounterDelta.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a PNCounterDelta message from the specified reader or buffer.
                 * @function decode
                 * @memberof akkaserverless.component.crdt.PNCounterDelta
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {akkaserverless.component.crdt.PNCounterDelta} PNCounterDelta
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PNCounterDelta.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.crdt.PNCounterDelta();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.change = reader.sint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a PNCounterDelta message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof akkaserverless.component.crdt.PNCounterDelta
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {akkaserverless.component.crdt.PNCounterDelta} PNCounterDelta
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PNCounterDelta.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a PNCounterDelta message.
                 * @function verify
                 * @memberof akkaserverless.component.crdt.PNCounterDelta
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                PNCounterDelta.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.change != null && message.hasOwnProperty("change"))
                        if (!$util.isInteger(message.change) && !(message.change && $util.isInteger(message.change.low) && $util.isInteger(message.change.high)))
                            return "change: integer|Long expected";
                    return null;
                };

                /**
                 * Creates a PNCounterDelta message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof akkaserverless.component.crdt.PNCounterDelta
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {akkaserverless.component.crdt.PNCounterDelta} PNCounterDelta
                 */
                PNCounterDelta.fromObject = function fromObject(object) {
                    if (object instanceof $root.akkaserverless.component.crdt.PNCounterDelta)
                        return object;
                    var message = new $root.akkaserverless.component.crdt.PNCounterDelta();
                    if (object.change != null)
                        if ($util.Long)
                            (message.change = $util.Long.fromValue(object.change)).unsigned = false;
                        else if (typeof object.change === "string")
                            message.change = parseInt(object.change, 10);
                        else if (typeof object.change === "number")
                            message.change = object.change;
                        else if (typeof object.change === "object")
                            message.change = new $util.LongBits(object.change.low >>> 0, object.change.high >>> 0).toNumber();
                    return message;
                };

                /**
                 * Creates a plain object from a PNCounterDelta message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof akkaserverless.component.crdt.PNCounterDelta
                 * @static
                 * @param {akkaserverless.component.crdt.PNCounterDelta} message PNCounterDelta
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                PNCounterDelta.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.change = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.change = options.longs === String ? "0" : 0;
                    if (message.change != null && message.hasOwnProperty("change"))
                        if (typeof message.change === "number")
                            object.change = options.longs === String ? String(message.change) : message.change;
                        else
                            object.change = options.longs === String ? $util.Long.prototype.toString.call(message.change) : options.longs === Number ? new $util.LongBits(message.change.low >>> 0, message.change.high >>> 0).toNumber() : message.change;
                    return object;
                };

                /**
                 * Converts this PNCounterDelta to JSON.
                 * @function toJSON
                 * @memberof akkaserverless.component.crdt.PNCounterDelta
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                PNCounterDelta.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return PNCounterDelta;
            })();

            crdt.GSetDelta = (function() {

                /**
                 * Properties of a GSetDelta.
                 * @memberof akkaserverless.component.crdt
                 * @interface IGSetDelta
                 * @property {Array.<google.protobuf.IAny>|null} [added] GSetDelta added
                 */

                /**
                 * Constructs a new GSetDelta.
                 * @memberof akkaserverless.component.crdt
                 * @classdesc Represents a GSetDelta.
                 * @implements IGSetDelta
                 * @constructor
                 * @param {akkaserverless.component.crdt.IGSetDelta=} [properties] Properties to set
                 */
                function GSetDelta(properties) {
                    this.added = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GSetDelta added.
                 * @member {Array.<google.protobuf.IAny>} added
                 * @memberof akkaserverless.component.crdt.GSetDelta
                 * @instance
                 */
                GSetDelta.prototype.added = $util.emptyArray;

                /**
                 * Creates a new GSetDelta instance using the specified properties.
                 * @function create
                 * @memberof akkaserverless.component.crdt.GSetDelta
                 * @static
                 * @param {akkaserverless.component.crdt.IGSetDelta=} [properties] Properties to set
                 * @returns {akkaserverless.component.crdt.GSetDelta} GSetDelta instance
                 */
                GSetDelta.create = function create(properties) {
                    return new GSetDelta(properties);
                };

                /**
                 * Encodes the specified GSetDelta message. Does not implicitly {@link akkaserverless.component.crdt.GSetDelta.verify|verify} messages.
                 * @function encode
                 * @memberof akkaserverless.component.crdt.GSetDelta
                 * @static
                 * @param {akkaserverless.component.crdt.IGSetDelta} message GSetDelta message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GSetDelta.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.added != null && message.added.length)
                        for (var i = 0; i < message.added.length; ++i)
                            $root.google.protobuf.Any.encode(message.added[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified GSetDelta message, length delimited. Does not implicitly {@link akkaserverless.component.crdt.GSetDelta.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof akkaserverless.component.crdt.GSetDelta
                 * @static
                 * @param {akkaserverless.component.crdt.IGSetDelta} message GSetDelta message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GSetDelta.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a GSetDelta message from the specified reader or buffer.
                 * @function decode
                 * @memberof akkaserverless.component.crdt.GSetDelta
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {akkaserverless.component.crdt.GSetDelta} GSetDelta
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GSetDelta.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.crdt.GSetDelta();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.added && message.added.length))
                                message.added = [];
                            message.added.push($root.google.protobuf.Any.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a GSetDelta message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof akkaserverless.component.crdt.GSetDelta
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {akkaserverless.component.crdt.GSetDelta} GSetDelta
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GSetDelta.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a GSetDelta message.
                 * @function verify
                 * @memberof akkaserverless.component.crdt.GSetDelta
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GSetDelta.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.added != null && message.hasOwnProperty("added")) {
                        if (!Array.isArray(message.added))
                            return "added: array expected";
                        for (var i = 0; i < message.added.length; ++i) {
                            var error = $root.google.protobuf.Any.verify(message.added[i]);
                            if (error)
                                return "added." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a GSetDelta message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof akkaserverless.component.crdt.GSetDelta
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {akkaserverless.component.crdt.GSetDelta} GSetDelta
                 */
                GSetDelta.fromObject = function fromObject(object) {
                    if (object instanceof $root.akkaserverless.component.crdt.GSetDelta)
                        return object;
                    var message = new $root.akkaserverless.component.crdt.GSetDelta();
                    if (object.added) {
                        if (!Array.isArray(object.added))
                            throw TypeError(".akkaserverless.component.crdt.GSetDelta.added: array expected");
                        message.added = [];
                        for (var i = 0; i < object.added.length; ++i) {
                            if (typeof object.added[i] !== "object")
                                throw TypeError(".akkaserverless.component.crdt.GSetDelta.added: object expected");
                            message.added[i] = $root.google.protobuf.Any.fromObject(object.added[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a GSetDelta message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof akkaserverless.component.crdt.GSetDelta
                 * @static
                 * @param {akkaserverless.component.crdt.GSetDelta} message GSetDelta
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GSetDelta.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.added = [];
                    if (message.added && message.added.length) {
                        object.added = [];
                        for (var j = 0; j < message.added.length; ++j)
                            object.added[j] = $root.google.protobuf.Any.toObject(message.added[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this GSetDelta to JSON.
                 * @function toJSON
                 * @memberof akkaserverless.component.crdt.GSetDelta
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GSetDelta.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GSetDelta;
            })();

            crdt.ORSetDelta = (function() {

                /**
                 * Properties of a ORSetDelta.
                 * @memberof akkaserverless.component.crdt
                 * @interface IORSetDelta
                 * @property {boolean|null} [cleared] ORSetDelta cleared
                 * @property {Array.<google.protobuf.IAny>|null} [removed] ORSetDelta removed
                 * @property {Array.<google.protobuf.IAny>|null} [added] ORSetDelta added
                 */

                /**
                 * Constructs a new ORSetDelta.
                 * @memberof akkaserverless.component.crdt
                 * @classdesc Represents a ORSetDelta.
                 * @implements IORSetDelta
                 * @constructor
                 * @param {akkaserverless.component.crdt.IORSetDelta=} [properties] Properties to set
                 */
                function ORSetDelta(properties) {
                    this.removed = [];
                    this.added = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ORSetDelta cleared.
                 * @member {boolean} cleared
                 * @memberof akkaserverless.component.crdt.ORSetDelta
                 * @instance
                 */
                ORSetDelta.prototype.cleared = false;

                /**
                 * ORSetDelta removed.
                 * @member {Array.<google.protobuf.IAny>} removed
                 * @memberof akkaserverless.component.crdt.ORSetDelta
                 * @instance
                 */
                ORSetDelta.prototype.removed = $util.emptyArray;

                /**
                 * ORSetDelta added.
                 * @member {Array.<google.protobuf.IAny>} added
                 * @memberof akkaserverless.component.crdt.ORSetDelta
                 * @instance
                 */
                ORSetDelta.prototype.added = $util.emptyArray;

                /**
                 * Creates a new ORSetDelta instance using the specified properties.
                 * @function create
                 * @memberof akkaserverless.component.crdt.ORSetDelta
                 * @static
                 * @param {akkaserverless.component.crdt.IORSetDelta=} [properties] Properties to set
                 * @returns {akkaserverless.component.crdt.ORSetDelta} ORSetDelta instance
                 */
                ORSetDelta.create = function create(properties) {
                    return new ORSetDelta(properties);
                };

                /**
                 * Encodes the specified ORSetDelta message. Does not implicitly {@link akkaserverless.component.crdt.ORSetDelta.verify|verify} messages.
                 * @function encode
                 * @memberof akkaserverless.component.crdt.ORSetDelta
                 * @static
                 * @param {akkaserverless.component.crdt.IORSetDelta} message ORSetDelta message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ORSetDelta.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.cleared != null && Object.hasOwnProperty.call(message, "cleared"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.cleared);
                    if (message.removed != null && message.removed.length)
                        for (var i = 0; i < message.removed.length; ++i)
                            $root.google.protobuf.Any.encode(message.removed[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.added != null && message.added.length)
                        for (var i = 0; i < message.added.length; ++i)
                            $root.google.protobuf.Any.encode(message.added[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified ORSetDelta message, length delimited. Does not implicitly {@link akkaserverless.component.crdt.ORSetDelta.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof akkaserverless.component.crdt.ORSetDelta
                 * @static
                 * @param {akkaserverless.component.crdt.IORSetDelta} message ORSetDelta message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ORSetDelta.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ORSetDelta message from the specified reader or buffer.
                 * @function decode
                 * @memberof akkaserverless.component.crdt.ORSetDelta
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {akkaserverless.component.crdt.ORSetDelta} ORSetDelta
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ORSetDelta.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.crdt.ORSetDelta();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.cleared = reader.bool();
                            break;
                        case 2:
                            if (!(message.removed && message.removed.length))
                                message.removed = [];
                            message.removed.push($root.google.protobuf.Any.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            if (!(message.added && message.added.length))
                                message.added = [];
                            message.added.push($root.google.protobuf.Any.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ORSetDelta message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof akkaserverless.component.crdt.ORSetDelta
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {akkaserverless.component.crdt.ORSetDelta} ORSetDelta
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ORSetDelta.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ORSetDelta message.
                 * @function verify
                 * @memberof akkaserverless.component.crdt.ORSetDelta
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ORSetDelta.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.cleared != null && message.hasOwnProperty("cleared"))
                        if (typeof message.cleared !== "boolean")
                            return "cleared: boolean expected";
                    if (message.removed != null && message.hasOwnProperty("removed")) {
                        if (!Array.isArray(message.removed))
                            return "removed: array expected";
                        for (var i = 0; i < message.removed.length; ++i) {
                            var error = $root.google.protobuf.Any.verify(message.removed[i]);
                            if (error)
                                return "removed." + error;
                        }
                    }
                    if (message.added != null && message.hasOwnProperty("added")) {
                        if (!Array.isArray(message.added))
                            return "added: array expected";
                        for (var i = 0; i < message.added.length; ++i) {
                            var error = $root.google.protobuf.Any.verify(message.added[i]);
                            if (error)
                                return "added." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a ORSetDelta message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof akkaserverless.component.crdt.ORSetDelta
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {akkaserverless.component.crdt.ORSetDelta} ORSetDelta
                 */
                ORSetDelta.fromObject = function fromObject(object) {
                    if (object instanceof $root.akkaserverless.component.crdt.ORSetDelta)
                        return object;
                    var message = new $root.akkaserverless.component.crdt.ORSetDelta();
                    if (object.cleared != null)
                        message.cleared = Boolean(object.cleared);
                    if (object.removed) {
                        if (!Array.isArray(object.removed))
                            throw TypeError(".akkaserverless.component.crdt.ORSetDelta.removed: array expected");
                        message.removed = [];
                        for (var i = 0; i < object.removed.length; ++i) {
                            if (typeof object.removed[i] !== "object")
                                throw TypeError(".akkaserverless.component.crdt.ORSetDelta.removed: object expected");
                            message.removed[i] = $root.google.protobuf.Any.fromObject(object.removed[i]);
                        }
                    }
                    if (object.added) {
                        if (!Array.isArray(object.added))
                            throw TypeError(".akkaserverless.component.crdt.ORSetDelta.added: array expected");
                        message.added = [];
                        for (var i = 0; i < object.added.length; ++i) {
                            if (typeof object.added[i] !== "object")
                                throw TypeError(".akkaserverless.component.crdt.ORSetDelta.added: object expected");
                            message.added[i] = $root.google.protobuf.Any.fromObject(object.added[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a ORSetDelta message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof akkaserverless.component.crdt.ORSetDelta
                 * @static
                 * @param {akkaserverless.component.crdt.ORSetDelta} message ORSetDelta
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ORSetDelta.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.removed = [];
                        object.added = [];
                    }
                    if (options.defaults)
                        object.cleared = false;
                    if (message.cleared != null && message.hasOwnProperty("cleared"))
                        object.cleared = message.cleared;
                    if (message.removed && message.removed.length) {
                        object.removed = [];
                        for (var j = 0; j < message.removed.length; ++j)
                            object.removed[j] = $root.google.protobuf.Any.toObject(message.removed[j], options);
                    }
                    if (message.added && message.added.length) {
                        object.added = [];
                        for (var j = 0; j < message.added.length; ++j)
                            object.added[j] = $root.google.protobuf.Any.toObject(message.added[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this ORSetDelta to JSON.
                 * @function toJSON
                 * @memberof akkaserverless.component.crdt.ORSetDelta
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ORSetDelta.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ORSetDelta;
            })();

            crdt.LWWRegisterDelta = (function() {

                /**
                 * Properties of a LWWRegisterDelta.
                 * @memberof akkaserverless.component.crdt
                 * @interface ILWWRegisterDelta
                 * @property {google.protobuf.IAny|null} [value] LWWRegisterDelta value
                 * @property {akkaserverless.component.crdt.CrdtClock|null} [clock] LWWRegisterDelta clock
                 * @property {number|Long|null} [customClockValue] LWWRegisterDelta customClockValue
                 */

                /**
                 * Constructs a new LWWRegisterDelta.
                 * @memberof akkaserverless.component.crdt
                 * @classdesc Represents a LWWRegisterDelta.
                 * @implements ILWWRegisterDelta
                 * @constructor
                 * @param {akkaserverless.component.crdt.ILWWRegisterDelta=} [properties] Properties to set
                 */
                function LWWRegisterDelta(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * LWWRegisterDelta value.
                 * @member {google.protobuf.IAny|null|undefined} value
                 * @memberof akkaserverless.component.crdt.LWWRegisterDelta
                 * @instance
                 */
                LWWRegisterDelta.prototype.value = null;

                /**
                 * LWWRegisterDelta clock.
                 * @member {akkaserverless.component.crdt.CrdtClock} clock
                 * @memberof akkaserverless.component.crdt.LWWRegisterDelta
                 * @instance
                 */
                LWWRegisterDelta.prototype.clock = 0;

                /**
                 * LWWRegisterDelta customClockValue.
                 * @member {number|Long} customClockValue
                 * @memberof akkaserverless.component.crdt.LWWRegisterDelta
                 * @instance
                 */
                LWWRegisterDelta.prototype.customClockValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * Creates a new LWWRegisterDelta instance using the specified properties.
                 * @function create
                 * @memberof akkaserverless.component.crdt.LWWRegisterDelta
                 * @static
                 * @param {akkaserverless.component.crdt.ILWWRegisterDelta=} [properties] Properties to set
                 * @returns {akkaserverless.component.crdt.LWWRegisterDelta} LWWRegisterDelta instance
                 */
                LWWRegisterDelta.create = function create(properties) {
                    return new LWWRegisterDelta(properties);
                };

                /**
                 * Encodes the specified LWWRegisterDelta message. Does not implicitly {@link akkaserverless.component.crdt.LWWRegisterDelta.verify|verify} messages.
                 * @function encode
                 * @memberof akkaserverless.component.crdt.LWWRegisterDelta
                 * @static
                 * @param {akkaserverless.component.crdt.ILWWRegisterDelta} message LWWRegisterDelta message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                LWWRegisterDelta.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                        $root.google.protobuf.Any.encode(message.value, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.clock != null && Object.hasOwnProperty.call(message, "clock"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.clock);
                    if (message.customClockValue != null && Object.hasOwnProperty.call(message, "customClockValue"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int64(message.customClockValue);
                    return writer;
                };

                /**
                 * Encodes the specified LWWRegisterDelta message, length delimited. Does not implicitly {@link akkaserverless.component.crdt.LWWRegisterDelta.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof akkaserverless.component.crdt.LWWRegisterDelta
                 * @static
                 * @param {akkaserverless.component.crdt.ILWWRegisterDelta} message LWWRegisterDelta message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                LWWRegisterDelta.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a LWWRegisterDelta message from the specified reader or buffer.
                 * @function decode
                 * @memberof akkaserverless.component.crdt.LWWRegisterDelta
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {akkaserverless.component.crdt.LWWRegisterDelta} LWWRegisterDelta
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                LWWRegisterDelta.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.crdt.LWWRegisterDelta();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.value = $root.google.protobuf.Any.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.clock = reader.int32();
                            break;
                        case 3:
                            message.customClockValue = reader.int64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a LWWRegisterDelta message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof akkaserverless.component.crdt.LWWRegisterDelta
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {akkaserverless.component.crdt.LWWRegisterDelta} LWWRegisterDelta
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                LWWRegisterDelta.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a LWWRegisterDelta message.
                 * @function verify
                 * @memberof akkaserverless.component.crdt.LWWRegisterDelta
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                LWWRegisterDelta.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.value != null && message.hasOwnProperty("value")) {
                        var error = $root.google.protobuf.Any.verify(message.value);
                        if (error)
                            return "value." + error;
                    }
                    if (message.clock != null && message.hasOwnProperty("clock"))
                        switch (message.clock) {
                        default:
                            return "clock: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.customClockValue != null && message.hasOwnProperty("customClockValue"))
                        if (!$util.isInteger(message.customClockValue) && !(message.customClockValue && $util.isInteger(message.customClockValue.low) && $util.isInteger(message.customClockValue.high)))
                            return "customClockValue: integer|Long expected";
                    return null;
                };

                /**
                 * Creates a LWWRegisterDelta message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof akkaserverless.component.crdt.LWWRegisterDelta
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {akkaserverless.component.crdt.LWWRegisterDelta} LWWRegisterDelta
                 */
                LWWRegisterDelta.fromObject = function fromObject(object) {
                    if (object instanceof $root.akkaserverless.component.crdt.LWWRegisterDelta)
                        return object;
                    var message = new $root.akkaserverless.component.crdt.LWWRegisterDelta();
                    if (object.value != null) {
                        if (typeof object.value !== "object")
                            throw TypeError(".akkaserverless.component.crdt.LWWRegisterDelta.value: object expected");
                        message.value = $root.google.protobuf.Any.fromObject(object.value);
                    }
                    switch (object.clock) {
                    case "CRDT_CLOCK_DEFAULT_UNSPECIFIED":
                    case 0:
                        message.clock = 0;
                        break;
                    case "CRDT_CLOCK_REVERSE":
                    case 1:
                        message.clock = 1;
                        break;
                    case "CRDT_CLOCK_CUSTOM":
                    case 2:
                        message.clock = 2;
                        break;
                    case "CRDT_CLOCK_CUSTOM_AUTO_INCREMENT":
                    case 3:
                        message.clock = 3;
                        break;
                    }
                    if (object.customClockValue != null)
                        if ($util.Long)
                            (message.customClockValue = $util.Long.fromValue(object.customClockValue)).unsigned = false;
                        else if (typeof object.customClockValue === "string")
                            message.customClockValue = parseInt(object.customClockValue, 10);
                        else if (typeof object.customClockValue === "number")
                            message.customClockValue = object.customClockValue;
                        else if (typeof object.customClockValue === "object")
                            message.customClockValue = new $util.LongBits(object.customClockValue.low >>> 0, object.customClockValue.high >>> 0).toNumber();
                    return message;
                };

                /**
                 * Creates a plain object from a LWWRegisterDelta message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof akkaserverless.component.crdt.LWWRegisterDelta
                 * @static
                 * @param {akkaserverless.component.crdt.LWWRegisterDelta} message LWWRegisterDelta
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                LWWRegisterDelta.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.value = null;
                        object.clock = options.enums === String ? "CRDT_CLOCK_DEFAULT_UNSPECIFIED" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.customClockValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.customClockValue = options.longs === String ? "0" : 0;
                    }
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = $root.google.protobuf.Any.toObject(message.value, options);
                    if (message.clock != null && message.hasOwnProperty("clock"))
                        object.clock = options.enums === String ? $root.akkaserverless.component.crdt.CrdtClock[message.clock] : message.clock;
                    if (message.customClockValue != null && message.hasOwnProperty("customClockValue"))
                        if (typeof message.customClockValue === "number")
                            object.customClockValue = options.longs === String ? String(message.customClockValue) : message.customClockValue;
                        else
                            object.customClockValue = options.longs === String ? $util.Long.prototype.toString.call(message.customClockValue) : options.longs === Number ? new $util.LongBits(message.customClockValue.low >>> 0, message.customClockValue.high >>> 0).toNumber() : message.customClockValue;
                    return object;
                };

                /**
                 * Converts this LWWRegisterDelta to JSON.
                 * @function toJSON
                 * @memberof akkaserverless.component.crdt.LWWRegisterDelta
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                LWWRegisterDelta.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return LWWRegisterDelta;
            })();

            crdt.FlagDelta = (function() {

                /**
                 * Properties of a FlagDelta.
                 * @memberof akkaserverless.component.crdt
                 * @interface IFlagDelta
                 * @property {boolean|null} [value] FlagDelta value
                 */

                /**
                 * Constructs a new FlagDelta.
                 * @memberof akkaserverless.component.crdt
                 * @classdesc Represents a FlagDelta.
                 * @implements IFlagDelta
                 * @constructor
                 * @param {akkaserverless.component.crdt.IFlagDelta=} [properties] Properties to set
                 */
                function FlagDelta(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * FlagDelta value.
                 * @member {boolean} value
                 * @memberof akkaserverless.component.crdt.FlagDelta
                 * @instance
                 */
                FlagDelta.prototype.value = false;

                /**
                 * Creates a new FlagDelta instance using the specified properties.
                 * @function create
                 * @memberof akkaserverless.component.crdt.FlagDelta
                 * @static
                 * @param {akkaserverless.component.crdt.IFlagDelta=} [properties] Properties to set
                 * @returns {akkaserverless.component.crdt.FlagDelta} FlagDelta instance
                 */
                FlagDelta.create = function create(properties) {
                    return new FlagDelta(properties);
                };

                /**
                 * Encodes the specified FlagDelta message. Does not implicitly {@link akkaserverless.component.crdt.FlagDelta.verify|verify} messages.
                 * @function encode
                 * @memberof akkaserverless.component.crdt.FlagDelta
                 * @static
                 * @param {akkaserverless.component.crdt.IFlagDelta} message FlagDelta message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FlagDelta.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.value);
                    return writer;
                };

                /**
                 * Encodes the specified FlagDelta message, length delimited. Does not implicitly {@link akkaserverless.component.crdt.FlagDelta.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof akkaserverless.component.crdt.FlagDelta
                 * @static
                 * @param {akkaserverless.component.crdt.IFlagDelta} message FlagDelta message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FlagDelta.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a FlagDelta message from the specified reader or buffer.
                 * @function decode
                 * @memberof akkaserverless.component.crdt.FlagDelta
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {akkaserverless.component.crdt.FlagDelta} FlagDelta
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FlagDelta.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.crdt.FlagDelta();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.value = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a FlagDelta message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof akkaserverless.component.crdt.FlagDelta
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {akkaserverless.component.crdt.FlagDelta} FlagDelta
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FlagDelta.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a FlagDelta message.
                 * @function verify
                 * @memberof akkaserverless.component.crdt.FlagDelta
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FlagDelta.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (typeof message.value !== "boolean")
                            return "value: boolean expected";
                    return null;
                };

                /**
                 * Creates a FlagDelta message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof akkaserverless.component.crdt.FlagDelta
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {akkaserverless.component.crdt.FlagDelta} FlagDelta
                 */
                FlagDelta.fromObject = function fromObject(object) {
                    if (object instanceof $root.akkaserverless.component.crdt.FlagDelta)
                        return object;
                    var message = new $root.akkaserverless.component.crdt.FlagDelta();
                    if (object.value != null)
                        message.value = Boolean(object.value);
                    return message;
                };

                /**
                 * Creates a plain object from a FlagDelta message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof akkaserverless.component.crdt.FlagDelta
                 * @static
                 * @param {akkaserverless.component.crdt.FlagDelta} message FlagDelta
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FlagDelta.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.value = false;
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = message.value;
                    return object;
                };

                /**
                 * Converts this FlagDelta to JSON.
                 * @function toJSON
                 * @memberof akkaserverless.component.crdt.FlagDelta
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FlagDelta.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return FlagDelta;
            })();

            crdt.ORMapDelta = (function() {

                /**
                 * Properties of a ORMapDelta.
                 * @memberof akkaserverless.component.crdt
                 * @interface IORMapDelta
                 * @property {boolean|null} [cleared] ORMapDelta cleared
                 * @property {Array.<google.protobuf.IAny>|null} [removed] ORMapDelta removed
                 * @property {Array.<akkaserverless.component.crdt.IORMapEntryDelta>|null} [updated] ORMapDelta updated
                 * @property {Array.<akkaserverless.component.crdt.IORMapEntryDelta>|null} [added] ORMapDelta added
                 */

                /**
                 * Constructs a new ORMapDelta.
                 * @memberof akkaserverless.component.crdt
                 * @classdesc Represents a ORMapDelta.
                 * @implements IORMapDelta
                 * @constructor
                 * @param {akkaserverless.component.crdt.IORMapDelta=} [properties] Properties to set
                 */
                function ORMapDelta(properties) {
                    this.removed = [];
                    this.updated = [];
                    this.added = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ORMapDelta cleared.
                 * @member {boolean} cleared
                 * @memberof akkaserverless.component.crdt.ORMapDelta
                 * @instance
                 */
                ORMapDelta.prototype.cleared = false;

                /**
                 * ORMapDelta removed.
                 * @member {Array.<google.protobuf.IAny>} removed
                 * @memberof akkaserverless.component.crdt.ORMapDelta
                 * @instance
                 */
                ORMapDelta.prototype.removed = $util.emptyArray;

                /**
                 * ORMapDelta updated.
                 * @member {Array.<akkaserverless.component.crdt.IORMapEntryDelta>} updated
                 * @memberof akkaserverless.component.crdt.ORMapDelta
                 * @instance
                 */
                ORMapDelta.prototype.updated = $util.emptyArray;

                /**
                 * ORMapDelta added.
                 * @member {Array.<akkaserverless.component.crdt.IORMapEntryDelta>} added
                 * @memberof akkaserverless.component.crdt.ORMapDelta
                 * @instance
                 */
                ORMapDelta.prototype.added = $util.emptyArray;

                /**
                 * Creates a new ORMapDelta instance using the specified properties.
                 * @function create
                 * @memberof akkaserverless.component.crdt.ORMapDelta
                 * @static
                 * @param {akkaserverless.component.crdt.IORMapDelta=} [properties] Properties to set
                 * @returns {akkaserverless.component.crdt.ORMapDelta} ORMapDelta instance
                 */
                ORMapDelta.create = function create(properties) {
                    return new ORMapDelta(properties);
                };

                /**
                 * Encodes the specified ORMapDelta message. Does not implicitly {@link akkaserverless.component.crdt.ORMapDelta.verify|verify} messages.
                 * @function encode
                 * @memberof akkaserverless.component.crdt.ORMapDelta
                 * @static
                 * @param {akkaserverless.component.crdt.IORMapDelta} message ORMapDelta message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ORMapDelta.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.cleared != null && Object.hasOwnProperty.call(message, "cleared"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.cleared);
                    if (message.removed != null && message.removed.length)
                        for (var i = 0; i < message.removed.length; ++i)
                            $root.google.protobuf.Any.encode(message.removed[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.updated != null && message.updated.length)
                        for (var i = 0; i < message.updated.length; ++i)
                            $root.akkaserverless.component.crdt.ORMapEntryDelta.encode(message.updated[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.added != null && message.added.length)
                        for (var i = 0; i < message.added.length; ++i)
                            $root.akkaserverless.component.crdt.ORMapEntryDelta.encode(message.added[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified ORMapDelta message, length delimited. Does not implicitly {@link akkaserverless.component.crdt.ORMapDelta.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof akkaserverless.component.crdt.ORMapDelta
                 * @static
                 * @param {akkaserverless.component.crdt.IORMapDelta} message ORMapDelta message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ORMapDelta.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ORMapDelta message from the specified reader or buffer.
                 * @function decode
                 * @memberof akkaserverless.component.crdt.ORMapDelta
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {akkaserverless.component.crdt.ORMapDelta} ORMapDelta
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ORMapDelta.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.crdt.ORMapDelta();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.cleared = reader.bool();
                            break;
                        case 2:
                            if (!(message.removed && message.removed.length))
                                message.removed = [];
                            message.removed.push($root.google.protobuf.Any.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            if (!(message.updated && message.updated.length))
                                message.updated = [];
                            message.updated.push($root.akkaserverless.component.crdt.ORMapEntryDelta.decode(reader, reader.uint32()));
                            break;
                        case 4:
                            if (!(message.added && message.added.length))
                                message.added = [];
                            message.added.push($root.akkaserverless.component.crdt.ORMapEntryDelta.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ORMapDelta message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof akkaserverless.component.crdt.ORMapDelta
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {akkaserverless.component.crdt.ORMapDelta} ORMapDelta
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ORMapDelta.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ORMapDelta message.
                 * @function verify
                 * @memberof akkaserverless.component.crdt.ORMapDelta
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ORMapDelta.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.cleared != null && message.hasOwnProperty("cleared"))
                        if (typeof message.cleared !== "boolean")
                            return "cleared: boolean expected";
                    if (message.removed != null && message.hasOwnProperty("removed")) {
                        if (!Array.isArray(message.removed))
                            return "removed: array expected";
                        for (var i = 0; i < message.removed.length; ++i) {
                            var error = $root.google.protobuf.Any.verify(message.removed[i]);
                            if (error)
                                return "removed." + error;
                        }
                    }
                    if (message.updated != null && message.hasOwnProperty("updated")) {
                        if (!Array.isArray(message.updated))
                            return "updated: array expected";
                        for (var i = 0; i < message.updated.length; ++i) {
                            var error = $root.akkaserverless.component.crdt.ORMapEntryDelta.verify(message.updated[i]);
                            if (error)
                                return "updated." + error;
                        }
                    }
                    if (message.added != null && message.hasOwnProperty("added")) {
                        if (!Array.isArray(message.added))
                            return "added: array expected";
                        for (var i = 0; i < message.added.length; ++i) {
                            var error = $root.akkaserverless.component.crdt.ORMapEntryDelta.verify(message.added[i]);
                            if (error)
                                return "added." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a ORMapDelta message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof akkaserverless.component.crdt.ORMapDelta
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {akkaserverless.component.crdt.ORMapDelta} ORMapDelta
                 */
                ORMapDelta.fromObject = function fromObject(object) {
                    if (object instanceof $root.akkaserverless.component.crdt.ORMapDelta)
                        return object;
                    var message = new $root.akkaserverless.component.crdt.ORMapDelta();
                    if (object.cleared != null)
                        message.cleared = Boolean(object.cleared);
                    if (object.removed) {
                        if (!Array.isArray(object.removed))
                            throw TypeError(".akkaserverless.component.crdt.ORMapDelta.removed: array expected");
                        message.removed = [];
                        for (var i = 0; i < object.removed.length; ++i) {
                            if (typeof object.removed[i] !== "object")
                                throw TypeError(".akkaserverless.component.crdt.ORMapDelta.removed: object expected");
                            message.removed[i] = $root.google.protobuf.Any.fromObject(object.removed[i]);
                        }
                    }
                    if (object.updated) {
                        if (!Array.isArray(object.updated))
                            throw TypeError(".akkaserverless.component.crdt.ORMapDelta.updated: array expected");
                        message.updated = [];
                        for (var i = 0; i < object.updated.length; ++i) {
                            if (typeof object.updated[i] !== "object")
                                throw TypeError(".akkaserverless.component.crdt.ORMapDelta.updated: object expected");
                            message.updated[i] = $root.akkaserverless.component.crdt.ORMapEntryDelta.fromObject(object.updated[i]);
                        }
                    }
                    if (object.added) {
                        if (!Array.isArray(object.added))
                            throw TypeError(".akkaserverless.component.crdt.ORMapDelta.added: array expected");
                        message.added = [];
                        for (var i = 0; i < object.added.length; ++i) {
                            if (typeof object.added[i] !== "object")
                                throw TypeError(".akkaserverless.component.crdt.ORMapDelta.added: object expected");
                            message.added[i] = $root.akkaserverless.component.crdt.ORMapEntryDelta.fromObject(object.added[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a ORMapDelta message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof akkaserverless.component.crdt.ORMapDelta
                 * @static
                 * @param {akkaserverless.component.crdt.ORMapDelta} message ORMapDelta
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ORMapDelta.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.removed = [];
                        object.updated = [];
                        object.added = [];
                    }
                    if (options.defaults)
                        object.cleared = false;
                    if (message.cleared != null && message.hasOwnProperty("cleared"))
                        object.cleared = message.cleared;
                    if (message.removed && message.removed.length) {
                        object.removed = [];
                        for (var j = 0; j < message.removed.length; ++j)
                            object.removed[j] = $root.google.protobuf.Any.toObject(message.removed[j], options);
                    }
                    if (message.updated && message.updated.length) {
                        object.updated = [];
                        for (var j = 0; j < message.updated.length; ++j)
                            object.updated[j] = $root.akkaserverless.component.crdt.ORMapEntryDelta.toObject(message.updated[j], options);
                    }
                    if (message.added && message.added.length) {
                        object.added = [];
                        for (var j = 0; j < message.added.length; ++j)
                            object.added[j] = $root.akkaserverless.component.crdt.ORMapEntryDelta.toObject(message.added[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this ORMapDelta to JSON.
                 * @function toJSON
                 * @memberof akkaserverless.component.crdt.ORMapDelta
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ORMapDelta.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ORMapDelta;
            })();

            crdt.ORMapEntryDelta = (function() {

                /**
                 * Properties of a ORMapEntryDelta.
                 * @memberof akkaserverless.component.crdt
                 * @interface IORMapEntryDelta
                 * @property {google.protobuf.IAny|null} [key] ORMapEntryDelta key
                 * @property {akkaserverless.component.crdt.ICrdtDelta|null} [delta] ORMapEntryDelta delta
                 */

                /**
                 * Constructs a new ORMapEntryDelta.
                 * @memberof akkaserverless.component.crdt
                 * @classdesc Represents a ORMapEntryDelta.
                 * @implements IORMapEntryDelta
                 * @constructor
                 * @param {akkaserverless.component.crdt.IORMapEntryDelta=} [properties] Properties to set
                 */
                function ORMapEntryDelta(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ORMapEntryDelta key.
                 * @member {google.protobuf.IAny|null|undefined} key
                 * @memberof akkaserverless.component.crdt.ORMapEntryDelta
                 * @instance
                 */
                ORMapEntryDelta.prototype.key = null;

                /**
                 * ORMapEntryDelta delta.
                 * @member {akkaserverless.component.crdt.ICrdtDelta|null|undefined} delta
                 * @memberof akkaserverless.component.crdt.ORMapEntryDelta
                 * @instance
                 */
                ORMapEntryDelta.prototype.delta = null;

                /**
                 * Creates a new ORMapEntryDelta instance using the specified properties.
                 * @function create
                 * @memberof akkaserverless.component.crdt.ORMapEntryDelta
                 * @static
                 * @param {akkaserverless.component.crdt.IORMapEntryDelta=} [properties] Properties to set
                 * @returns {akkaserverless.component.crdt.ORMapEntryDelta} ORMapEntryDelta instance
                 */
                ORMapEntryDelta.create = function create(properties) {
                    return new ORMapEntryDelta(properties);
                };

                /**
                 * Encodes the specified ORMapEntryDelta message. Does not implicitly {@link akkaserverless.component.crdt.ORMapEntryDelta.verify|verify} messages.
                 * @function encode
                 * @memberof akkaserverless.component.crdt.ORMapEntryDelta
                 * @static
                 * @param {akkaserverless.component.crdt.IORMapEntryDelta} message ORMapEntryDelta message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ORMapEntryDelta.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                        $root.google.protobuf.Any.encode(message.key, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.delta != null && Object.hasOwnProperty.call(message, "delta"))
                        $root.akkaserverless.component.crdt.CrdtDelta.encode(message.delta, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified ORMapEntryDelta message, length delimited. Does not implicitly {@link akkaserverless.component.crdt.ORMapEntryDelta.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof akkaserverless.component.crdt.ORMapEntryDelta
                 * @static
                 * @param {akkaserverless.component.crdt.IORMapEntryDelta} message ORMapEntryDelta message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ORMapEntryDelta.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ORMapEntryDelta message from the specified reader or buffer.
                 * @function decode
                 * @memberof akkaserverless.component.crdt.ORMapEntryDelta
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {akkaserverless.component.crdt.ORMapEntryDelta} ORMapEntryDelta
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ORMapEntryDelta.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.crdt.ORMapEntryDelta();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.key = $root.google.protobuf.Any.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.delta = $root.akkaserverless.component.crdt.CrdtDelta.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ORMapEntryDelta message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof akkaserverless.component.crdt.ORMapEntryDelta
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {akkaserverless.component.crdt.ORMapEntryDelta} ORMapEntryDelta
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ORMapEntryDelta.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ORMapEntryDelta message.
                 * @function verify
                 * @memberof akkaserverless.component.crdt.ORMapEntryDelta
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ORMapEntryDelta.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.key != null && message.hasOwnProperty("key")) {
                        var error = $root.google.protobuf.Any.verify(message.key);
                        if (error)
                            return "key." + error;
                    }
                    if (message.delta != null && message.hasOwnProperty("delta")) {
                        var error = $root.akkaserverless.component.crdt.CrdtDelta.verify(message.delta);
                        if (error)
                            return "delta." + error;
                    }
                    return null;
                };

                /**
                 * Creates a ORMapEntryDelta message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof akkaserverless.component.crdt.ORMapEntryDelta
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {akkaserverless.component.crdt.ORMapEntryDelta} ORMapEntryDelta
                 */
                ORMapEntryDelta.fromObject = function fromObject(object) {
                    if (object instanceof $root.akkaserverless.component.crdt.ORMapEntryDelta)
                        return object;
                    var message = new $root.akkaserverless.component.crdt.ORMapEntryDelta();
                    if (object.key != null) {
                        if (typeof object.key !== "object")
                            throw TypeError(".akkaserverless.component.crdt.ORMapEntryDelta.key: object expected");
                        message.key = $root.google.protobuf.Any.fromObject(object.key);
                    }
                    if (object.delta != null) {
                        if (typeof object.delta !== "object")
                            throw TypeError(".akkaserverless.component.crdt.ORMapEntryDelta.delta: object expected");
                        message.delta = $root.akkaserverless.component.crdt.CrdtDelta.fromObject(object.delta);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a ORMapEntryDelta message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof akkaserverless.component.crdt.ORMapEntryDelta
                 * @static
                 * @param {akkaserverless.component.crdt.ORMapEntryDelta} message ORMapEntryDelta
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ORMapEntryDelta.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.key = null;
                        object.delta = null;
                    }
                    if (message.key != null && message.hasOwnProperty("key"))
                        object.key = $root.google.protobuf.Any.toObject(message.key, options);
                    if (message.delta != null && message.hasOwnProperty("delta"))
                        object.delta = $root.akkaserverless.component.crdt.CrdtDelta.toObject(message.delta, options);
                    return object;
                };

                /**
                 * Converts this ORMapEntryDelta to JSON.
                 * @function toJSON
                 * @memberof akkaserverless.component.crdt.ORMapEntryDelta
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ORMapEntryDelta.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ORMapEntryDelta;
            })();

            crdt.VoteDelta = (function() {

                /**
                 * Properties of a VoteDelta.
                 * @memberof akkaserverless.component.crdt
                 * @interface IVoteDelta
                 * @property {boolean|null} [selfVote] VoteDelta selfVote
                 * @property {number|null} [votesFor] VoteDelta votesFor
                 * @property {number|null} [totalVoters] VoteDelta totalVoters
                 */

                /**
                 * Constructs a new VoteDelta.
                 * @memberof akkaserverless.component.crdt
                 * @classdesc Represents a VoteDelta.
                 * @implements IVoteDelta
                 * @constructor
                 * @param {akkaserverless.component.crdt.IVoteDelta=} [properties] Properties to set
                 */
                function VoteDelta(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * VoteDelta selfVote.
                 * @member {boolean} selfVote
                 * @memberof akkaserverless.component.crdt.VoteDelta
                 * @instance
                 */
                VoteDelta.prototype.selfVote = false;

                /**
                 * VoteDelta votesFor.
                 * @member {number} votesFor
                 * @memberof akkaserverless.component.crdt.VoteDelta
                 * @instance
                 */
                VoteDelta.prototype.votesFor = 0;

                /**
                 * VoteDelta totalVoters.
                 * @member {number} totalVoters
                 * @memberof akkaserverless.component.crdt.VoteDelta
                 * @instance
                 */
                VoteDelta.prototype.totalVoters = 0;

                /**
                 * Creates a new VoteDelta instance using the specified properties.
                 * @function create
                 * @memberof akkaserverless.component.crdt.VoteDelta
                 * @static
                 * @param {akkaserverless.component.crdt.IVoteDelta=} [properties] Properties to set
                 * @returns {akkaserverless.component.crdt.VoteDelta} VoteDelta instance
                 */
                VoteDelta.create = function create(properties) {
                    return new VoteDelta(properties);
                };

                /**
                 * Encodes the specified VoteDelta message. Does not implicitly {@link akkaserverless.component.crdt.VoteDelta.verify|verify} messages.
                 * @function encode
                 * @memberof akkaserverless.component.crdt.VoteDelta
                 * @static
                 * @param {akkaserverless.component.crdt.IVoteDelta} message VoteDelta message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                VoteDelta.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.selfVote != null && Object.hasOwnProperty.call(message, "selfVote"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.selfVote);
                    if (message.votesFor != null && Object.hasOwnProperty.call(message, "votesFor"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.votesFor);
                    if (message.totalVoters != null && Object.hasOwnProperty.call(message, "totalVoters"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.totalVoters);
                    return writer;
                };

                /**
                 * Encodes the specified VoteDelta message, length delimited. Does not implicitly {@link akkaserverless.component.crdt.VoteDelta.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof akkaserverless.component.crdt.VoteDelta
                 * @static
                 * @param {akkaserverless.component.crdt.IVoteDelta} message VoteDelta message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                VoteDelta.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a VoteDelta message from the specified reader or buffer.
                 * @function decode
                 * @memberof akkaserverless.component.crdt.VoteDelta
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {akkaserverless.component.crdt.VoteDelta} VoteDelta
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                VoteDelta.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.crdt.VoteDelta();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.selfVote = reader.bool();
                            break;
                        case 2:
                            message.votesFor = reader.int32();
                            break;
                        case 3:
                            message.totalVoters = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a VoteDelta message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof akkaserverless.component.crdt.VoteDelta
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {akkaserverless.component.crdt.VoteDelta} VoteDelta
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                VoteDelta.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a VoteDelta message.
                 * @function verify
                 * @memberof akkaserverless.component.crdt.VoteDelta
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                VoteDelta.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.selfVote != null && message.hasOwnProperty("selfVote"))
                        if (typeof message.selfVote !== "boolean")
                            return "selfVote: boolean expected";
                    if (message.votesFor != null && message.hasOwnProperty("votesFor"))
                        if (!$util.isInteger(message.votesFor))
                            return "votesFor: integer expected";
                    if (message.totalVoters != null && message.hasOwnProperty("totalVoters"))
                        if (!$util.isInteger(message.totalVoters))
                            return "totalVoters: integer expected";
                    return null;
                };

                /**
                 * Creates a VoteDelta message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof akkaserverless.component.crdt.VoteDelta
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {akkaserverless.component.crdt.VoteDelta} VoteDelta
                 */
                VoteDelta.fromObject = function fromObject(object) {
                    if (object instanceof $root.akkaserverless.component.crdt.VoteDelta)
                        return object;
                    var message = new $root.akkaserverless.component.crdt.VoteDelta();
                    if (object.selfVote != null)
                        message.selfVote = Boolean(object.selfVote);
                    if (object.votesFor != null)
                        message.votesFor = object.votesFor | 0;
                    if (object.totalVoters != null)
                        message.totalVoters = object.totalVoters | 0;
                    return message;
                };

                /**
                 * Creates a plain object from a VoteDelta message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof akkaserverless.component.crdt.VoteDelta
                 * @static
                 * @param {akkaserverless.component.crdt.VoteDelta} message VoteDelta
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                VoteDelta.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.selfVote = false;
                        object.votesFor = 0;
                        object.totalVoters = 0;
                    }
                    if (message.selfVote != null && message.hasOwnProperty("selfVote"))
                        object.selfVote = message.selfVote;
                    if (message.votesFor != null && message.hasOwnProperty("votesFor"))
                        object.votesFor = message.votesFor;
                    if (message.totalVoters != null && message.hasOwnProperty("totalVoters"))
                        object.totalVoters = message.totalVoters;
                    return object;
                };

                /**
                 * Converts this VoteDelta to JSON.
                 * @function toJSON
                 * @memberof akkaserverless.component.crdt.VoteDelta
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                VoteDelta.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return VoteDelta;
            })();

            crdt.CrdtInit = (function() {

                /**
                 * Properties of a CrdtInit.
                 * @memberof akkaserverless.component.crdt
                 * @interface ICrdtInit
                 * @property {string|null} [serviceName] CrdtInit serviceName
                 * @property {string|null} [entityId] CrdtInit entityId
                 * @property {akkaserverless.component.crdt.ICrdtDelta|null} [delta] CrdtInit delta
                 */

                /**
                 * Constructs a new CrdtInit.
                 * @memberof akkaserverless.component.crdt
                 * @classdesc Represents a CrdtInit.
                 * @implements ICrdtInit
                 * @constructor
                 * @param {akkaserverless.component.crdt.ICrdtInit=} [properties] Properties to set
                 */
                function CrdtInit(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CrdtInit serviceName.
                 * @member {string} serviceName
                 * @memberof akkaserverless.component.crdt.CrdtInit
                 * @instance
                 */
                CrdtInit.prototype.serviceName = "";

                /**
                 * CrdtInit entityId.
                 * @member {string} entityId
                 * @memberof akkaserverless.component.crdt.CrdtInit
                 * @instance
                 */
                CrdtInit.prototype.entityId = "";

                /**
                 * CrdtInit delta.
                 * @member {akkaserverless.component.crdt.ICrdtDelta|null|undefined} delta
                 * @memberof akkaserverless.component.crdt.CrdtInit
                 * @instance
                 */
                CrdtInit.prototype.delta = null;

                /**
                 * Creates a new CrdtInit instance using the specified properties.
                 * @function create
                 * @memberof akkaserverless.component.crdt.CrdtInit
                 * @static
                 * @param {akkaserverless.component.crdt.ICrdtInit=} [properties] Properties to set
                 * @returns {akkaserverless.component.crdt.CrdtInit} CrdtInit instance
                 */
                CrdtInit.create = function create(properties) {
                    return new CrdtInit(properties);
                };

                /**
                 * Encodes the specified CrdtInit message. Does not implicitly {@link akkaserverless.component.crdt.CrdtInit.verify|verify} messages.
                 * @function encode
                 * @memberof akkaserverless.component.crdt.CrdtInit
                 * @static
                 * @param {akkaserverless.component.crdt.ICrdtInit} message CrdtInit message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CrdtInit.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.serviceName != null && Object.hasOwnProperty.call(message, "serviceName"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.serviceName);
                    if (message.entityId != null && Object.hasOwnProperty.call(message, "entityId"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.entityId);
                    if (message.delta != null && Object.hasOwnProperty.call(message, "delta"))
                        $root.akkaserverless.component.crdt.CrdtDelta.encode(message.delta, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified CrdtInit message, length delimited. Does not implicitly {@link akkaserverless.component.crdt.CrdtInit.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof akkaserverless.component.crdt.CrdtInit
                 * @static
                 * @param {akkaserverless.component.crdt.ICrdtInit} message CrdtInit message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CrdtInit.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a CrdtInit message from the specified reader or buffer.
                 * @function decode
                 * @memberof akkaserverless.component.crdt.CrdtInit
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {akkaserverless.component.crdt.CrdtInit} CrdtInit
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CrdtInit.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.crdt.CrdtInit();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.serviceName = reader.string();
                            break;
                        case 2:
                            message.entityId = reader.string();
                            break;
                        case 3:
                            message.delta = $root.akkaserverless.component.crdt.CrdtDelta.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a CrdtInit message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof akkaserverless.component.crdt.CrdtInit
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {akkaserverless.component.crdt.CrdtInit} CrdtInit
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CrdtInit.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a CrdtInit message.
                 * @function verify
                 * @memberof akkaserverless.component.crdt.CrdtInit
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CrdtInit.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                        if (!$util.isString(message.serviceName))
                            return "serviceName: string expected";
                    if (message.entityId != null && message.hasOwnProperty("entityId"))
                        if (!$util.isString(message.entityId))
                            return "entityId: string expected";
                    if (message.delta != null && message.hasOwnProperty("delta")) {
                        var error = $root.akkaserverless.component.crdt.CrdtDelta.verify(message.delta);
                        if (error)
                            return "delta." + error;
                    }
                    return null;
                };

                /**
                 * Creates a CrdtInit message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof akkaserverless.component.crdt.CrdtInit
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {akkaserverless.component.crdt.CrdtInit} CrdtInit
                 */
                CrdtInit.fromObject = function fromObject(object) {
                    if (object instanceof $root.akkaserverless.component.crdt.CrdtInit)
                        return object;
                    var message = new $root.akkaserverless.component.crdt.CrdtInit();
                    if (object.serviceName != null)
                        message.serviceName = String(object.serviceName);
                    if (object.entityId != null)
                        message.entityId = String(object.entityId);
                    if (object.delta != null) {
                        if (typeof object.delta !== "object")
                            throw TypeError(".akkaserverless.component.crdt.CrdtInit.delta: object expected");
                        message.delta = $root.akkaserverless.component.crdt.CrdtDelta.fromObject(object.delta);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a CrdtInit message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof akkaserverless.component.crdt.CrdtInit
                 * @static
                 * @param {akkaserverless.component.crdt.CrdtInit} message CrdtInit
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CrdtInit.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.serviceName = "";
                        object.entityId = "";
                        object.delta = null;
                    }
                    if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                        object.serviceName = message.serviceName;
                    if (message.entityId != null && message.hasOwnProperty("entityId"))
                        object.entityId = message.entityId;
                    if (message.delta != null && message.hasOwnProperty("delta"))
                        object.delta = $root.akkaserverless.component.crdt.CrdtDelta.toObject(message.delta, options);
                    return object;
                };

                /**
                 * Converts this CrdtInit to JSON.
                 * @function toJSON
                 * @memberof akkaserverless.component.crdt.CrdtInit
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CrdtInit.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return CrdtInit;
            })();

            crdt.CrdtDelete = (function() {

                /**
                 * Properties of a CrdtDelete.
                 * @memberof akkaserverless.component.crdt
                 * @interface ICrdtDelete
                 */

                /**
                 * Constructs a new CrdtDelete.
                 * @memberof akkaserverless.component.crdt
                 * @classdesc Represents a CrdtDelete.
                 * @implements ICrdtDelete
                 * @constructor
                 * @param {akkaserverless.component.crdt.ICrdtDelete=} [properties] Properties to set
                 */
                function CrdtDelete(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Creates a new CrdtDelete instance using the specified properties.
                 * @function create
                 * @memberof akkaserverless.component.crdt.CrdtDelete
                 * @static
                 * @param {akkaserverless.component.crdt.ICrdtDelete=} [properties] Properties to set
                 * @returns {akkaserverless.component.crdt.CrdtDelete} CrdtDelete instance
                 */
                CrdtDelete.create = function create(properties) {
                    return new CrdtDelete(properties);
                };

                /**
                 * Encodes the specified CrdtDelete message. Does not implicitly {@link akkaserverless.component.crdt.CrdtDelete.verify|verify} messages.
                 * @function encode
                 * @memberof akkaserverless.component.crdt.CrdtDelete
                 * @static
                 * @param {akkaserverless.component.crdt.ICrdtDelete} message CrdtDelete message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CrdtDelete.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };

                /**
                 * Encodes the specified CrdtDelete message, length delimited. Does not implicitly {@link akkaserverless.component.crdt.CrdtDelete.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof akkaserverless.component.crdt.CrdtDelete
                 * @static
                 * @param {akkaserverless.component.crdt.ICrdtDelete} message CrdtDelete message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CrdtDelete.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a CrdtDelete message from the specified reader or buffer.
                 * @function decode
                 * @memberof akkaserverless.component.crdt.CrdtDelete
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {akkaserverless.component.crdt.CrdtDelete} CrdtDelete
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CrdtDelete.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.crdt.CrdtDelete();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a CrdtDelete message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof akkaserverless.component.crdt.CrdtDelete
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {akkaserverless.component.crdt.CrdtDelete} CrdtDelete
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CrdtDelete.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a CrdtDelete message.
                 * @function verify
                 * @memberof akkaserverless.component.crdt.CrdtDelete
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CrdtDelete.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };

                /**
                 * Creates a CrdtDelete message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof akkaserverless.component.crdt.CrdtDelete
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {akkaserverless.component.crdt.CrdtDelete} CrdtDelete
                 */
                CrdtDelete.fromObject = function fromObject(object) {
                    if (object instanceof $root.akkaserverless.component.crdt.CrdtDelete)
                        return object;
                    return new $root.akkaserverless.component.crdt.CrdtDelete();
                };

                /**
                 * Creates a plain object from a CrdtDelete message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof akkaserverless.component.crdt.CrdtDelete
                 * @static
                 * @param {akkaserverless.component.crdt.CrdtDelete} message CrdtDelete
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CrdtDelete.toObject = function toObject() {
                    return {};
                };

                /**
                 * Converts this CrdtDelete to JSON.
                 * @function toJSON
                 * @memberof akkaserverless.component.crdt.CrdtDelete
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CrdtDelete.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return CrdtDelete;
            })();

            crdt.CrdtReply = (function() {

                /**
                 * Properties of a CrdtReply.
                 * @memberof akkaserverless.component.crdt
                 * @interface ICrdtReply
                 * @property {number|Long|null} [commandId] CrdtReply commandId
                 * @property {akkaserverless.component.IClientAction|null} [clientAction] CrdtReply clientAction
                 * @property {Array.<akkaserverless.component.ISideEffect>|null} [sideEffects] CrdtReply sideEffects
                 * @property {akkaserverless.component.crdt.ICrdtStateAction|null} [stateAction] CrdtReply stateAction
                 * @property {boolean|null} [streamed] CrdtReply streamed
                 */

                /**
                 * Constructs a new CrdtReply.
                 * @memberof akkaserverless.component.crdt
                 * @classdesc Represents a CrdtReply.
                 * @implements ICrdtReply
                 * @constructor
                 * @param {akkaserverless.component.crdt.ICrdtReply=} [properties] Properties to set
                 */
                function CrdtReply(properties) {
                    this.sideEffects = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CrdtReply commandId.
                 * @member {number|Long} commandId
                 * @memberof akkaserverless.component.crdt.CrdtReply
                 * @instance
                 */
                CrdtReply.prototype.commandId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * CrdtReply clientAction.
                 * @member {akkaserverless.component.IClientAction|null|undefined} clientAction
                 * @memberof akkaserverless.component.crdt.CrdtReply
                 * @instance
                 */
                CrdtReply.prototype.clientAction = null;

                /**
                 * CrdtReply sideEffects.
                 * @member {Array.<akkaserverless.component.ISideEffect>} sideEffects
                 * @memberof akkaserverless.component.crdt.CrdtReply
                 * @instance
                 */
                CrdtReply.prototype.sideEffects = $util.emptyArray;

                /**
                 * CrdtReply stateAction.
                 * @member {akkaserverless.component.crdt.ICrdtStateAction|null|undefined} stateAction
                 * @memberof akkaserverless.component.crdt.CrdtReply
                 * @instance
                 */
                CrdtReply.prototype.stateAction = null;

                /**
                 * CrdtReply streamed.
                 * @member {boolean} streamed
                 * @memberof akkaserverless.component.crdt.CrdtReply
                 * @instance
                 */
                CrdtReply.prototype.streamed = false;

                /**
                 * Creates a new CrdtReply instance using the specified properties.
                 * @function create
                 * @memberof akkaserverless.component.crdt.CrdtReply
                 * @static
                 * @param {akkaserverless.component.crdt.ICrdtReply=} [properties] Properties to set
                 * @returns {akkaserverless.component.crdt.CrdtReply} CrdtReply instance
                 */
                CrdtReply.create = function create(properties) {
                    return new CrdtReply(properties);
                };

                /**
                 * Encodes the specified CrdtReply message. Does not implicitly {@link akkaserverless.component.crdt.CrdtReply.verify|verify} messages.
                 * @function encode
                 * @memberof akkaserverless.component.crdt.CrdtReply
                 * @static
                 * @param {akkaserverless.component.crdt.ICrdtReply} message CrdtReply message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CrdtReply.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commandId != null && Object.hasOwnProperty.call(message, "commandId"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.commandId);
                    if (message.clientAction != null && Object.hasOwnProperty.call(message, "clientAction"))
                        $root.akkaserverless.component.ClientAction.encode(message.clientAction, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.sideEffects != null && message.sideEffects.length)
                        for (var i = 0; i < message.sideEffects.length; ++i)
                            $root.akkaserverless.component.SideEffect.encode(message.sideEffects[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.stateAction != null && Object.hasOwnProperty.call(message, "stateAction"))
                        $root.akkaserverless.component.crdt.CrdtStateAction.encode(message.stateAction, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.streamed != null && Object.hasOwnProperty.call(message, "streamed"))
                        writer.uint32(/* id 6, wireType 0 =*/48).bool(message.streamed);
                    return writer;
                };

                /**
                 * Encodes the specified CrdtReply message, length delimited. Does not implicitly {@link akkaserverless.component.crdt.CrdtReply.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof akkaserverless.component.crdt.CrdtReply
                 * @static
                 * @param {akkaserverless.component.crdt.ICrdtReply} message CrdtReply message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CrdtReply.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a CrdtReply message from the specified reader or buffer.
                 * @function decode
                 * @memberof akkaserverless.component.crdt.CrdtReply
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {akkaserverless.component.crdt.CrdtReply} CrdtReply
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CrdtReply.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.crdt.CrdtReply();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commandId = reader.int64();
                            break;
                        case 2:
                            message.clientAction = $root.akkaserverless.component.ClientAction.decode(reader, reader.uint32());
                            break;
                        case 4:
                            if (!(message.sideEffects && message.sideEffects.length))
                                message.sideEffects = [];
                            message.sideEffects.push($root.akkaserverless.component.SideEffect.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            message.stateAction = $root.akkaserverless.component.crdt.CrdtStateAction.decode(reader, reader.uint32());
                            break;
                        case 6:
                            message.streamed = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a CrdtReply message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof akkaserverless.component.crdt.CrdtReply
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {akkaserverless.component.crdt.CrdtReply} CrdtReply
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CrdtReply.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a CrdtReply message.
                 * @function verify
                 * @memberof akkaserverless.component.crdt.CrdtReply
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CrdtReply.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commandId != null && message.hasOwnProperty("commandId"))
                        if (!$util.isInteger(message.commandId) && !(message.commandId && $util.isInteger(message.commandId.low) && $util.isInteger(message.commandId.high)))
                            return "commandId: integer|Long expected";
                    if (message.clientAction != null && message.hasOwnProperty("clientAction")) {
                        var error = $root.akkaserverless.component.ClientAction.verify(message.clientAction);
                        if (error)
                            return "clientAction." + error;
                    }
                    if (message.sideEffects != null && message.hasOwnProperty("sideEffects")) {
                        if (!Array.isArray(message.sideEffects))
                            return "sideEffects: array expected";
                        for (var i = 0; i < message.sideEffects.length; ++i) {
                            var error = $root.akkaserverless.component.SideEffect.verify(message.sideEffects[i]);
                            if (error)
                                return "sideEffects." + error;
                        }
                    }
                    if (message.stateAction != null && message.hasOwnProperty("stateAction")) {
                        var error = $root.akkaserverless.component.crdt.CrdtStateAction.verify(message.stateAction);
                        if (error)
                            return "stateAction." + error;
                    }
                    if (message.streamed != null && message.hasOwnProperty("streamed"))
                        if (typeof message.streamed !== "boolean")
                            return "streamed: boolean expected";
                    return null;
                };

                /**
                 * Creates a CrdtReply message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof akkaserverless.component.crdt.CrdtReply
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {akkaserverless.component.crdt.CrdtReply} CrdtReply
                 */
                CrdtReply.fromObject = function fromObject(object) {
                    if (object instanceof $root.akkaserverless.component.crdt.CrdtReply)
                        return object;
                    var message = new $root.akkaserverless.component.crdt.CrdtReply();
                    if (object.commandId != null)
                        if ($util.Long)
                            (message.commandId = $util.Long.fromValue(object.commandId)).unsigned = false;
                        else if (typeof object.commandId === "string")
                            message.commandId = parseInt(object.commandId, 10);
                        else if (typeof object.commandId === "number")
                            message.commandId = object.commandId;
                        else if (typeof object.commandId === "object")
                            message.commandId = new $util.LongBits(object.commandId.low >>> 0, object.commandId.high >>> 0).toNumber();
                    if (object.clientAction != null) {
                        if (typeof object.clientAction !== "object")
                            throw TypeError(".akkaserverless.component.crdt.CrdtReply.clientAction: object expected");
                        message.clientAction = $root.akkaserverless.component.ClientAction.fromObject(object.clientAction);
                    }
                    if (object.sideEffects) {
                        if (!Array.isArray(object.sideEffects))
                            throw TypeError(".akkaserverless.component.crdt.CrdtReply.sideEffects: array expected");
                        message.sideEffects = [];
                        for (var i = 0; i < object.sideEffects.length; ++i) {
                            if (typeof object.sideEffects[i] !== "object")
                                throw TypeError(".akkaserverless.component.crdt.CrdtReply.sideEffects: object expected");
                            message.sideEffects[i] = $root.akkaserverless.component.SideEffect.fromObject(object.sideEffects[i]);
                        }
                    }
                    if (object.stateAction != null) {
                        if (typeof object.stateAction !== "object")
                            throw TypeError(".akkaserverless.component.crdt.CrdtReply.stateAction: object expected");
                        message.stateAction = $root.akkaserverless.component.crdt.CrdtStateAction.fromObject(object.stateAction);
                    }
                    if (object.streamed != null)
                        message.streamed = Boolean(object.streamed);
                    return message;
                };

                /**
                 * Creates a plain object from a CrdtReply message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof akkaserverless.component.crdt.CrdtReply
                 * @static
                 * @param {akkaserverless.component.crdt.CrdtReply} message CrdtReply
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CrdtReply.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.sideEffects = [];
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.commandId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.commandId = options.longs === String ? "0" : 0;
                        object.clientAction = null;
                        object.stateAction = null;
                        object.streamed = false;
                    }
                    if (message.commandId != null && message.hasOwnProperty("commandId"))
                        if (typeof message.commandId === "number")
                            object.commandId = options.longs === String ? String(message.commandId) : message.commandId;
                        else
                            object.commandId = options.longs === String ? $util.Long.prototype.toString.call(message.commandId) : options.longs === Number ? new $util.LongBits(message.commandId.low >>> 0, message.commandId.high >>> 0).toNumber() : message.commandId;
                    if (message.clientAction != null && message.hasOwnProperty("clientAction"))
                        object.clientAction = $root.akkaserverless.component.ClientAction.toObject(message.clientAction, options);
                    if (message.sideEffects && message.sideEffects.length) {
                        object.sideEffects = [];
                        for (var j = 0; j < message.sideEffects.length; ++j)
                            object.sideEffects[j] = $root.akkaserverless.component.SideEffect.toObject(message.sideEffects[j], options);
                    }
                    if (message.stateAction != null && message.hasOwnProperty("stateAction"))
                        object.stateAction = $root.akkaserverless.component.crdt.CrdtStateAction.toObject(message.stateAction, options);
                    if (message.streamed != null && message.hasOwnProperty("streamed"))
                        object.streamed = message.streamed;
                    return object;
                };

                /**
                 * Converts this CrdtReply to JSON.
                 * @function toJSON
                 * @memberof akkaserverless.component.crdt.CrdtReply
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CrdtReply.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return CrdtReply;
            })();

            crdt.CrdtStateAction = (function() {

                /**
                 * Properties of a CrdtStateAction.
                 * @memberof akkaserverless.component.crdt
                 * @interface ICrdtStateAction
                 * @property {akkaserverless.component.crdt.ICrdtDelta|null} [update] CrdtStateAction update
                 * @property {akkaserverless.component.crdt.ICrdtDelete|null} ["delete"] CrdtStateAction delete
                 * @property {akkaserverless.component.crdt.CrdtWriteConsistency|null} [writeConsistency] CrdtStateAction writeConsistency
                 */

                /**
                 * Constructs a new CrdtStateAction.
                 * @memberof akkaserverless.component.crdt
                 * @classdesc Represents a CrdtStateAction.
                 * @implements ICrdtStateAction
                 * @constructor
                 * @param {akkaserverless.component.crdt.ICrdtStateAction=} [properties] Properties to set
                 */
                function CrdtStateAction(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CrdtStateAction update.
                 * @member {akkaserverless.component.crdt.ICrdtDelta|null|undefined} update
                 * @memberof akkaserverless.component.crdt.CrdtStateAction
                 * @instance
                 */
                CrdtStateAction.prototype.update = null;

                /**
                 * CrdtStateAction delete.
                 * @member {akkaserverless.component.crdt.ICrdtDelete|null|undefined} delete
                 * @memberof akkaserverless.component.crdt.CrdtStateAction
                 * @instance
                 */
                CrdtStateAction.prototype["delete"] = null;

                /**
                 * CrdtStateAction writeConsistency.
                 * @member {akkaserverless.component.crdt.CrdtWriteConsistency} writeConsistency
                 * @memberof akkaserverless.component.crdt.CrdtStateAction
                 * @instance
                 */
                CrdtStateAction.prototype.writeConsistency = 0;

                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;

                /**
                 * CrdtStateAction action.
                 * @member {"update"|"delete"|undefined} action
                 * @memberof akkaserverless.component.crdt.CrdtStateAction
                 * @instance
                 */
                Object.defineProperty(CrdtStateAction.prototype, "action", {
                    get: $util.oneOfGetter($oneOfFields = ["update", "delete"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Creates a new CrdtStateAction instance using the specified properties.
                 * @function create
                 * @memberof akkaserverless.component.crdt.CrdtStateAction
                 * @static
                 * @param {akkaserverless.component.crdt.ICrdtStateAction=} [properties] Properties to set
                 * @returns {akkaserverless.component.crdt.CrdtStateAction} CrdtStateAction instance
                 */
                CrdtStateAction.create = function create(properties) {
                    return new CrdtStateAction(properties);
                };

                /**
                 * Encodes the specified CrdtStateAction message. Does not implicitly {@link akkaserverless.component.crdt.CrdtStateAction.verify|verify} messages.
                 * @function encode
                 * @memberof akkaserverless.component.crdt.CrdtStateAction
                 * @static
                 * @param {akkaserverless.component.crdt.ICrdtStateAction} message CrdtStateAction message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CrdtStateAction.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.update != null && Object.hasOwnProperty.call(message, "update"))
                        $root.akkaserverless.component.crdt.CrdtDelta.encode(message.update, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message["delete"] != null && Object.hasOwnProperty.call(message, "delete"))
                        $root.akkaserverless.component.crdt.CrdtDelete.encode(message["delete"], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.writeConsistency != null && Object.hasOwnProperty.call(message, "writeConsistency"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.writeConsistency);
                    return writer;
                };

                /**
                 * Encodes the specified CrdtStateAction message, length delimited. Does not implicitly {@link akkaserverless.component.crdt.CrdtStateAction.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof akkaserverless.component.crdt.CrdtStateAction
                 * @static
                 * @param {akkaserverless.component.crdt.ICrdtStateAction} message CrdtStateAction message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CrdtStateAction.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a CrdtStateAction message from the specified reader or buffer.
                 * @function decode
                 * @memberof akkaserverless.component.crdt.CrdtStateAction
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {akkaserverless.component.crdt.CrdtStateAction} CrdtStateAction
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CrdtStateAction.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.crdt.CrdtStateAction();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.update = $root.akkaserverless.component.crdt.CrdtDelta.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message["delete"] = $root.akkaserverless.component.crdt.CrdtDelete.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.writeConsistency = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a CrdtStateAction message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof akkaserverless.component.crdt.CrdtStateAction
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {akkaserverless.component.crdt.CrdtStateAction} CrdtStateAction
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CrdtStateAction.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a CrdtStateAction message.
                 * @function verify
                 * @memberof akkaserverless.component.crdt.CrdtStateAction
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CrdtStateAction.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.update != null && message.hasOwnProperty("update")) {
                        properties.action = 1;
                        {
                            var error = $root.akkaserverless.component.crdt.CrdtDelta.verify(message.update);
                            if (error)
                                return "update." + error;
                        }
                    }
                    if (message["delete"] != null && message.hasOwnProperty("delete")) {
                        if (properties.action === 1)
                            return "action: multiple values";
                        properties.action = 1;
                        {
                            var error = $root.akkaserverless.component.crdt.CrdtDelete.verify(message["delete"]);
                            if (error)
                                return "delete." + error;
                        }
                    }
                    if (message.writeConsistency != null && message.hasOwnProperty("writeConsistency"))
                        switch (message.writeConsistency) {
                        default:
                            return "writeConsistency: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    return null;
                };

                /**
                 * Creates a CrdtStateAction message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof akkaserverless.component.crdt.CrdtStateAction
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {akkaserverless.component.crdt.CrdtStateAction} CrdtStateAction
                 */
                CrdtStateAction.fromObject = function fromObject(object) {
                    if (object instanceof $root.akkaserverless.component.crdt.CrdtStateAction)
                        return object;
                    var message = new $root.akkaserverless.component.crdt.CrdtStateAction();
                    if (object.update != null) {
                        if (typeof object.update !== "object")
                            throw TypeError(".akkaserverless.component.crdt.CrdtStateAction.update: object expected");
                        message.update = $root.akkaserverless.component.crdt.CrdtDelta.fromObject(object.update);
                    }
                    if (object["delete"] != null) {
                        if (typeof object["delete"] !== "object")
                            throw TypeError(".akkaserverless.component.crdt.CrdtStateAction.delete: object expected");
                        message["delete"] = $root.akkaserverless.component.crdt.CrdtDelete.fromObject(object["delete"]);
                    }
                    switch (object.writeConsistency) {
                    case "CRDT_WRITE_CONSISTENCY_LOCAL_UNSPECIFIED":
                    case 0:
                        message.writeConsistency = 0;
                        break;
                    case "CRDT_WRITE_CONSISTENCY_MAJORITY":
                    case 1:
                        message.writeConsistency = 1;
                        break;
                    case "CRDT_WRITE_CONSISTENCY_ALL":
                    case 2:
                        message.writeConsistency = 2;
                        break;
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a CrdtStateAction message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof akkaserverless.component.crdt.CrdtStateAction
                 * @static
                 * @param {akkaserverless.component.crdt.CrdtStateAction} message CrdtStateAction
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CrdtStateAction.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.writeConsistency = options.enums === String ? "CRDT_WRITE_CONSISTENCY_LOCAL_UNSPECIFIED" : 0;
                    if (message.update != null && message.hasOwnProperty("update")) {
                        object.update = $root.akkaserverless.component.crdt.CrdtDelta.toObject(message.update, options);
                        if (options.oneofs)
                            object.action = "update";
                    }
                    if (message["delete"] != null && message.hasOwnProperty("delete")) {
                        object["delete"] = $root.akkaserverless.component.crdt.CrdtDelete.toObject(message["delete"], options);
                        if (options.oneofs)
                            object.action = "delete";
                    }
                    if (message.writeConsistency != null && message.hasOwnProperty("writeConsistency"))
                        object.writeConsistency = options.enums === String ? $root.akkaserverless.component.crdt.CrdtWriteConsistency[message.writeConsistency] : message.writeConsistency;
                    return object;
                };

                /**
                 * Converts this CrdtStateAction to JSON.
                 * @function toJSON
                 * @memberof akkaserverless.component.crdt.CrdtStateAction
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CrdtStateAction.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return CrdtStateAction;
            })();

            crdt.CrdtStreamedMessage = (function() {

                /**
                 * Properties of a CrdtStreamedMessage.
                 * @memberof akkaserverless.component.crdt
                 * @interface ICrdtStreamedMessage
                 * @property {number|Long|null} [commandId] CrdtStreamedMessage commandId
                 * @property {akkaserverless.component.IClientAction|null} [clientAction] CrdtStreamedMessage clientAction
                 * @property {Array.<akkaserverless.component.ISideEffect>|null} [sideEffects] CrdtStreamedMessage sideEffects
                 * @property {boolean|null} [endStream] CrdtStreamedMessage endStream
                 */

                /**
                 * Constructs a new CrdtStreamedMessage.
                 * @memberof akkaserverless.component.crdt
                 * @classdesc Represents a CrdtStreamedMessage.
                 * @implements ICrdtStreamedMessage
                 * @constructor
                 * @param {akkaserverless.component.crdt.ICrdtStreamedMessage=} [properties] Properties to set
                 */
                function CrdtStreamedMessage(properties) {
                    this.sideEffects = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CrdtStreamedMessage commandId.
                 * @member {number|Long} commandId
                 * @memberof akkaserverless.component.crdt.CrdtStreamedMessage
                 * @instance
                 */
                CrdtStreamedMessage.prototype.commandId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * CrdtStreamedMessage clientAction.
                 * @member {akkaserverless.component.IClientAction|null|undefined} clientAction
                 * @memberof akkaserverless.component.crdt.CrdtStreamedMessage
                 * @instance
                 */
                CrdtStreamedMessage.prototype.clientAction = null;

                /**
                 * CrdtStreamedMessage sideEffects.
                 * @member {Array.<akkaserverless.component.ISideEffect>} sideEffects
                 * @memberof akkaserverless.component.crdt.CrdtStreamedMessage
                 * @instance
                 */
                CrdtStreamedMessage.prototype.sideEffects = $util.emptyArray;

                /**
                 * CrdtStreamedMessage endStream.
                 * @member {boolean} endStream
                 * @memberof akkaserverless.component.crdt.CrdtStreamedMessage
                 * @instance
                 */
                CrdtStreamedMessage.prototype.endStream = false;

                /**
                 * Creates a new CrdtStreamedMessage instance using the specified properties.
                 * @function create
                 * @memberof akkaserverless.component.crdt.CrdtStreamedMessage
                 * @static
                 * @param {akkaserverless.component.crdt.ICrdtStreamedMessage=} [properties] Properties to set
                 * @returns {akkaserverless.component.crdt.CrdtStreamedMessage} CrdtStreamedMessage instance
                 */
                CrdtStreamedMessage.create = function create(properties) {
                    return new CrdtStreamedMessage(properties);
                };

                /**
                 * Encodes the specified CrdtStreamedMessage message. Does not implicitly {@link akkaserverless.component.crdt.CrdtStreamedMessage.verify|verify} messages.
                 * @function encode
                 * @memberof akkaserverless.component.crdt.CrdtStreamedMessage
                 * @static
                 * @param {akkaserverless.component.crdt.ICrdtStreamedMessage} message CrdtStreamedMessage message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CrdtStreamedMessage.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commandId != null && Object.hasOwnProperty.call(message, "commandId"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.commandId);
                    if (message.clientAction != null && Object.hasOwnProperty.call(message, "clientAction"))
                        $root.akkaserverless.component.ClientAction.encode(message.clientAction, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.sideEffects != null && message.sideEffects.length)
                        for (var i = 0; i < message.sideEffects.length; ++i)
                            $root.akkaserverless.component.SideEffect.encode(message.sideEffects[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.endStream != null && Object.hasOwnProperty.call(message, "endStream"))
                        writer.uint32(/* id 4, wireType 0 =*/32).bool(message.endStream);
                    return writer;
                };

                /**
                 * Encodes the specified CrdtStreamedMessage message, length delimited. Does not implicitly {@link akkaserverless.component.crdt.CrdtStreamedMessage.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof akkaserverless.component.crdt.CrdtStreamedMessage
                 * @static
                 * @param {akkaserverless.component.crdt.ICrdtStreamedMessage} message CrdtStreamedMessage message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CrdtStreamedMessage.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a CrdtStreamedMessage message from the specified reader or buffer.
                 * @function decode
                 * @memberof akkaserverless.component.crdt.CrdtStreamedMessage
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {akkaserverless.component.crdt.CrdtStreamedMessage} CrdtStreamedMessage
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CrdtStreamedMessage.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.crdt.CrdtStreamedMessage();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commandId = reader.int64();
                            break;
                        case 2:
                            message.clientAction = $root.akkaserverless.component.ClientAction.decode(reader, reader.uint32());
                            break;
                        case 3:
                            if (!(message.sideEffects && message.sideEffects.length))
                                message.sideEffects = [];
                            message.sideEffects.push($root.akkaserverless.component.SideEffect.decode(reader, reader.uint32()));
                            break;
                        case 4:
                            message.endStream = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a CrdtStreamedMessage message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof akkaserverless.component.crdt.CrdtStreamedMessage
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {akkaserverless.component.crdt.CrdtStreamedMessage} CrdtStreamedMessage
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CrdtStreamedMessage.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a CrdtStreamedMessage message.
                 * @function verify
                 * @memberof akkaserverless.component.crdt.CrdtStreamedMessage
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CrdtStreamedMessage.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commandId != null && message.hasOwnProperty("commandId"))
                        if (!$util.isInteger(message.commandId) && !(message.commandId && $util.isInteger(message.commandId.low) && $util.isInteger(message.commandId.high)))
                            return "commandId: integer|Long expected";
                    if (message.clientAction != null && message.hasOwnProperty("clientAction")) {
                        var error = $root.akkaserverless.component.ClientAction.verify(message.clientAction);
                        if (error)
                            return "clientAction." + error;
                    }
                    if (message.sideEffects != null && message.hasOwnProperty("sideEffects")) {
                        if (!Array.isArray(message.sideEffects))
                            return "sideEffects: array expected";
                        for (var i = 0; i < message.sideEffects.length; ++i) {
                            var error = $root.akkaserverless.component.SideEffect.verify(message.sideEffects[i]);
                            if (error)
                                return "sideEffects." + error;
                        }
                    }
                    if (message.endStream != null && message.hasOwnProperty("endStream"))
                        if (typeof message.endStream !== "boolean")
                            return "endStream: boolean expected";
                    return null;
                };

                /**
                 * Creates a CrdtStreamedMessage message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof akkaserverless.component.crdt.CrdtStreamedMessage
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {akkaserverless.component.crdt.CrdtStreamedMessage} CrdtStreamedMessage
                 */
                CrdtStreamedMessage.fromObject = function fromObject(object) {
                    if (object instanceof $root.akkaserverless.component.crdt.CrdtStreamedMessage)
                        return object;
                    var message = new $root.akkaserverless.component.crdt.CrdtStreamedMessage();
                    if (object.commandId != null)
                        if ($util.Long)
                            (message.commandId = $util.Long.fromValue(object.commandId)).unsigned = false;
                        else if (typeof object.commandId === "string")
                            message.commandId = parseInt(object.commandId, 10);
                        else if (typeof object.commandId === "number")
                            message.commandId = object.commandId;
                        else if (typeof object.commandId === "object")
                            message.commandId = new $util.LongBits(object.commandId.low >>> 0, object.commandId.high >>> 0).toNumber();
                    if (object.clientAction != null) {
                        if (typeof object.clientAction !== "object")
                            throw TypeError(".akkaserverless.component.crdt.CrdtStreamedMessage.clientAction: object expected");
                        message.clientAction = $root.akkaserverless.component.ClientAction.fromObject(object.clientAction);
                    }
                    if (object.sideEffects) {
                        if (!Array.isArray(object.sideEffects))
                            throw TypeError(".akkaserverless.component.crdt.CrdtStreamedMessage.sideEffects: array expected");
                        message.sideEffects = [];
                        for (var i = 0; i < object.sideEffects.length; ++i) {
                            if (typeof object.sideEffects[i] !== "object")
                                throw TypeError(".akkaserverless.component.crdt.CrdtStreamedMessage.sideEffects: object expected");
                            message.sideEffects[i] = $root.akkaserverless.component.SideEffect.fromObject(object.sideEffects[i]);
                        }
                    }
                    if (object.endStream != null)
                        message.endStream = Boolean(object.endStream);
                    return message;
                };

                /**
                 * Creates a plain object from a CrdtStreamedMessage message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof akkaserverless.component.crdt.CrdtStreamedMessage
                 * @static
                 * @param {akkaserverless.component.crdt.CrdtStreamedMessage} message CrdtStreamedMessage
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CrdtStreamedMessage.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.sideEffects = [];
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.commandId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.commandId = options.longs === String ? "0" : 0;
                        object.clientAction = null;
                        object.endStream = false;
                    }
                    if (message.commandId != null && message.hasOwnProperty("commandId"))
                        if (typeof message.commandId === "number")
                            object.commandId = options.longs === String ? String(message.commandId) : message.commandId;
                        else
                            object.commandId = options.longs === String ? $util.Long.prototype.toString.call(message.commandId) : options.longs === Number ? new $util.LongBits(message.commandId.low >>> 0, message.commandId.high >>> 0).toNumber() : message.commandId;
                    if (message.clientAction != null && message.hasOwnProperty("clientAction"))
                        object.clientAction = $root.akkaserverless.component.ClientAction.toObject(message.clientAction, options);
                    if (message.sideEffects && message.sideEffects.length) {
                        object.sideEffects = [];
                        for (var j = 0; j < message.sideEffects.length; ++j)
                            object.sideEffects[j] = $root.akkaserverless.component.SideEffect.toObject(message.sideEffects[j], options);
                    }
                    if (message.endStream != null && message.hasOwnProperty("endStream"))
                        object.endStream = message.endStream;
                    return object;
                };

                /**
                 * Converts this CrdtStreamedMessage to JSON.
                 * @function toJSON
                 * @memberof akkaserverless.component.crdt.CrdtStreamedMessage
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CrdtStreamedMessage.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return CrdtStreamedMessage;
            })();

            crdt.CrdtStreamCancelledResponse = (function() {

                /**
                 * Properties of a CrdtStreamCancelledResponse.
                 * @memberof akkaserverless.component.crdt
                 * @interface ICrdtStreamCancelledResponse
                 * @property {number|Long|null} [commandId] CrdtStreamCancelledResponse commandId
                 * @property {Array.<akkaserverless.component.ISideEffect>|null} [sideEffects] CrdtStreamCancelledResponse sideEffects
                 * @property {akkaserverless.component.crdt.ICrdtStateAction|null} [stateAction] CrdtStreamCancelledResponse stateAction
                 */

                /**
                 * Constructs a new CrdtStreamCancelledResponse.
                 * @memberof akkaserverless.component.crdt
                 * @classdesc Represents a CrdtStreamCancelledResponse.
                 * @implements ICrdtStreamCancelledResponse
                 * @constructor
                 * @param {akkaserverless.component.crdt.ICrdtStreamCancelledResponse=} [properties] Properties to set
                 */
                function CrdtStreamCancelledResponse(properties) {
                    this.sideEffects = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CrdtStreamCancelledResponse commandId.
                 * @member {number|Long} commandId
                 * @memberof akkaserverless.component.crdt.CrdtStreamCancelledResponse
                 * @instance
                 */
                CrdtStreamCancelledResponse.prototype.commandId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * CrdtStreamCancelledResponse sideEffects.
                 * @member {Array.<akkaserverless.component.ISideEffect>} sideEffects
                 * @memberof akkaserverless.component.crdt.CrdtStreamCancelledResponse
                 * @instance
                 */
                CrdtStreamCancelledResponse.prototype.sideEffects = $util.emptyArray;

                /**
                 * CrdtStreamCancelledResponse stateAction.
                 * @member {akkaserverless.component.crdt.ICrdtStateAction|null|undefined} stateAction
                 * @memberof akkaserverless.component.crdt.CrdtStreamCancelledResponse
                 * @instance
                 */
                CrdtStreamCancelledResponse.prototype.stateAction = null;

                /**
                 * Creates a new CrdtStreamCancelledResponse instance using the specified properties.
                 * @function create
                 * @memberof akkaserverless.component.crdt.CrdtStreamCancelledResponse
                 * @static
                 * @param {akkaserverless.component.crdt.ICrdtStreamCancelledResponse=} [properties] Properties to set
                 * @returns {akkaserverless.component.crdt.CrdtStreamCancelledResponse} CrdtStreamCancelledResponse instance
                 */
                CrdtStreamCancelledResponse.create = function create(properties) {
                    return new CrdtStreamCancelledResponse(properties);
                };

                /**
                 * Encodes the specified CrdtStreamCancelledResponse message. Does not implicitly {@link akkaserverless.component.crdt.CrdtStreamCancelledResponse.verify|verify} messages.
                 * @function encode
                 * @memberof akkaserverless.component.crdt.CrdtStreamCancelledResponse
                 * @static
                 * @param {akkaserverless.component.crdt.ICrdtStreamCancelledResponse} message CrdtStreamCancelledResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CrdtStreamCancelledResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commandId != null && Object.hasOwnProperty.call(message, "commandId"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.commandId);
                    if (message.sideEffects != null && message.sideEffects.length)
                        for (var i = 0; i < message.sideEffects.length; ++i)
                            $root.akkaserverless.component.SideEffect.encode(message.sideEffects[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.stateAction != null && Object.hasOwnProperty.call(message, "stateAction"))
                        $root.akkaserverless.component.crdt.CrdtStateAction.encode(message.stateAction, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified CrdtStreamCancelledResponse message, length delimited. Does not implicitly {@link akkaserverless.component.crdt.CrdtStreamCancelledResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof akkaserverless.component.crdt.CrdtStreamCancelledResponse
                 * @static
                 * @param {akkaserverless.component.crdt.ICrdtStreamCancelledResponse} message CrdtStreamCancelledResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CrdtStreamCancelledResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a CrdtStreamCancelledResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof akkaserverless.component.crdt.CrdtStreamCancelledResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {akkaserverless.component.crdt.CrdtStreamCancelledResponse} CrdtStreamCancelledResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CrdtStreamCancelledResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.crdt.CrdtStreamCancelledResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commandId = reader.int64();
                            break;
                        case 2:
                            if (!(message.sideEffects && message.sideEffects.length))
                                message.sideEffects = [];
                            message.sideEffects.push($root.akkaserverless.component.SideEffect.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.stateAction = $root.akkaserverless.component.crdt.CrdtStateAction.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a CrdtStreamCancelledResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof akkaserverless.component.crdt.CrdtStreamCancelledResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {akkaserverless.component.crdt.CrdtStreamCancelledResponse} CrdtStreamCancelledResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CrdtStreamCancelledResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a CrdtStreamCancelledResponse message.
                 * @function verify
                 * @memberof akkaserverless.component.crdt.CrdtStreamCancelledResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CrdtStreamCancelledResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commandId != null && message.hasOwnProperty("commandId"))
                        if (!$util.isInteger(message.commandId) && !(message.commandId && $util.isInteger(message.commandId.low) && $util.isInteger(message.commandId.high)))
                            return "commandId: integer|Long expected";
                    if (message.sideEffects != null && message.hasOwnProperty("sideEffects")) {
                        if (!Array.isArray(message.sideEffects))
                            return "sideEffects: array expected";
                        for (var i = 0; i < message.sideEffects.length; ++i) {
                            var error = $root.akkaserverless.component.SideEffect.verify(message.sideEffects[i]);
                            if (error)
                                return "sideEffects." + error;
                        }
                    }
                    if (message.stateAction != null && message.hasOwnProperty("stateAction")) {
                        var error = $root.akkaserverless.component.crdt.CrdtStateAction.verify(message.stateAction);
                        if (error)
                            return "stateAction." + error;
                    }
                    return null;
                };

                /**
                 * Creates a CrdtStreamCancelledResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof akkaserverless.component.crdt.CrdtStreamCancelledResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {akkaserverless.component.crdt.CrdtStreamCancelledResponse} CrdtStreamCancelledResponse
                 */
                CrdtStreamCancelledResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.akkaserverless.component.crdt.CrdtStreamCancelledResponse)
                        return object;
                    var message = new $root.akkaserverless.component.crdt.CrdtStreamCancelledResponse();
                    if (object.commandId != null)
                        if ($util.Long)
                            (message.commandId = $util.Long.fromValue(object.commandId)).unsigned = false;
                        else if (typeof object.commandId === "string")
                            message.commandId = parseInt(object.commandId, 10);
                        else if (typeof object.commandId === "number")
                            message.commandId = object.commandId;
                        else if (typeof object.commandId === "object")
                            message.commandId = new $util.LongBits(object.commandId.low >>> 0, object.commandId.high >>> 0).toNumber();
                    if (object.sideEffects) {
                        if (!Array.isArray(object.sideEffects))
                            throw TypeError(".akkaserverless.component.crdt.CrdtStreamCancelledResponse.sideEffects: array expected");
                        message.sideEffects = [];
                        for (var i = 0; i < object.sideEffects.length; ++i) {
                            if (typeof object.sideEffects[i] !== "object")
                                throw TypeError(".akkaserverless.component.crdt.CrdtStreamCancelledResponse.sideEffects: object expected");
                            message.sideEffects[i] = $root.akkaserverless.component.SideEffect.fromObject(object.sideEffects[i]);
                        }
                    }
                    if (object.stateAction != null) {
                        if (typeof object.stateAction !== "object")
                            throw TypeError(".akkaserverless.component.crdt.CrdtStreamCancelledResponse.stateAction: object expected");
                        message.stateAction = $root.akkaserverless.component.crdt.CrdtStateAction.fromObject(object.stateAction);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a CrdtStreamCancelledResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof akkaserverless.component.crdt.CrdtStreamCancelledResponse
                 * @static
                 * @param {akkaserverless.component.crdt.CrdtStreamCancelledResponse} message CrdtStreamCancelledResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CrdtStreamCancelledResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.sideEffects = [];
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.commandId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.commandId = options.longs === String ? "0" : 0;
                        object.stateAction = null;
                    }
                    if (message.commandId != null && message.hasOwnProperty("commandId"))
                        if (typeof message.commandId === "number")
                            object.commandId = options.longs === String ? String(message.commandId) : message.commandId;
                        else
                            object.commandId = options.longs === String ? $util.Long.prototype.toString.call(message.commandId) : options.longs === Number ? new $util.LongBits(message.commandId.low >>> 0, message.commandId.high >>> 0).toNumber() : message.commandId;
                    if (message.sideEffects && message.sideEffects.length) {
                        object.sideEffects = [];
                        for (var j = 0; j < message.sideEffects.length; ++j)
                            object.sideEffects[j] = $root.akkaserverless.component.SideEffect.toObject(message.sideEffects[j], options);
                    }
                    if (message.stateAction != null && message.hasOwnProperty("stateAction"))
                        object.stateAction = $root.akkaserverless.component.crdt.CrdtStateAction.toObject(message.stateAction, options);
                    return object;
                };

                /**
                 * Converts this CrdtStreamCancelledResponse to JSON.
                 * @function toJSON
                 * @memberof akkaserverless.component.crdt.CrdtStreamCancelledResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CrdtStreamCancelledResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return CrdtStreamCancelledResponse;
            })();

            /**
             * CrdtWriteConsistency enum.
             * @name akkaserverless.component.crdt.CrdtWriteConsistency
             * @enum {number}
             * @property {number} CRDT_WRITE_CONSISTENCY_LOCAL_UNSPECIFIED=0 CRDT_WRITE_CONSISTENCY_LOCAL_UNSPECIFIED value
             * @property {number} CRDT_WRITE_CONSISTENCY_MAJORITY=1 CRDT_WRITE_CONSISTENCY_MAJORITY value
             * @property {number} CRDT_WRITE_CONSISTENCY_ALL=2 CRDT_WRITE_CONSISTENCY_ALL value
             */
            crdt.CrdtWriteConsistency = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "CRDT_WRITE_CONSISTENCY_LOCAL_UNSPECIFIED"] = 0;
                values[valuesById[1] = "CRDT_WRITE_CONSISTENCY_MAJORITY"] = 1;
                values[valuesById[2] = "CRDT_WRITE_CONSISTENCY_ALL"] = 2;
                return values;
            })();

            /**
             * CrdtClock enum.
             * @name akkaserverless.component.crdt.CrdtClock
             * @enum {number}
             * @property {number} CRDT_CLOCK_DEFAULT_UNSPECIFIED=0 CRDT_CLOCK_DEFAULT_UNSPECIFIED value
             * @property {number} CRDT_CLOCK_REVERSE=1 CRDT_CLOCK_REVERSE value
             * @property {number} CRDT_CLOCK_CUSTOM=2 CRDT_CLOCK_CUSTOM value
             * @property {number} CRDT_CLOCK_CUSTOM_AUTO_INCREMENT=3 CRDT_CLOCK_CUSTOM_AUTO_INCREMENT value
             */
            crdt.CrdtClock = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "CRDT_CLOCK_DEFAULT_UNSPECIFIED"] = 0;
                values[valuesById[1] = "CRDT_CLOCK_REVERSE"] = 1;
                values[valuesById[2] = "CRDT_CLOCK_CUSTOM"] = 2;
                values[valuesById[3] = "CRDT_CLOCK_CUSTOM_AUTO_INCREMENT"] = 3;
                return values;
            })();

            return crdt;
        })();

        component.entity = (function() {

            /**
             * Namespace entity.
             * @memberof akkaserverless.component
             * @namespace
             */
            var entity = {};

            entity.Command = (function() {

                /**
                 * Properties of a Command.
                 * @memberof akkaserverless.component.entity
                 * @interface ICommand
                 * @property {string|null} [entityId] Command entityId
                 * @property {number|Long|null} [id] Command id
                 * @property {string|null} [name] Command name
                 * @property {google.protobuf.IAny|null} [payload] Command payload
                 * @property {boolean|null} [streamed] Command streamed
                 * @property {akkaserverless.component.IMetadata|null} [metadata] Command metadata
                 */

                /**
                 * Constructs a new Command.
                 * @memberof akkaserverless.component.entity
                 * @classdesc Represents a Command.
                 * @implements ICommand
                 * @constructor
                 * @param {akkaserverless.component.entity.ICommand=} [properties] Properties to set
                 */
                function Command(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Command entityId.
                 * @member {string} entityId
                 * @memberof akkaserverless.component.entity.Command
                 * @instance
                 */
                Command.prototype.entityId = "";

                /**
                 * Command id.
                 * @member {number|Long} id
                 * @memberof akkaserverless.component.entity.Command
                 * @instance
                 */
                Command.prototype.id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * Command name.
                 * @member {string} name
                 * @memberof akkaserverless.component.entity.Command
                 * @instance
                 */
                Command.prototype.name = "";

                /**
                 * Command payload.
                 * @member {google.protobuf.IAny|null|undefined} payload
                 * @memberof akkaserverless.component.entity.Command
                 * @instance
                 */
                Command.prototype.payload = null;

                /**
                 * Command streamed.
                 * @member {boolean} streamed
                 * @memberof akkaserverless.component.entity.Command
                 * @instance
                 */
                Command.prototype.streamed = false;

                /**
                 * Command metadata.
                 * @member {akkaserverless.component.IMetadata|null|undefined} metadata
                 * @memberof akkaserverless.component.entity.Command
                 * @instance
                 */
                Command.prototype.metadata = null;

                /**
                 * Creates a new Command instance using the specified properties.
                 * @function create
                 * @memberof akkaserverless.component.entity.Command
                 * @static
                 * @param {akkaserverless.component.entity.ICommand=} [properties] Properties to set
                 * @returns {akkaserverless.component.entity.Command} Command instance
                 */
                Command.create = function create(properties) {
                    return new Command(properties);
                };

                /**
                 * Encodes the specified Command message. Does not implicitly {@link akkaserverless.component.entity.Command.verify|verify} messages.
                 * @function encode
                 * @memberof akkaserverless.component.entity.Command
                 * @static
                 * @param {akkaserverless.component.entity.ICommand} message Command message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Command.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.entityId != null && Object.hasOwnProperty.call(message, "entityId"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.entityId);
                    if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int64(message.id);
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
                    if (message.payload != null && Object.hasOwnProperty.call(message, "payload"))
                        $root.google.protobuf.Any.encode(message.payload, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.streamed != null && Object.hasOwnProperty.call(message, "streamed"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.streamed);
                    if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                        $root.akkaserverless.component.Metadata.encode(message.metadata, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified Command message, length delimited. Does not implicitly {@link akkaserverless.component.entity.Command.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof akkaserverless.component.entity.Command
                 * @static
                 * @param {akkaserverless.component.entity.ICommand} message Command message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Command.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Command message from the specified reader or buffer.
                 * @function decode
                 * @memberof akkaserverless.component.entity.Command
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {akkaserverless.component.entity.Command} Command
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Command.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.entity.Command();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.entityId = reader.string();
                            break;
                        case 2:
                            message.id = reader.int64();
                            break;
                        case 3:
                            message.name = reader.string();
                            break;
                        case 4:
                            message.payload = $root.google.protobuf.Any.decode(reader, reader.uint32());
                            break;
                        case 5:
                            message.streamed = reader.bool();
                            break;
                        case 6:
                            message.metadata = $root.akkaserverless.component.Metadata.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Command message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof akkaserverless.component.entity.Command
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {akkaserverless.component.entity.Command} Command
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Command.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Command message.
                 * @function verify
                 * @memberof akkaserverless.component.entity.Command
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Command.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.entityId != null && message.hasOwnProperty("entityId"))
                        if (!$util.isString(message.entityId))
                            return "entityId: string expected";
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                            return "id: integer|Long expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.payload != null && message.hasOwnProperty("payload")) {
                        var error = $root.google.protobuf.Any.verify(message.payload);
                        if (error)
                            return "payload." + error;
                    }
                    if (message.streamed != null && message.hasOwnProperty("streamed"))
                        if (typeof message.streamed !== "boolean")
                            return "streamed: boolean expected";
                    if (message.metadata != null && message.hasOwnProperty("metadata")) {
                        var error = $root.akkaserverless.component.Metadata.verify(message.metadata);
                        if (error)
                            return "metadata." + error;
                    }
                    return null;
                };

                /**
                 * Creates a Command message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof akkaserverless.component.entity.Command
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {akkaserverless.component.entity.Command} Command
                 */
                Command.fromObject = function fromObject(object) {
                    if (object instanceof $root.akkaserverless.component.entity.Command)
                        return object;
                    var message = new $root.akkaserverless.component.entity.Command();
                    if (object.entityId != null)
                        message.entityId = String(object.entityId);
                    if (object.id != null)
                        if ($util.Long)
                            (message.id = $util.Long.fromValue(object.id)).unsigned = false;
                        else if (typeof object.id === "string")
                            message.id = parseInt(object.id, 10);
                        else if (typeof object.id === "number")
                            message.id = object.id;
                        else if (typeof object.id === "object")
                            message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.payload != null) {
                        if (typeof object.payload !== "object")
                            throw TypeError(".akkaserverless.component.entity.Command.payload: object expected");
                        message.payload = $root.google.protobuf.Any.fromObject(object.payload);
                    }
                    if (object.streamed != null)
                        message.streamed = Boolean(object.streamed);
                    if (object.metadata != null) {
                        if (typeof object.metadata !== "object")
                            throw TypeError(".akkaserverless.component.entity.Command.metadata: object expected");
                        message.metadata = $root.akkaserverless.component.Metadata.fromObject(object.metadata);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a Command message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof akkaserverless.component.entity.Command
                 * @static
                 * @param {akkaserverless.component.entity.Command} message Command
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Command.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.entityId = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.id = options.longs === String ? "0" : 0;
                        object.name = "";
                        object.payload = null;
                        object.streamed = false;
                        object.metadata = null;
                    }
                    if (message.entityId != null && message.hasOwnProperty("entityId"))
                        object.entityId = message.entityId;
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (typeof message.id === "number")
                            object.id = options.longs === String ? String(message.id) : message.id;
                        else
                            object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber() : message.id;
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.payload != null && message.hasOwnProperty("payload"))
                        object.payload = $root.google.protobuf.Any.toObject(message.payload, options);
                    if (message.streamed != null && message.hasOwnProperty("streamed"))
                        object.streamed = message.streamed;
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        object.metadata = $root.akkaserverless.component.Metadata.toObject(message.metadata, options);
                    return object;
                };

                /**
                 * Converts this Command to JSON.
                 * @function toJSON
                 * @memberof akkaserverless.component.entity.Command
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Command.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Command;
            })();

            return entity;
        })();

        component.eventsourcedentity = (function() {

            /**
             * Namespace eventsourcedentity.
             * @memberof akkaserverless.component
             * @namespace
             */
            var eventsourcedentity = {};

            eventsourcedentity.EventSourcedInit = (function() {

                /**
                 * Properties of an EventSourcedInit.
                 * @memberof akkaserverless.component.eventsourcedentity
                 * @interface IEventSourcedInit
                 * @property {string|null} [serviceName] EventSourcedInit serviceName
                 * @property {string|null} [entityId] EventSourcedInit entityId
                 * @property {akkaserverless.component.eventsourcedentity.IEventSourcedSnapshot|null} [snapshot] EventSourcedInit snapshot
                 */

                /**
                 * Constructs a new EventSourcedInit.
                 * @memberof akkaserverless.component.eventsourcedentity
                 * @classdesc Represents an EventSourcedInit.
                 * @implements IEventSourcedInit
                 * @constructor
                 * @param {akkaserverless.component.eventsourcedentity.IEventSourcedInit=} [properties] Properties to set
                 */
                function EventSourcedInit(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * EventSourcedInit serviceName.
                 * @member {string} serviceName
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedInit
                 * @instance
                 */
                EventSourcedInit.prototype.serviceName = "";

                /**
                 * EventSourcedInit entityId.
                 * @member {string} entityId
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedInit
                 * @instance
                 */
                EventSourcedInit.prototype.entityId = "";

                /**
                 * EventSourcedInit snapshot.
                 * @member {akkaserverless.component.eventsourcedentity.IEventSourcedSnapshot|null|undefined} snapshot
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedInit
                 * @instance
                 */
                EventSourcedInit.prototype.snapshot = null;

                /**
                 * Creates a new EventSourcedInit instance using the specified properties.
                 * @function create
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedInit
                 * @static
                 * @param {akkaserverless.component.eventsourcedentity.IEventSourcedInit=} [properties] Properties to set
                 * @returns {akkaserverless.component.eventsourcedentity.EventSourcedInit} EventSourcedInit instance
                 */
                EventSourcedInit.create = function create(properties) {
                    return new EventSourcedInit(properties);
                };

                /**
                 * Encodes the specified EventSourcedInit message. Does not implicitly {@link akkaserverless.component.eventsourcedentity.EventSourcedInit.verify|verify} messages.
                 * @function encode
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedInit
                 * @static
                 * @param {akkaserverless.component.eventsourcedentity.IEventSourcedInit} message EventSourcedInit message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EventSourcedInit.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.serviceName != null && Object.hasOwnProperty.call(message, "serviceName"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.serviceName);
                    if (message.entityId != null && Object.hasOwnProperty.call(message, "entityId"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.entityId);
                    if (message.snapshot != null && Object.hasOwnProperty.call(message, "snapshot"))
                        $root.akkaserverless.component.eventsourcedentity.EventSourcedSnapshot.encode(message.snapshot, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified EventSourcedInit message, length delimited. Does not implicitly {@link akkaserverless.component.eventsourcedentity.EventSourcedInit.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedInit
                 * @static
                 * @param {akkaserverless.component.eventsourcedentity.IEventSourcedInit} message EventSourcedInit message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EventSourcedInit.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an EventSourcedInit message from the specified reader or buffer.
                 * @function decode
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedInit
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {akkaserverless.component.eventsourcedentity.EventSourcedInit} EventSourcedInit
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EventSourcedInit.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.eventsourcedentity.EventSourcedInit();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.serviceName = reader.string();
                            break;
                        case 2:
                            message.entityId = reader.string();
                            break;
                        case 3:
                            message.snapshot = $root.akkaserverless.component.eventsourcedentity.EventSourcedSnapshot.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an EventSourcedInit message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedInit
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {akkaserverless.component.eventsourcedentity.EventSourcedInit} EventSourcedInit
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EventSourcedInit.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an EventSourcedInit message.
                 * @function verify
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedInit
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EventSourcedInit.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                        if (!$util.isString(message.serviceName))
                            return "serviceName: string expected";
                    if (message.entityId != null && message.hasOwnProperty("entityId"))
                        if (!$util.isString(message.entityId))
                            return "entityId: string expected";
                    if (message.snapshot != null && message.hasOwnProperty("snapshot")) {
                        var error = $root.akkaserverless.component.eventsourcedentity.EventSourcedSnapshot.verify(message.snapshot);
                        if (error)
                            return "snapshot." + error;
                    }
                    return null;
                };

                /**
                 * Creates an EventSourcedInit message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedInit
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {akkaserverless.component.eventsourcedentity.EventSourcedInit} EventSourcedInit
                 */
                EventSourcedInit.fromObject = function fromObject(object) {
                    if (object instanceof $root.akkaserverless.component.eventsourcedentity.EventSourcedInit)
                        return object;
                    var message = new $root.akkaserverless.component.eventsourcedentity.EventSourcedInit();
                    if (object.serviceName != null)
                        message.serviceName = String(object.serviceName);
                    if (object.entityId != null)
                        message.entityId = String(object.entityId);
                    if (object.snapshot != null) {
                        if (typeof object.snapshot !== "object")
                            throw TypeError(".akkaserverless.component.eventsourcedentity.EventSourcedInit.snapshot: object expected");
                        message.snapshot = $root.akkaserverless.component.eventsourcedentity.EventSourcedSnapshot.fromObject(object.snapshot);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an EventSourcedInit message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedInit
                 * @static
                 * @param {akkaserverless.component.eventsourcedentity.EventSourcedInit} message EventSourcedInit
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EventSourcedInit.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.serviceName = "";
                        object.entityId = "";
                        object.snapshot = null;
                    }
                    if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                        object.serviceName = message.serviceName;
                    if (message.entityId != null && message.hasOwnProperty("entityId"))
                        object.entityId = message.entityId;
                    if (message.snapshot != null && message.hasOwnProperty("snapshot"))
                        object.snapshot = $root.akkaserverless.component.eventsourcedentity.EventSourcedSnapshot.toObject(message.snapshot, options);
                    return object;
                };

                /**
                 * Converts this EventSourcedInit to JSON.
                 * @function toJSON
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedInit
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EventSourcedInit.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return EventSourcedInit;
            })();

            eventsourcedentity.EventSourcedSnapshot = (function() {

                /**
                 * Properties of an EventSourcedSnapshot.
                 * @memberof akkaserverless.component.eventsourcedentity
                 * @interface IEventSourcedSnapshot
                 * @property {number|Long|null} [snapshotSequence] EventSourcedSnapshot snapshotSequence
                 * @property {google.protobuf.IAny|null} [snapshot] EventSourcedSnapshot snapshot
                 */

                /**
                 * Constructs a new EventSourcedSnapshot.
                 * @memberof akkaserverless.component.eventsourcedentity
                 * @classdesc Represents an EventSourcedSnapshot.
                 * @implements IEventSourcedSnapshot
                 * @constructor
                 * @param {akkaserverless.component.eventsourcedentity.IEventSourcedSnapshot=} [properties] Properties to set
                 */
                function EventSourcedSnapshot(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * EventSourcedSnapshot snapshotSequence.
                 * @member {number|Long} snapshotSequence
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedSnapshot
                 * @instance
                 */
                EventSourcedSnapshot.prototype.snapshotSequence = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * EventSourcedSnapshot snapshot.
                 * @member {google.protobuf.IAny|null|undefined} snapshot
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedSnapshot
                 * @instance
                 */
                EventSourcedSnapshot.prototype.snapshot = null;

                /**
                 * Creates a new EventSourcedSnapshot instance using the specified properties.
                 * @function create
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedSnapshot
                 * @static
                 * @param {akkaserverless.component.eventsourcedentity.IEventSourcedSnapshot=} [properties] Properties to set
                 * @returns {akkaserverless.component.eventsourcedentity.EventSourcedSnapshot} EventSourcedSnapshot instance
                 */
                EventSourcedSnapshot.create = function create(properties) {
                    return new EventSourcedSnapshot(properties);
                };

                /**
                 * Encodes the specified EventSourcedSnapshot message. Does not implicitly {@link akkaserverless.component.eventsourcedentity.EventSourcedSnapshot.verify|verify} messages.
                 * @function encode
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedSnapshot
                 * @static
                 * @param {akkaserverless.component.eventsourcedentity.IEventSourcedSnapshot} message EventSourcedSnapshot message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EventSourcedSnapshot.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.snapshotSequence != null && Object.hasOwnProperty.call(message, "snapshotSequence"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.snapshotSequence);
                    if (message.snapshot != null && Object.hasOwnProperty.call(message, "snapshot"))
                        $root.google.protobuf.Any.encode(message.snapshot, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified EventSourcedSnapshot message, length delimited. Does not implicitly {@link akkaserverless.component.eventsourcedentity.EventSourcedSnapshot.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedSnapshot
                 * @static
                 * @param {akkaserverless.component.eventsourcedentity.IEventSourcedSnapshot} message EventSourcedSnapshot message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EventSourcedSnapshot.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an EventSourcedSnapshot message from the specified reader or buffer.
                 * @function decode
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedSnapshot
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {akkaserverless.component.eventsourcedentity.EventSourcedSnapshot} EventSourcedSnapshot
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EventSourcedSnapshot.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.eventsourcedentity.EventSourcedSnapshot();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.snapshotSequence = reader.int64();
                            break;
                        case 2:
                            message.snapshot = $root.google.protobuf.Any.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an EventSourcedSnapshot message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedSnapshot
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {akkaserverless.component.eventsourcedentity.EventSourcedSnapshot} EventSourcedSnapshot
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EventSourcedSnapshot.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an EventSourcedSnapshot message.
                 * @function verify
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedSnapshot
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EventSourcedSnapshot.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.snapshotSequence != null && message.hasOwnProperty("snapshotSequence"))
                        if (!$util.isInteger(message.snapshotSequence) && !(message.snapshotSequence && $util.isInteger(message.snapshotSequence.low) && $util.isInteger(message.snapshotSequence.high)))
                            return "snapshotSequence: integer|Long expected";
                    if (message.snapshot != null && message.hasOwnProperty("snapshot")) {
                        var error = $root.google.protobuf.Any.verify(message.snapshot);
                        if (error)
                            return "snapshot." + error;
                    }
                    return null;
                };

                /**
                 * Creates an EventSourcedSnapshot message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedSnapshot
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {akkaserverless.component.eventsourcedentity.EventSourcedSnapshot} EventSourcedSnapshot
                 */
                EventSourcedSnapshot.fromObject = function fromObject(object) {
                    if (object instanceof $root.akkaserverless.component.eventsourcedentity.EventSourcedSnapshot)
                        return object;
                    var message = new $root.akkaserverless.component.eventsourcedentity.EventSourcedSnapshot();
                    if (object.snapshotSequence != null)
                        if ($util.Long)
                            (message.snapshotSequence = $util.Long.fromValue(object.snapshotSequence)).unsigned = false;
                        else if (typeof object.snapshotSequence === "string")
                            message.snapshotSequence = parseInt(object.snapshotSequence, 10);
                        else if (typeof object.snapshotSequence === "number")
                            message.snapshotSequence = object.snapshotSequence;
                        else if (typeof object.snapshotSequence === "object")
                            message.snapshotSequence = new $util.LongBits(object.snapshotSequence.low >>> 0, object.snapshotSequence.high >>> 0).toNumber();
                    if (object.snapshot != null) {
                        if (typeof object.snapshot !== "object")
                            throw TypeError(".akkaserverless.component.eventsourcedentity.EventSourcedSnapshot.snapshot: object expected");
                        message.snapshot = $root.google.protobuf.Any.fromObject(object.snapshot);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an EventSourcedSnapshot message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedSnapshot
                 * @static
                 * @param {akkaserverless.component.eventsourcedentity.EventSourcedSnapshot} message EventSourcedSnapshot
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EventSourcedSnapshot.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.snapshotSequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.snapshotSequence = options.longs === String ? "0" : 0;
                        object.snapshot = null;
                    }
                    if (message.snapshotSequence != null && message.hasOwnProperty("snapshotSequence"))
                        if (typeof message.snapshotSequence === "number")
                            object.snapshotSequence = options.longs === String ? String(message.snapshotSequence) : message.snapshotSequence;
                        else
                            object.snapshotSequence = options.longs === String ? $util.Long.prototype.toString.call(message.snapshotSequence) : options.longs === Number ? new $util.LongBits(message.snapshotSequence.low >>> 0, message.snapshotSequence.high >>> 0).toNumber() : message.snapshotSequence;
                    if (message.snapshot != null && message.hasOwnProperty("snapshot"))
                        object.snapshot = $root.google.protobuf.Any.toObject(message.snapshot, options);
                    return object;
                };

                /**
                 * Converts this EventSourcedSnapshot to JSON.
                 * @function toJSON
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedSnapshot
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EventSourcedSnapshot.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return EventSourcedSnapshot;
            })();

            eventsourcedentity.EventSourcedEvent = (function() {

                /**
                 * Properties of an EventSourcedEvent.
                 * @memberof akkaserverless.component.eventsourcedentity
                 * @interface IEventSourcedEvent
                 * @property {number|Long|null} [sequence] EventSourcedEvent sequence
                 * @property {google.protobuf.IAny|null} [payload] EventSourcedEvent payload
                 */

                /**
                 * Constructs a new EventSourcedEvent.
                 * @memberof akkaserverless.component.eventsourcedentity
                 * @classdesc Represents an EventSourcedEvent.
                 * @implements IEventSourcedEvent
                 * @constructor
                 * @param {akkaserverless.component.eventsourcedentity.IEventSourcedEvent=} [properties] Properties to set
                 */
                function EventSourcedEvent(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * EventSourcedEvent sequence.
                 * @member {number|Long} sequence
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedEvent
                 * @instance
                 */
                EventSourcedEvent.prototype.sequence = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * EventSourcedEvent payload.
                 * @member {google.protobuf.IAny|null|undefined} payload
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedEvent
                 * @instance
                 */
                EventSourcedEvent.prototype.payload = null;

                /**
                 * Creates a new EventSourcedEvent instance using the specified properties.
                 * @function create
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedEvent
                 * @static
                 * @param {akkaserverless.component.eventsourcedentity.IEventSourcedEvent=} [properties] Properties to set
                 * @returns {akkaserverless.component.eventsourcedentity.EventSourcedEvent} EventSourcedEvent instance
                 */
                EventSourcedEvent.create = function create(properties) {
                    return new EventSourcedEvent(properties);
                };

                /**
                 * Encodes the specified EventSourcedEvent message. Does not implicitly {@link akkaserverless.component.eventsourcedentity.EventSourcedEvent.verify|verify} messages.
                 * @function encode
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedEvent
                 * @static
                 * @param {akkaserverless.component.eventsourcedentity.IEventSourcedEvent} message EventSourcedEvent message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EventSourcedEvent.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.sequence != null && Object.hasOwnProperty.call(message, "sequence"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.sequence);
                    if (message.payload != null && Object.hasOwnProperty.call(message, "payload"))
                        $root.google.protobuf.Any.encode(message.payload, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified EventSourcedEvent message, length delimited. Does not implicitly {@link akkaserverless.component.eventsourcedentity.EventSourcedEvent.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedEvent
                 * @static
                 * @param {akkaserverless.component.eventsourcedentity.IEventSourcedEvent} message EventSourcedEvent message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EventSourcedEvent.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an EventSourcedEvent message from the specified reader or buffer.
                 * @function decode
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedEvent
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {akkaserverless.component.eventsourcedentity.EventSourcedEvent} EventSourcedEvent
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EventSourcedEvent.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.eventsourcedentity.EventSourcedEvent();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.sequence = reader.int64();
                            break;
                        case 2:
                            message.payload = $root.google.protobuf.Any.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an EventSourcedEvent message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedEvent
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {akkaserverless.component.eventsourcedentity.EventSourcedEvent} EventSourcedEvent
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EventSourcedEvent.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an EventSourcedEvent message.
                 * @function verify
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedEvent
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EventSourcedEvent.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.sequence != null && message.hasOwnProperty("sequence"))
                        if (!$util.isInteger(message.sequence) && !(message.sequence && $util.isInteger(message.sequence.low) && $util.isInteger(message.sequence.high)))
                            return "sequence: integer|Long expected";
                    if (message.payload != null && message.hasOwnProperty("payload")) {
                        var error = $root.google.protobuf.Any.verify(message.payload);
                        if (error)
                            return "payload." + error;
                    }
                    return null;
                };

                /**
                 * Creates an EventSourcedEvent message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedEvent
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {akkaserverless.component.eventsourcedentity.EventSourcedEvent} EventSourcedEvent
                 */
                EventSourcedEvent.fromObject = function fromObject(object) {
                    if (object instanceof $root.akkaserverless.component.eventsourcedentity.EventSourcedEvent)
                        return object;
                    var message = new $root.akkaserverless.component.eventsourcedentity.EventSourcedEvent();
                    if (object.sequence != null)
                        if ($util.Long)
                            (message.sequence = $util.Long.fromValue(object.sequence)).unsigned = false;
                        else if (typeof object.sequence === "string")
                            message.sequence = parseInt(object.sequence, 10);
                        else if (typeof object.sequence === "number")
                            message.sequence = object.sequence;
                        else if (typeof object.sequence === "object")
                            message.sequence = new $util.LongBits(object.sequence.low >>> 0, object.sequence.high >>> 0).toNumber();
                    if (object.payload != null) {
                        if (typeof object.payload !== "object")
                            throw TypeError(".akkaserverless.component.eventsourcedentity.EventSourcedEvent.payload: object expected");
                        message.payload = $root.google.protobuf.Any.fromObject(object.payload);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an EventSourcedEvent message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedEvent
                 * @static
                 * @param {akkaserverless.component.eventsourcedentity.EventSourcedEvent} message EventSourcedEvent
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EventSourcedEvent.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.sequence = options.longs === String ? "0" : 0;
                        object.payload = null;
                    }
                    if (message.sequence != null && message.hasOwnProperty("sequence"))
                        if (typeof message.sequence === "number")
                            object.sequence = options.longs === String ? String(message.sequence) : message.sequence;
                        else
                            object.sequence = options.longs === String ? $util.Long.prototype.toString.call(message.sequence) : options.longs === Number ? new $util.LongBits(message.sequence.low >>> 0, message.sequence.high >>> 0).toNumber() : message.sequence;
                    if (message.payload != null && message.hasOwnProperty("payload"))
                        object.payload = $root.google.protobuf.Any.toObject(message.payload, options);
                    return object;
                };

                /**
                 * Converts this EventSourcedEvent to JSON.
                 * @function toJSON
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedEvent
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EventSourcedEvent.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return EventSourcedEvent;
            })();

            eventsourcedentity.EventSourcedReply = (function() {

                /**
                 * Properties of an EventSourcedReply.
                 * @memberof akkaserverless.component.eventsourcedentity
                 * @interface IEventSourcedReply
                 * @property {number|Long|null} [commandId] EventSourcedReply commandId
                 * @property {akkaserverless.component.IClientAction|null} [clientAction] EventSourcedReply clientAction
                 * @property {Array.<akkaserverless.component.ISideEffect>|null} [sideEffects] EventSourcedReply sideEffects
                 * @property {Array.<google.protobuf.IAny>|null} [events] EventSourcedReply events
                 * @property {google.protobuf.IAny|null} [snapshot] EventSourcedReply snapshot
                 */

                /**
                 * Constructs a new EventSourcedReply.
                 * @memberof akkaserverless.component.eventsourcedentity
                 * @classdesc Represents an EventSourcedReply.
                 * @implements IEventSourcedReply
                 * @constructor
                 * @param {akkaserverless.component.eventsourcedentity.IEventSourcedReply=} [properties] Properties to set
                 */
                function EventSourcedReply(properties) {
                    this.sideEffects = [];
                    this.events = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * EventSourcedReply commandId.
                 * @member {number|Long} commandId
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedReply
                 * @instance
                 */
                EventSourcedReply.prototype.commandId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * EventSourcedReply clientAction.
                 * @member {akkaserverless.component.IClientAction|null|undefined} clientAction
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedReply
                 * @instance
                 */
                EventSourcedReply.prototype.clientAction = null;

                /**
                 * EventSourcedReply sideEffects.
                 * @member {Array.<akkaserverless.component.ISideEffect>} sideEffects
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedReply
                 * @instance
                 */
                EventSourcedReply.prototype.sideEffects = $util.emptyArray;

                /**
                 * EventSourcedReply events.
                 * @member {Array.<google.protobuf.IAny>} events
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedReply
                 * @instance
                 */
                EventSourcedReply.prototype.events = $util.emptyArray;

                /**
                 * EventSourcedReply snapshot.
                 * @member {google.protobuf.IAny|null|undefined} snapshot
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedReply
                 * @instance
                 */
                EventSourcedReply.prototype.snapshot = null;

                /**
                 * Creates a new EventSourcedReply instance using the specified properties.
                 * @function create
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedReply
                 * @static
                 * @param {akkaserverless.component.eventsourcedentity.IEventSourcedReply=} [properties] Properties to set
                 * @returns {akkaserverless.component.eventsourcedentity.EventSourcedReply} EventSourcedReply instance
                 */
                EventSourcedReply.create = function create(properties) {
                    return new EventSourcedReply(properties);
                };

                /**
                 * Encodes the specified EventSourcedReply message. Does not implicitly {@link akkaserverless.component.eventsourcedentity.EventSourcedReply.verify|verify} messages.
                 * @function encode
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedReply
                 * @static
                 * @param {akkaserverless.component.eventsourcedentity.IEventSourcedReply} message EventSourcedReply message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EventSourcedReply.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commandId != null && Object.hasOwnProperty.call(message, "commandId"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.commandId);
                    if (message.clientAction != null && Object.hasOwnProperty.call(message, "clientAction"))
                        $root.akkaserverless.component.ClientAction.encode(message.clientAction, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.sideEffects != null && message.sideEffects.length)
                        for (var i = 0; i < message.sideEffects.length; ++i)
                            $root.akkaserverless.component.SideEffect.encode(message.sideEffects[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.events != null && message.events.length)
                        for (var i = 0; i < message.events.length; ++i)
                            $root.google.protobuf.Any.encode(message.events[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.snapshot != null && Object.hasOwnProperty.call(message, "snapshot"))
                        $root.google.protobuf.Any.encode(message.snapshot, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified EventSourcedReply message, length delimited. Does not implicitly {@link akkaserverless.component.eventsourcedentity.EventSourcedReply.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedReply
                 * @static
                 * @param {akkaserverless.component.eventsourcedentity.IEventSourcedReply} message EventSourcedReply message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EventSourcedReply.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an EventSourcedReply message from the specified reader or buffer.
                 * @function decode
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedReply
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {akkaserverless.component.eventsourcedentity.EventSourcedReply} EventSourcedReply
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EventSourcedReply.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.eventsourcedentity.EventSourcedReply();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commandId = reader.int64();
                            break;
                        case 2:
                            message.clientAction = $root.akkaserverless.component.ClientAction.decode(reader, reader.uint32());
                            break;
                        case 3:
                            if (!(message.sideEffects && message.sideEffects.length))
                                message.sideEffects = [];
                            message.sideEffects.push($root.akkaserverless.component.SideEffect.decode(reader, reader.uint32()));
                            break;
                        case 4:
                            if (!(message.events && message.events.length))
                                message.events = [];
                            message.events.push($root.google.protobuf.Any.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            message.snapshot = $root.google.protobuf.Any.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an EventSourcedReply message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedReply
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {akkaserverless.component.eventsourcedentity.EventSourcedReply} EventSourcedReply
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EventSourcedReply.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an EventSourcedReply message.
                 * @function verify
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedReply
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EventSourcedReply.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commandId != null && message.hasOwnProperty("commandId"))
                        if (!$util.isInteger(message.commandId) && !(message.commandId && $util.isInteger(message.commandId.low) && $util.isInteger(message.commandId.high)))
                            return "commandId: integer|Long expected";
                    if (message.clientAction != null && message.hasOwnProperty("clientAction")) {
                        var error = $root.akkaserverless.component.ClientAction.verify(message.clientAction);
                        if (error)
                            return "clientAction." + error;
                    }
                    if (message.sideEffects != null && message.hasOwnProperty("sideEffects")) {
                        if (!Array.isArray(message.sideEffects))
                            return "sideEffects: array expected";
                        for (var i = 0; i < message.sideEffects.length; ++i) {
                            var error = $root.akkaserverless.component.SideEffect.verify(message.sideEffects[i]);
                            if (error)
                                return "sideEffects." + error;
                        }
                    }
                    if (message.events != null && message.hasOwnProperty("events")) {
                        if (!Array.isArray(message.events))
                            return "events: array expected";
                        for (var i = 0; i < message.events.length; ++i) {
                            var error = $root.google.protobuf.Any.verify(message.events[i]);
                            if (error)
                                return "events." + error;
                        }
                    }
                    if (message.snapshot != null && message.hasOwnProperty("snapshot")) {
                        var error = $root.google.protobuf.Any.verify(message.snapshot);
                        if (error)
                            return "snapshot." + error;
                    }
                    return null;
                };

                /**
                 * Creates an EventSourcedReply message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedReply
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {akkaserverless.component.eventsourcedentity.EventSourcedReply} EventSourcedReply
                 */
                EventSourcedReply.fromObject = function fromObject(object) {
                    if (object instanceof $root.akkaserverless.component.eventsourcedentity.EventSourcedReply)
                        return object;
                    var message = new $root.akkaserverless.component.eventsourcedentity.EventSourcedReply();
                    if (object.commandId != null)
                        if ($util.Long)
                            (message.commandId = $util.Long.fromValue(object.commandId)).unsigned = false;
                        else if (typeof object.commandId === "string")
                            message.commandId = parseInt(object.commandId, 10);
                        else if (typeof object.commandId === "number")
                            message.commandId = object.commandId;
                        else if (typeof object.commandId === "object")
                            message.commandId = new $util.LongBits(object.commandId.low >>> 0, object.commandId.high >>> 0).toNumber();
                    if (object.clientAction != null) {
                        if (typeof object.clientAction !== "object")
                            throw TypeError(".akkaserverless.component.eventsourcedentity.EventSourcedReply.clientAction: object expected");
                        message.clientAction = $root.akkaserverless.component.ClientAction.fromObject(object.clientAction);
                    }
                    if (object.sideEffects) {
                        if (!Array.isArray(object.sideEffects))
                            throw TypeError(".akkaserverless.component.eventsourcedentity.EventSourcedReply.sideEffects: array expected");
                        message.sideEffects = [];
                        for (var i = 0; i < object.sideEffects.length; ++i) {
                            if (typeof object.sideEffects[i] !== "object")
                                throw TypeError(".akkaserverless.component.eventsourcedentity.EventSourcedReply.sideEffects: object expected");
                            message.sideEffects[i] = $root.akkaserverless.component.SideEffect.fromObject(object.sideEffects[i]);
                        }
                    }
                    if (object.events) {
                        if (!Array.isArray(object.events))
                            throw TypeError(".akkaserverless.component.eventsourcedentity.EventSourcedReply.events: array expected");
                        message.events = [];
                        for (var i = 0; i < object.events.length; ++i) {
                            if (typeof object.events[i] !== "object")
                                throw TypeError(".akkaserverless.component.eventsourcedentity.EventSourcedReply.events: object expected");
                            message.events[i] = $root.google.protobuf.Any.fromObject(object.events[i]);
                        }
                    }
                    if (object.snapshot != null) {
                        if (typeof object.snapshot !== "object")
                            throw TypeError(".akkaserverless.component.eventsourcedentity.EventSourcedReply.snapshot: object expected");
                        message.snapshot = $root.google.protobuf.Any.fromObject(object.snapshot);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an EventSourcedReply message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedReply
                 * @static
                 * @param {akkaserverless.component.eventsourcedentity.EventSourcedReply} message EventSourcedReply
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EventSourcedReply.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.sideEffects = [];
                        object.events = [];
                    }
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.commandId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.commandId = options.longs === String ? "0" : 0;
                        object.clientAction = null;
                        object.snapshot = null;
                    }
                    if (message.commandId != null && message.hasOwnProperty("commandId"))
                        if (typeof message.commandId === "number")
                            object.commandId = options.longs === String ? String(message.commandId) : message.commandId;
                        else
                            object.commandId = options.longs === String ? $util.Long.prototype.toString.call(message.commandId) : options.longs === Number ? new $util.LongBits(message.commandId.low >>> 0, message.commandId.high >>> 0).toNumber() : message.commandId;
                    if (message.clientAction != null && message.hasOwnProperty("clientAction"))
                        object.clientAction = $root.akkaserverless.component.ClientAction.toObject(message.clientAction, options);
                    if (message.sideEffects && message.sideEffects.length) {
                        object.sideEffects = [];
                        for (var j = 0; j < message.sideEffects.length; ++j)
                            object.sideEffects[j] = $root.akkaserverless.component.SideEffect.toObject(message.sideEffects[j], options);
                    }
                    if (message.events && message.events.length) {
                        object.events = [];
                        for (var j = 0; j < message.events.length; ++j)
                            object.events[j] = $root.google.protobuf.Any.toObject(message.events[j], options);
                    }
                    if (message.snapshot != null && message.hasOwnProperty("snapshot"))
                        object.snapshot = $root.google.protobuf.Any.toObject(message.snapshot, options);
                    return object;
                };

                /**
                 * Converts this EventSourcedReply to JSON.
                 * @function toJSON
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedReply
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EventSourcedReply.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return EventSourcedReply;
            })();

            eventsourcedentity.EventSourcedStreamIn = (function() {

                /**
                 * Properties of an EventSourcedStreamIn.
                 * @memberof akkaserverless.component.eventsourcedentity
                 * @interface IEventSourcedStreamIn
                 * @property {akkaserverless.component.eventsourcedentity.IEventSourcedInit|null} [init] EventSourcedStreamIn init
                 * @property {akkaserverless.component.eventsourcedentity.IEventSourcedEvent|null} [event] EventSourcedStreamIn event
                 * @property {akkaserverless.component.entity.ICommand|null} [command] EventSourcedStreamIn command
                 */

                /**
                 * Constructs a new EventSourcedStreamIn.
                 * @memberof akkaserverless.component.eventsourcedentity
                 * @classdesc Represents an EventSourcedStreamIn.
                 * @implements IEventSourcedStreamIn
                 * @constructor
                 * @param {akkaserverless.component.eventsourcedentity.IEventSourcedStreamIn=} [properties] Properties to set
                 */
                function EventSourcedStreamIn(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * EventSourcedStreamIn init.
                 * @member {akkaserverless.component.eventsourcedentity.IEventSourcedInit|null|undefined} init
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedStreamIn
                 * @instance
                 */
                EventSourcedStreamIn.prototype.init = null;

                /**
                 * EventSourcedStreamIn event.
                 * @member {akkaserverless.component.eventsourcedentity.IEventSourcedEvent|null|undefined} event
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedStreamIn
                 * @instance
                 */
                EventSourcedStreamIn.prototype.event = null;

                /**
                 * EventSourcedStreamIn command.
                 * @member {akkaserverless.component.entity.ICommand|null|undefined} command
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedStreamIn
                 * @instance
                 */
                EventSourcedStreamIn.prototype.command = null;

                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;

                /**
                 * EventSourcedStreamIn message.
                 * @member {"init"|"event"|"command"|undefined} message
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedStreamIn
                 * @instance
                 */
                Object.defineProperty(EventSourcedStreamIn.prototype, "message", {
                    get: $util.oneOfGetter($oneOfFields = ["init", "event", "command"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Creates a new EventSourcedStreamIn instance using the specified properties.
                 * @function create
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedStreamIn
                 * @static
                 * @param {akkaserverless.component.eventsourcedentity.IEventSourcedStreamIn=} [properties] Properties to set
                 * @returns {akkaserverless.component.eventsourcedentity.EventSourcedStreamIn} EventSourcedStreamIn instance
                 */
                EventSourcedStreamIn.create = function create(properties) {
                    return new EventSourcedStreamIn(properties);
                };

                /**
                 * Encodes the specified EventSourcedStreamIn message. Does not implicitly {@link akkaserverless.component.eventsourcedentity.EventSourcedStreamIn.verify|verify} messages.
                 * @function encode
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedStreamIn
                 * @static
                 * @param {akkaserverless.component.eventsourcedentity.IEventSourcedStreamIn} message EventSourcedStreamIn message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EventSourcedStreamIn.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.init != null && Object.hasOwnProperty.call(message, "init"))
                        $root.akkaserverless.component.eventsourcedentity.EventSourcedInit.encode(message.init, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.event != null && Object.hasOwnProperty.call(message, "event"))
                        $root.akkaserverless.component.eventsourcedentity.EventSourcedEvent.encode(message.event, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.command != null && Object.hasOwnProperty.call(message, "command"))
                        $root.akkaserverless.component.entity.Command.encode(message.command, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified EventSourcedStreamIn message, length delimited. Does not implicitly {@link akkaserverless.component.eventsourcedentity.EventSourcedStreamIn.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedStreamIn
                 * @static
                 * @param {akkaserverless.component.eventsourcedentity.IEventSourcedStreamIn} message EventSourcedStreamIn message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EventSourcedStreamIn.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an EventSourcedStreamIn message from the specified reader or buffer.
                 * @function decode
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedStreamIn
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {akkaserverless.component.eventsourcedentity.EventSourcedStreamIn} EventSourcedStreamIn
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EventSourcedStreamIn.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.eventsourcedentity.EventSourcedStreamIn();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.init = $root.akkaserverless.component.eventsourcedentity.EventSourcedInit.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.event = $root.akkaserverless.component.eventsourcedentity.EventSourcedEvent.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.command = $root.akkaserverless.component.entity.Command.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an EventSourcedStreamIn message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedStreamIn
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {akkaserverless.component.eventsourcedentity.EventSourcedStreamIn} EventSourcedStreamIn
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EventSourcedStreamIn.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an EventSourcedStreamIn message.
                 * @function verify
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedStreamIn
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EventSourcedStreamIn.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.init != null && message.hasOwnProperty("init")) {
                        properties.message = 1;
                        {
                            var error = $root.akkaserverless.component.eventsourcedentity.EventSourcedInit.verify(message.init);
                            if (error)
                                return "init." + error;
                        }
                    }
                    if (message.event != null && message.hasOwnProperty("event")) {
                        if (properties.message === 1)
                            return "message: multiple values";
                        properties.message = 1;
                        {
                            var error = $root.akkaserverless.component.eventsourcedentity.EventSourcedEvent.verify(message.event);
                            if (error)
                                return "event." + error;
                        }
                    }
                    if (message.command != null && message.hasOwnProperty("command")) {
                        if (properties.message === 1)
                            return "message: multiple values";
                        properties.message = 1;
                        {
                            var error = $root.akkaserverless.component.entity.Command.verify(message.command);
                            if (error)
                                return "command." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates an EventSourcedStreamIn message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedStreamIn
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {akkaserverless.component.eventsourcedentity.EventSourcedStreamIn} EventSourcedStreamIn
                 */
                EventSourcedStreamIn.fromObject = function fromObject(object) {
                    if (object instanceof $root.akkaserverless.component.eventsourcedentity.EventSourcedStreamIn)
                        return object;
                    var message = new $root.akkaserverless.component.eventsourcedentity.EventSourcedStreamIn();
                    if (object.init != null) {
                        if (typeof object.init !== "object")
                            throw TypeError(".akkaserverless.component.eventsourcedentity.EventSourcedStreamIn.init: object expected");
                        message.init = $root.akkaserverless.component.eventsourcedentity.EventSourcedInit.fromObject(object.init);
                    }
                    if (object.event != null) {
                        if (typeof object.event !== "object")
                            throw TypeError(".akkaserverless.component.eventsourcedentity.EventSourcedStreamIn.event: object expected");
                        message.event = $root.akkaserverless.component.eventsourcedentity.EventSourcedEvent.fromObject(object.event);
                    }
                    if (object.command != null) {
                        if (typeof object.command !== "object")
                            throw TypeError(".akkaserverless.component.eventsourcedentity.EventSourcedStreamIn.command: object expected");
                        message.command = $root.akkaserverless.component.entity.Command.fromObject(object.command);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an EventSourcedStreamIn message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedStreamIn
                 * @static
                 * @param {akkaserverless.component.eventsourcedentity.EventSourcedStreamIn} message EventSourcedStreamIn
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EventSourcedStreamIn.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (message.init != null && message.hasOwnProperty("init")) {
                        object.init = $root.akkaserverless.component.eventsourcedentity.EventSourcedInit.toObject(message.init, options);
                        if (options.oneofs)
                            object.message = "init";
                    }
                    if (message.event != null && message.hasOwnProperty("event")) {
                        object.event = $root.akkaserverless.component.eventsourcedentity.EventSourcedEvent.toObject(message.event, options);
                        if (options.oneofs)
                            object.message = "event";
                    }
                    if (message.command != null && message.hasOwnProperty("command")) {
                        object.command = $root.akkaserverless.component.entity.Command.toObject(message.command, options);
                        if (options.oneofs)
                            object.message = "command";
                    }
                    return object;
                };

                /**
                 * Converts this EventSourcedStreamIn to JSON.
                 * @function toJSON
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedStreamIn
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EventSourcedStreamIn.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return EventSourcedStreamIn;
            })();

            eventsourcedentity.EventSourcedStreamOut = (function() {

                /**
                 * Properties of an EventSourcedStreamOut.
                 * @memberof akkaserverless.component.eventsourcedentity
                 * @interface IEventSourcedStreamOut
                 * @property {akkaserverless.component.eventsourcedentity.IEventSourcedReply|null} [reply] EventSourcedStreamOut reply
                 * @property {akkaserverless.component.IFailure|null} [failure] EventSourcedStreamOut failure
                 */

                /**
                 * Constructs a new EventSourcedStreamOut.
                 * @memberof akkaserverless.component.eventsourcedentity
                 * @classdesc Represents an EventSourcedStreamOut.
                 * @implements IEventSourcedStreamOut
                 * @constructor
                 * @param {akkaserverless.component.eventsourcedentity.IEventSourcedStreamOut=} [properties] Properties to set
                 */
                function EventSourcedStreamOut(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * EventSourcedStreamOut reply.
                 * @member {akkaserverless.component.eventsourcedentity.IEventSourcedReply|null|undefined} reply
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedStreamOut
                 * @instance
                 */
                EventSourcedStreamOut.prototype.reply = null;

                /**
                 * EventSourcedStreamOut failure.
                 * @member {akkaserverless.component.IFailure|null|undefined} failure
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedStreamOut
                 * @instance
                 */
                EventSourcedStreamOut.prototype.failure = null;

                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;

                /**
                 * EventSourcedStreamOut message.
                 * @member {"reply"|"failure"|undefined} message
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedStreamOut
                 * @instance
                 */
                Object.defineProperty(EventSourcedStreamOut.prototype, "message", {
                    get: $util.oneOfGetter($oneOfFields = ["reply", "failure"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Creates a new EventSourcedStreamOut instance using the specified properties.
                 * @function create
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedStreamOut
                 * @static
                 * @param {akkaserverless.component.eventsourcedentity.IEventSourcedStreamOut=} [properties] Properties to set
                 * @returns {akkaserverless.component.eventsourcedentity.EventSourcedStreamOut} EventSourcedStreamOut instance
                 */
                EventSourcedStreamOut.create = function create(properties) {
                    return new EventSourcedStreamOut(properties);
                };

                /**
                 * Encodes the specified EventSourcedStreamOut message. Does not implicitly {@link akkaserverless.component.eventsourcedentity.EventSourcedStreamOut.verify|verify} messages.
                 * @function encode
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedStreamOut
                 * @static
                 * @param {akkaserverless.component.eventsourcedentity.IEventSourcedStreamOut} message EventSourcedStreamOut message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EventSourcedStreamOut.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.reply != null && Object.hasOwnProperty.call(message, "reply"))
                        $root.akkaserverless.component.eventsourcedentity.EventSourcedReply.encode(message.reply, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.failure != null && Object.hasOwnProperty.call(message, "failure"))
                        $root.akkaserverless.component.Failure.encode(message.failure, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified EventSourcedStreamOut message, length delimited. Does not implicitly {@link akkaserverless.component.eventsourcedentity.EventSourcedStreamOut.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedStreamOut
                 * @static
                 * @param {akkaserverless.component.eventsourcedentity.IEventSourcedStreamOut} message EventSourcedStreamOut message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EventSourcedStreamOut.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an EventSourcedStreamOut message from the specified reader or buffer.
                 * @function decode
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedStreamOut
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {akkaserverless.component.eventsourcedentity.EventSourcedStreamOut} EventSourcedStreamOut
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EventSourcedStreamOut.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.eventsourcedentity.EventSourcedStreamOut();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.reply = $root.akkaserverless.component.eventsourcedentity.EventSourcedReply.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.failure = $root.akkaserverless.component.Failure.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an EventSourcedStreamOut message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedStreamOut
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {akkaserverless.component.eventsourcedentity.EventSourcedStreamOut} EventSourcedStreamOut
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EventSourcedStreamOut.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an EventSourcedStreamOut message.
                 * @function verify
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedStreamOut
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EventSourcedStreamOut.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.reply != null && message.hasOwnProperty("reply")) {
                        properties.message = 1;
                        {
                            var error = $root.akkaserverless.component.eventsourcedentity.EventSourcedReply.verify(message.reply);
                            if (error)
                                return "reply." + error;
                        }
                    }
                    if (message.failure != null && message.hasOwnProperty("failure")) {
                        if (properties.message === 1)
                            return "message: multiple values";
                        properties.message = 1;
                        {
                            var error = $root.akkaserverless.component.Failure.verify(message.failure);
                            if (error)
                                return "failure." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates an EventSourcedStreamOut message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedStreamOut
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {akkaserverless.component.eventsourcedentity.EventSourcedStreamOut} EventSourcedStreamOut
                 */
                EventSourcedStreamOut.fromObject = function fromObject(object) {
                    if (object instanceof $root.akkaserverless.component.eventsourcedentity.EventSourcedStreamOut)
                        return object;
                    var message = new $root.akkaserverless.component.eventsourcedentity.EventSourcedStreamOut();
                    if (object.reply != null) {
                        if (typeof object.reply !== "object")
                            throw TypeError(".akkaserverless.component.eventsourcedentity.EventSourcedStreamOut.reply: object expected");
                        message.reply = $root.akkaserverless.component.eventsourcedentity.EventSourcedReply.fromObject(object.reply);
                    }
                    if (object.failure != null) {
                        if (typeof object.failure !== "object")
                            throw TypeError(".akkaserverless.component.eventsourcedentity.EventSourcedStreamOut.failure: object expected");
                        message.failure = $root.akkaserverless.component.Failure.fromObject(object.failure);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an EventSourcedStreamOut message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedStreamOut
                 * @static
                 * @param {akkaserverless.component.eventsourcedentity.EventSourcedStreamOut} message EventSourcedStreamOut
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EventSourcedStreamOut.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (message.reply != null && message.hasOwnProperty("reply")) {
                        object.reply = $root.akkaserverless.component.eventsourcedentity.EventSourcedReply.toObject(message.reply, options);
                        if (options.oneofs)
                            object.message = "reply";
                    }
                    if (message.failure != null && message.hasOwnProperty("failure")) {
                        object.failure = $root.akkaserverless.component.Failure.toObject(message.failure, options);
                        if (options.oneofs)
                            object.message = "failure";
                    }
                    return object;
                };

                /**
                 * Converts this EventSourcedStreamOut to JSON.
                 * @function toJSON
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedStreamOut
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EventSourcedStreamOut.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return EventSourcedStreamOut;
            })();

            eventsourcedentity.EventSourcedEntities = (function() {

                /**
                 * Constructs a new EventSourcedEntities service.
                 * @memberof akkaserverless.component.eventsourcedentity
                 * @classdesc Represents an EventSourcedEntities
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function EventSourcedEntities(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (EventSourcedEntities.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = EventSourcedEntities;

                /**
                 * Creates new EventSourcedEntities service using the specified rpc implementation.
                 * @function create
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedEntities
                 * @static
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 * @returns {EventSourcedEntities} RPC service. Useful where requests and/or responses are streamed.
                 */
                EventSourcedEntities.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                    return new this(rpcImpl, requestDelimited, responseDelimited);
                };

                /**
                 * Callback as used by {@link akkaserverless.component.eventsourcedentity.EventSourcedEntities#handle}.
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedEntities
                 * @typedef HandleCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {akkaserverless.component.eventsourcedentity.EventSourcedStreamOut} [response] EventSourcedStreamOut
                 */

                /**
                 * Calls Handle.
                 * @function handle
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedEntities
                 * @instance
                 * @param {akkaserverless.component.eventsourcedentity.IEventSourcedStreamIn} request EventSourcedStreamIn message or plain object
                 * @param {akkaserverless.component.eventsourcedentity.EventSourcedEntities.HandleCallback} callback Node-style callback called with the error, if any, and EventSourcedStreamOut
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(EventSourcedEntities.prototype.handle = function handle(request, callback) {
                    return this.rpcCall(handle, $root.akkaserverless.component.eventsourcedentity.EventSourcedStreamIn, $root.akkaserverless.component.eventsourcedentity.EventSourcedStreamOut, request, callback);
                }, "name", { value: "Handle" });

                /**
                 * Calls Handle.
                 * @function handle
                 * @memberof akkaserverless.component.eventsourcedentity.EventSourcedEntities
                 * @instance
                 * @param {akkaserverless.component.eventsourcedentity.IEventSourcedStreamIn} request EventSourcedStreamIn message or plain object
                 * @returns {Promise<akkaserverless.component.eventsourcedentity.EventSourcedStreamOut>} Promise
                 * @variation 2
                 */

                return EventSourcedEntities;
            })();

            return eventsourcedentity;
        })();

        component.valueentity = (function() {

            /**
             * Namespace valueentity.
             * @memberof akkaserverless.component
             * @namespace
             */
            var valueentity = {};

            valueentity.ValueEntities = (function() {

                /**
                 * Constructs a new ValueEntities service.
                 * @memberof akkaserverless.component.valueentity
                 * @classdesc Represents a ValueEntities
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function ValueEntities(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (ValueEntities.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = ValueEntities;

                /**
                 * Creates new ValueEntities service using the specified rpc implementation.
                 * @function create
                 * @memberof akkaserverless.component.valueentity.ValueEntities
                 * @static
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 * @returns {ValueEntities} RPC service. Useful where requests and/or responses are streamed.
                 */
                ValueEntities.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                    return new this(rpcImpl, requestDelimited, responseDelimited);
                };

                /**
                 * Callback as used by {@link akkaserverless.component.valueentity.ValueEntities#handle}.
                 * @memberof akkaserverless.component.valueentity.ValueEntities
                 * @typedef HandleCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {akkaserverless.component.valueentity.ValueEntityStreamOut} [response] ValueEntityStreamOut
                 */

                /**
                 * Calls Handle.
                 * @function handle
                 * @memberof akkaserverless.component.valueentity.ValueEntities
                 * @instance
                 * @param {akkaserverless.component.valueentity.IValueEntityStreamIn} request ValueEntityStreamIn message or plain object
                 * @param {akkaserverless.component.valueentity.ValueEntities.HandleCallback} callback Node-style callback called with the error, if any, and ValueEntityStreamOut
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ValueEntities.prototype.handle = function handle(request, callback) {
                    return this.rpcCall(handle, $root.akkaserverless.component.valueentity.ValueEntityStreamIn, $root.akkaserverless.component.valueentity.ValueEntityStreamOut, request, callback);
                }, "name", { value: "Handle" });

                /**
                 * Calls Handle.
                 * @function handle
                 * @memberof akkaserverless.component.valueentity.ValueEntities
                 * @instance
                 * @param {akkaserverless.component.valueentity.IValueEntityStreamIn} request ValueEntityStreamIn message or plain object
                 * @returns {Promise<akkaserverless.component.valueentity.ValueEntityStreamOut>} Promise
                 * @variation 2
                 */

                return ValueEntities;
            })();

            valueentity.ValueEntityStreamIn = (function() {

                /**
                 * Properties of a ValueEntityStreamIn.
                 * @memberof akkaserverless.component.valueentity
                 * @interface IValueEntityStreamIn
                 * @property {akkaserverless.component.valueentity.IValueEntityInit|null} [init] ValueEntityStreamIn init
                 * @property {akkaserverless.component.entity.ICommand|null} [command] ValueEntityStreamIn command
                 */

                /**
                 * Constructs a new ValueEntityStreamIn.
                 * @memberof akkaserverless.component.valueentity
                 * @classdesc Represents a ValueEntityStreamIn.
                 * @implements IValueEntityStreamIn
                 * @constructor
                 * @param {akkaserverless.component.valueentity.IValueEntityStreamIn=} [properties] Properties to set
                 */
                function ValueEntityStreamIn(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ValueEntityStreamIn init.
                 * @member {akkaserverless.component.valueentity.IValueEntityInit|null|undefined} init
                 * @memberof akkaserverless.component.valueentity.ValueEntityStreamIn
                 * @instance
                 */
                ValueEntityStreamIn.prototype.init = null;

                /**
                 * ValueEntityStreamIn command.
                 * @member {akkaserverless.component.entity.ICommand|null|undefined} command
                 * @memberof akkaserverless.component.valueentity.ValueEntityStreamIn
                 * @instance
                 */
                ValueEntityStreamIn.prototype.command = null;

                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;

                /**
                 * ValueEntityStreamIn message.
                 * @member {"init"|"command"|undefined} message
                 * @memberof akkaserverless.component.valueentity.ValueEntityStreamIn
                 * @instance
                 */
                Object.defineProperty(ValueEntityStreamIn.prototype, "message", {
                    get: $util.oneOfGetter($oneOfFields = ["init", "command"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Creates a new ValueEntityStreamIn instance using the specified properties.
                 * @function create
                 * @memberof akkaserverless.component.valueentity.ValueEntityStreamIn
                 * @static
                 * @param {akkaserverless.component.valueentity.IValueEntityStreamIn=} [properties] Properties to set
                 * @returns {akkaserverless.component.valueentity.ValueEntityStreamIn} ValueEntityStreamIn instance
                 */
                ValueEntityStreamIn.create = function create(properties) {
                    return new ValueEntityStreamIn(properties);
                };

                /**
                 * Encodes the specified ValueEntityStreamIn message. Does not implicitly {@link akkaserverless.component.valueentity.ValueEntityStreamIn.verify|verify} messages.
                 * @function encode
                 * @memberof akkaserverless.component.valueentity.ValueEntityStreamIn
                 * @static
                 * @param {akkaserverless.component.valueentity.IValueEntityStreamIn} message ValueEntityStreamIn message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ValueEntityStreamIn.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.init != null && Object.hasOwnProperty.call(message, "init"))
                        $root.akkaserverless.component.valueentity.ValueEntityInit.encode(message.init, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.command != null && Object.hasOwnProperty.call(message, "command"))
                        $root.akkaserverless.component.entity.Command.encode(message.command, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified ValueEntityStreamIn message, length delimited. Does not implicitly {@link akkaserverless.component.valueentity.ValueEntityStreamIn.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof akkaserverless.component.valueentity.ValueEntityStreamIn
                 * @static
                 * @param {akkaserverless.component.valueentity.IValueEntityStreamIn} message ValueEntityStreamIn message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ValueEntityStreamIn.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ValueEntityStreamIn message from the specified reader or buffer.
                 * @function decode
                 * @memberof akkaserverless.component.valueentity.ValueEntityStreamIn
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {akkaserverless.component.valueentity.ValueEntityStreamIn} ValueEntityStreamIn
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ValueEntityStreamIn.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.valueentity.ValueEntityStreamIn();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.init = $root.akkaserverless.component.valueentity.ValueEntityInit.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.command = $root.akkaserverless.component.entity.Command.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ValueEntityStreamIn message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof akkaserverless.component.valueentity.ValueEntityStreamIn
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {akkaserverless.component.valueentity.ValueEntityStreamIn} ValueEntityStreamIn
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ValueEntityStreamIn.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ValueEntityStreamIn message.
                 * @function verify
                 * @memberof akkaserverless.component.valueentity.ValueEntityStreamIn
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ValueEntityStreamIn.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.init != null && message.hasOwnProperty("init")) {
                        properties.message = 1;
                        {
                            var error = $root.akkaserverless.component.valueentity.ValueEntityInit.verify(message.init);
                            if (error)
                                return "init." + error;
                        }
                    }
                    if (message.command != null && message.hasOwnProperty("command")) {
                        if (properties.message === 1)
                            return "message: multiple values";
                        properties.message = 1;
                        {
                            var error = $root.akkaserverless.component.entity.Command.verify(message.command);
                            if (error)
                                return "command." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a ValueEntityStreamIn message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof akkaserverless.component.valueentity.ValueEntityStreamIn
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {akkaserverless.component.valueentity.ValueEntityStreamIn} ValueEntityStreamIn
                 */
                ValueEntityStreamIn.fromObject = function fromObject(object) {
                    if (object instanceof $root.akkaserverless.component.valueentity.ValueEntityStreamIn)
                        return object;
                    var message = new $root.akkaserverless.component.valueentity.ValueEntityStreamIn();
                    if (object.init != null) {
                        if (typeof object.init !== "object")
                            throw TypeError(".akkaserverless.component.valueentity.ValueEntityStreamIn.init: object expected");
                        message.init = $root.akkaserverless.component.valueentity.ValueEntityInit.fromObject(object.init);
                    }
                    if (object.command != null) {
                        if (typeof object.command !== "object")
                            throw TypeError(".akkaserverless.component.valueentity.ValueEntityStreamIn.command: object expected");
                        message.command = $root.akkaserverless.component.entity.Command.fromObject(object.command);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a ValueEntityStreamIn message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof akkaserverless.component.valueentity.ValueEntityStreamIn
                 * @static
                 * @param {akkaserverless.component.valueentity.ValueEntityStreamIn} message ValueEntityStreamIn
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ValueEntityStreamIn.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (message.init != null && message.hasOwnProperty("init")) {
                        object.init = $root.akkaserverless.component.valueentity.ValueEntityInit.toObject(message.init, options);
                        if (options.oneofs)
                            object.message = "init";
                    }
                    if (message.command != null && message.hasOwnProperty("command")) {
                        object.command = $root.akkaserverless.component.entity.Command.toObject(message.command, options);
                        if (options.oneofs)
                            object.message = "command";
                    }
                    return object;
                };

                /**
                 * Converts this ValueEntityStreamIn to JSON.
                 * @function toJSON
                 * @memberof akkaserverless.component.valueentity.ValueEntityStreamIn
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ValueEntityStreamIn.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ValueEntityStreamIn;
            })();

            valueentity.ValueEntityInit = (function() {

                /**
                 * Properties of a ValueEntityInit.
                 * @memberof akkaserverless.component.valueentity
                 * @interface IValueEntityInit
                 * @property {string|null} [serviceName] ValueEntityInit serviceName
                 * @property {string|null} [entityId] ValueEntityInit entityId
                 * @property {akkaserverless.component.valueentity.IValueEntityInitState|null} [state] ValueEntityInit state
                 */

                /**
                 * Constructs a new ValueEntityInit.
                 * @memberof akkaserverless.component.valueentity
                 * @classdesc Represents a ValueEntityInit.
                 * @implements IValueEntityInit
                 * @constructor
                 * @param {akkaserverless.component.valueentity.IValueEntityInit=} [properties] Properties to set
                 */
                function ValueEntityInit(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ValueEntityInit serviceName.
                 * @member {string} serviceName
                 * @memberof akkaserverless.component.valueentity.ValueEntityInit
                 * @instance
                 */
                ValueEntityInit.prototype.serviceName = "";

                /**
                 * ValueEntityInit entityId.
                 * @member {string} entityId
                 * @memberof akkaserverless.component.valueentity.ValueEntityInit
                 * @instance
                 */
                ValueEntityInit.prototype.entityId = "";

                /**
                 * ValueEntityInit state.
                 * @member {akkaserverless.component.valueentity.IValueEntityInitState|null|undefined} state
                 * @memberof akkaserverless.component.valueentity.ValueEntityInit
                 * @instance
                 */
                ValueEntityInit.prototype.state = null;

                /**
                 * Creates a new ValueEntityInit instance using the specified properties.
                 * @function create
                 * @memberof akkaserverless.component.valueentity.ValueEntityInit
                 * @static
                 * @param {akkaserverless.component.valueentity.IValueEntityInit=} [properties] Properties to set
                 * @returns {akkaserverless.component.valueentity.ValueEntityInit} ValueEntityInit instance
                 */
                ValueEntityInit.create = function create(properties) {
                    return new ValueEntityInit(properties);
                };

                /**
                 * Encodes the specified ValueEntityInit message. Does not implicitly {@link akkaserverless.component.valueentity.ValueEntityInit.verify|verify} messages.
                 * @function encode
                 * @memberof akkaserverless.component.valueentity.ValueEntityInit
                 * @static
                 * @param {akkaserverless.component.valueentity.IValueEntityInit} message ValueEntityInit message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ValueEntityInit.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.serviceName != null && Object.hasOwnProperty.call(message, "serviceName"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.serviceName);
                    if (message.entityId != null && Object.hasOwnProperty.call(message, "entityId"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.entityId);
                    if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                        $root.akkaserverless.component.valueentity.ValueEntityInitState.encode(message.state, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified ValueEntityInit message, length delimited. Does not implicitly {@link akkaserverless.component.valueentity.ValueEntityInit.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof akkaserverless.component.valueentity.ValueEntityInit
                 * @static
                 * @param {akkaserverless.component.valueentity.IValueEntityInit} message ValueEntityInit message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ValueEntityInit.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ValueEntityInit message from the specified reader or buffer.
                 * @function decode
                 * @memberof akkaserverless.component.valueentity.ValueEntityInit
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {akkaserverless.component.valueentity.ValueEntityInit} ValueEntityInit
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ValueEntityInit.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.valueentity.ValueEntityInit();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.serviceName = reader.string();
                            break;
                        case 2:
                            message.entityId = reader.string();
                            break;
                        case 3:
                            message.state = $root.akkaserverless.component.valueentity.ValueEntityInitState.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ValueEntityInit message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof akkaserverless.component.valueentity.ValueEntityInit
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {akkaserverless.component.valueentity.ValueEntityInit} ValueEntityInit
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ValueEntityInit.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ValueEntityInit message.
                 * @function verify
                 * @memberof akkaserverless.component.valueentity.ValueEntityInit
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ValueEntityInit.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                        if (!$util.isString(message.serviceName))
                            return "serviceName: string expected";
                    if (message.entityId != null && message.hasOwnProperty("entityId"))
                        if (!$util.isString(message.entityId))
                            return "entityId: string expected";
                    if (message.state != null && message.hasOwnProperty("state")) {
                        var error = $root.akkaserverless.component.valueentity.ValueEntityInitState.verify(message.state);
                        if (error)
                            return "state." + error;
                    }
                    return null;
                };

                /**
                 * Creates a ValueEntityInit message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof akkaserverless.component.valueentity.ValueEntityInit
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {akkaserverless.component.valueentity.ValueEntityInit} ValueEntityInit
                 */
                ValueEntityInit.fromObject = function fromObject(object) {
                    if (object instanceof $root.akkaserverless.component.valueentity.ValueEntityInit)
                        return object;
                    var message = new $root.akkaserverless.component.valueentity.ValueEntityInit();
                    if (object.serviceName != null)
                        message.serviceName = String(object.serviceName);
                    if (object.entityId != null)
                        message.entityId = String(object.entityId);
                    if (object.state != null) {
                        if (typeof object.state !== "object")
                            throw TypeError(".akkaserverless.component.valueentity.ValueEntityInit.state: object expected");
                        message.state = $root.akkaserverless.component.valueentity.ValueEntityInitState.fromObject(object.state);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a ValueEntityInit message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof akkaserverless.component.valueentity.ValueEntityInit
                 * @static
                 * @param {akkaserverless.component.valueentity.ValueEntityInit} message ValueEntityInit
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ValueEntityInit.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.serviceName = "";
                        object.entityId = "";
                        object.state = null;
                    }
                    if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                        object.serviceName = message.serviceName;
                    if (message.entityId != null && message.hasOwnProperty("entityId"))
                        object.entityId = message.entityId;
                    if (message.state != null && message.hasOwnProperty("state"))
                        object.state = $root.akkaserverless.component.valueentity.ValueEntityInitState.toObject(message.state, options);
                    return object;
                };

                /**
                 * Converts this ValueEntityInit to JSON.
                 * @function toJSON
                 * @memberof akkaserverless.component.valueentity.ValueEntityInit
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ValueEntityInit.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ValueEntityInit;
            })();

            valueentity.ValueEntityInitState = (function() {

                /**
                 * Properties of a ValueEntityInitState.
                 * @memberof akkaserverless.component.valueentity
                 * @interface IValueEntityInitState
                 * @property {google.protobuf.IAny|null} [value] ValueEntityInitState value
                 */

                /**
                 * Constructs a new ValueEntityInitState.
                 * @memberof akkaserverless.component.valueentity
                 * @classdesc Represents a ValueEntityInitState.
                 * @implements IValueEntityInitState
                 * @constructor
                 * @param {akkaserverless.component.valueentity.IValueEntityInitState=} [properties] Properties to set
                 */
                function ValueEntityInitState(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ValueEntityInitState value.
                 * @member {google.protobuf.IAny|null|undefined} value
                 * @memberof akkaserverless.component.valueentity.ValueEntityInitState
                 * @instance
                 */
                ValueEntityInitState.prototype.value = null;

                /**
                 * Creates a new ValueEntityInitState instance using the specified properties.
                 * @function create
                 * @memberof akkaserverless.component.valueentity.ValueEntityInitState
                 * @static
                 * @param {akkaserverless.component.valueentity.IValueEntityInitState=} [properties] Properties to set
                 * @returns {akkaserverless.component.valueentity.ValueEntityInitState} ValueEntityInitState instance
                 */
                ValueEntityInitState.create = function create(properties) {
                    return new ValueEntityInitState(properties);
                };

                /**
                 * Encodes the specified ValueEntityInitState message. Does not implicitly {@link akkaserverless.component.valueentity.ValueEntityInitState.verify|verify} messages.
                 * @function encode
                 * @memberof akkaserverless.component.valueentity.ValueEntityInitState
                 * @static
                 * @param {akkaserverless.component.valueentity.IValueEntityInitState} message ValueEntityInitState message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ValueEntityInitState.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                        $root.google.protobuf.Any.encode(message.value, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified ValueEntityInitState message, length delimited. Does not implicitly {@link akkaserverless.component.valueentity.ValueEntityInitState.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof akkaserverless.component.valueentity.ValueEntityInitState
                 * @static
                 * @param {akkaserverless.component.valueentity.IValueEntityInitState} message ValueEntityInitState message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ValueEntityInitState.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ValueEntityInitState message from the specified reader or buffer.
                 * @function decode
                 * @memberof akkaserverless.component.valueentity.ValueEntityInitState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {akkaserverless.component.valueentity.ValueEntityInitState} ValueEntityInitState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ValueEntityInitState.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.valueentity.ValueEntityInitState();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.value = $root.google.protobuf.Any.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ValueEntityInitState message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof akkaserverless.component.valueentity.ValueEntityInitState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {akkaserverless.component.valueentity.ValueEntityInitState} ValueEntityInitState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ValueEntityInitState.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ValueEntityInitState message.
                 * @function verify
                 * @memberof akkaserverless.component.valueentity.ValueEntityInitState
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ValueEntityInitState.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.value != null && message.hasOwnProperty("value")) {
                        var error = $root.google.protobuf.Any.verify(message.value);
                        if (error)
                            return "value." + error;
                    }
                    return null;
                };

                /**
                 * Creates a ValueEntityInitState message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof akkaserverless.component.valueentity.ValueEntityInitState
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {akkaserverless.component.valueentity.ValueEntityInitState} ValueEntityInitState
                 */
                ValueEntityInitState.fromObject = function fromObject(object) {
                    if (object instanceof $root.akkaserverless.component.valueentity.ValueEntityInitState)
                        return object;
                    var message = new $root.akkaserverless.component.valueentity.ValueEntityInitState();
                    if (object.value != null) {
                        if (typeof object.value !== "object")
                            throw TypeError(".akkaserverless.component.valueentity.ValueEntityInitState.value: object expected");
                        message.value = $root.google.protobuf.Any.fromObject(object.value);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a ValueEntityInitState message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof akkaserverless.component.valueentity.ValueEntityInitState
                 * @static
                 * @param {akkaserverless.component.valueentity.ValueEntityInitState} message ValueEntityInitState
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ValueEntityInitState.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.value = null;
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = $root.google.protobuf.Any.toObject(message.value, options);
                    return object;
                };

                /**
                 * Converts this ValueEntityInitState to JSON.
                 * @function toJSON
                 * @memberof akkaserverless.component.valueentity.ValueEntityInitState
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ValueEntityInitState.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ValueEntityInitState;
            })();

            valueentity.ValueEntityStreamOut = (function() {

                /**
                 * Properties of a ValueEntityStreamOut.
                 * @memberof akkaserverless.component.valueentity
                 * @interface IValueEntityStreamOut
                 * @property {akkaserverless.component.valueentity.IValueEntityReply|null} [reply] ValueEntityStreamOut reply
                 * @property {akkaserverless.component.IFailure|null} [failure] ValueEntityStreamOut failure
                 */

                /**
                 * Constructs a new ValueEntityStreamOut.
                 * @memberof akkaserverless.component.valueentity
                 * @classdesc Represents a ValueEntityStreamOut.
                 * @implements IValueEntityStreamOut
                 * @constructor
                 * @param {akkaserverless.component.valueentity.IValueEntityStreamOut=} [properties] Properties to set
                 */
                function ValueEntityStreamOut(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ValueEntityStreamOut reply.
                 * @member {akkaserverless.component.valueentity.IValueEntityReply|null|undefined} reply
                 * @memberof akkaserverless.component.valueentity.ValueEntityStreamOut
                 * @instance
                 */
                ValueEntityStreamOut.prototype.reply = null;

                /**
                 * ValueEntityStreamOut failure.
                 * @member {akkaserverless.component.IFailure|null|undefined} failure
                 * @memberof akkaserverless.component.valueentity.ValueEntityStreamOut
                 * @instance
                 */
                ValueEntityStreamOut.prototype.failure = null;

                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;

                /**
                 * ValueEntityStreamOut message.
                 * @member {"reply"|"failure"|undefined} message
                 * @memberof akkaserverless.component.valueentity.ValueEntityStreamOut
                 * @instance
                 */
                Object.defineProperty(ValueEntityStreamOut.prototype, "message", {
                    get: $util.oneOfGetter($oneOfFields = ["reply", "failure"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Creates a new ValueEntityStreamOut instance using the specified properties.
                 * @function create
                 * @memberof akkaserverless.component.valueentity.ValueEntityStreamOut
                 * @static
                 * @param {akkaserverless.component.valueentity.IValueEntityStreamOut=} [properties] Properties to set
                 * @returns {akkaserverless.component.valueentity.ValueEntityStreamOut} ValueEntityStreamOut instance
                 */
                ValueEntityStreamOut.create = function create(properties) {
                    return new ValueEntityStreamOut(properties);
                };

                /**
                 * Encodes the specified ValueEntityStreamOut message. Does not implicitly {@link akkaserverless.component.valueentity.ValueEntityStreamOut.verify|verify} messages.
                 * @function encode
                 * @memberof akkaserverless.component.valueentity.ValueEntityStreamOut
                 * @static
                 * @param {akkaserverless.component.valueentity.IValueEntityStreamOut} message ValueEntityStreamOut message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ValueEntityStreamOut.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.reply != null && Object.hasOwnProperty.call(message, "reply"))
                        $root.akkaserverless.component.valueentity.ValueEntityReply.encode(message.reply, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.failure != null && Object.hasOwnProperty.call(message, "failure"))
                        $root.akkaserverless.component.Failure.encode(message.failure, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified ValueEntityStreamOut message, length delimited. Does not implicitly {@link akkaserverless.component.valueentity.ValueEntityStreamOut.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof akkaserverless.component.valueentity.ValueEntityStreamOut
                 * @static
                 * @param {akkaserverless.component.valueentity.IValueEntityStreamOut} message ValueEntityStreamOut message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ValueEntityStreamOut.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ValueEntityStreamOut message from the specified reader or buffer.
                 * @function decode
                 * @memberof akkaserverless.component.valueentity.ValueEntityStreamOut
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {akkaserverless.component.valueentity.ValueEntityStreamOut} ValueEntityStreamOut
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ValueEntityStreamOut.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.valueentity.ValueEntityStreamOut();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.reply = $root.akkaserverless.component.valueentity.ValueEntityReply.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.failure = $root.akkaserverless.component.Failure.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ValueEntityStreamOut message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof akkaserverless.component.valueentity.ValueEntityStreamOut
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {akkaserverless.component.valueentity.ValueEntityStreamOut} ValueEntityStreamOut
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ValueEntityStreamOut.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ValueEntityStreamOut message.
                 * @function verify
                 * @memberof akkaserverless.component.valueentity.ValueEntityStreamOut
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ValueEntityStreamOut.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.reply != null && message.hasOwnProperty("reply")) {
                        properties.message = 1;
                        {
                            var error = $root.akkaserverless.component.valueentity.ValueEntityReply.verify(message.reply);
                            if (error)
                                return "reply." + error;
                        }
                    }
                    if (message.failure != null && message.hasOwnProperty("failure")) {
                        if (properties.message === 1)
                            return "message: multiple values";
                        properties.message = 1;
                        {
                            var error = $root.akkaserverless.component.Failure.verify(message.failure);
                            if (error)
                                return "failure." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a ValueEntityStreamOut message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof akkaserverless.component.valueentity.ValueEntityStreamOut
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {akkaserverless.component.valueentity.ValueEntityStreamOut} ValueEntityStreamOut
                 */
                ValueEntityStreamOut.fromObject = function fromObject(object) {
                    if (object instanceof $root.akkaserverless.component.valueentity.ValueEntityStreamOut)
                        return object;
                    var message = new $root.akkaserverless.component.valueentity.ValueEntityStreamOut();
                    if (object.reply != null) {
                        if (typeof object.reply !== "object")
                            throw TypeError(".akkaserverless.component.valueentity.ValueEntityStreamOut.reply: object expected");
                        message.reply = $root.akkaserverless.component.valueentity.ValueEntityReply.fromObject(object.reply);
                    }
                    if (object.failure != null) {
                        if (typeof object.failure !== "object")
                            throw TypeError(".akkaserverless.component.valueentity.ValueEntityStreamOut.failure: object expected");
                        message.failure = $root.akkaserverless.component.Failure.fromObject(object.failure);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a ValueEntityStreamOut message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof akkaserverless.component.valueentity.ValueEntityStreamOut
                 * @static
                 * @param {akkaserverless.component.valueentity.ValueEntityStreamOut} message ValueEntityStreamOut
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ValueEntityStreamOut.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (message.reply != null && message.hasOwnProperty("reply")) {
                        object.reply = $root.akkaserverless.component.valueentity.ValueEntityReply.toObject(message.reply, options);
                        if (options.oneofs)
                            object.message = "reply";
                    }
                    if (message.failure != null && message.hasOwnProperty("failure")) {
                        object.failure = $root.akkaserverless.component.Failure.toObject(message.failure, options);
                        if (options.oneofs)
                            object.message = "failure";
                    }
                    return object;
                };

                /**
                 * Converts this ValueEntityStreamOut to JSON.
                 * @function toJSON
                 * @memberof akkaserverless.component.valueentity.ValueEntityStreamOut
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ValueEntityStreamOut.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ValueEntityStreamOut;
            })();

            valueentity.ValueEntityReply = (function() {

                /**
                 * Properties of a ValueEntityReply.
                 * @memberof akkaserverless.component.valueentity
                 * @interface IValueEntityReply
                 * @property {number|Long|null} [commandId] ValueEntityReply commandId
                 * @property {akkaserverless.component.IClientAction|null} [clientAction] ValueEntityReply clientAction
                 * @property {Array.<akkaserverless.component.ISideEffect>|null} [sideEffects] ValueEntityReply sideEffects
                 * @property {akkaserverless.component.valueentity.IValueEntityAction|null} [stateAction] ValueEntityReply stateAction
                 */

                /**
                 * Constructs a new ValueEntityReply.
                 * @memberof akkaserverless.component.valueentity
                 * @classdesc Represents a ValueEntityReply.
                 * @implements IValueEntityReply
                 * @constructor
                 * @param {akkaserverless.component.valueentity.IValueEntityReply=} [properties] Properties to set
                 */
                function ValueEntityReply(properties) {
                    this.sideEffects = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ValueEntityReply commandId.
                 * @member {number|Long} commandId
                 * @memberof akkaserverless.component.valueentity.ValueEntityReply
                 * @instance
                 */
                ValueEntityReply.prototype.commandId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * ValueEntityReply clientAction.
                 * @member {akkaserverless.component.IClientAction|null|undefined} clientAction
                 * @memberof akkaserverless.component.valueentity.ValueEntityReply
                 * @instance
                 */
                ValueEntityReply.prototype.clientAction = null;

                /**
                 * ValueEntityReply sideEffects.
                 * @member {Array.<akkaserverless.component.ISideEffect>} sideEffects
                 * @memberof akkaserverless.component.valueentity.ValueEntityReply
                 * @instance
                 */
                ValueEntityReply.prototype.sideEffects = $util.emptyArray;

                /**
                 * ValueEntityReply stateAction.
                 * @member {akkaserverless.component.valueentity.IValueEntityAction|null|undefined} stateAction
                 * @memberof akkaserverless.component.valueentity.ValueEntityReply
                 * @instance
                 */
                ValueEntityReply.prototype.stateAction = null;

                /**
                 * Creates a new ValueEntityReply instance using the specified properties.
                 * @function create
                 * @memberof akkaserverless.component.valueentity.ValueEntityReply
                 * @static
                 * @param {akkaserverless.component.valueentity.IValueEntityReply=} [properties] Properties to set
                 * @returns {akkaserverless.component.valueentity.ValueEntityReply} ValueEntityReply instance
                 */
                ValueEntityReply.create = function create(properties) {
                    return new ValueEntityReply(properties);
                };

                /**
                 * Encodes the specified ValueEntityReply message. Does not implicitly {@link akkaserverless.component.valueentity.ValueEntityReply.verify|verify} messages.
                 * @function encode
                 * @memberof akkaserverless.component.valueentity.ValueEntityReply
                 * @static
                 * @param {akkaserverless.component.valueentity.IValueEntityReply} message ValueEntityReply message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ValueEntityReply.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commandId != null && Object.hasOwnProperty.call(message, "commandId"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.commandId);
                    if (message.clientAction != null && Object.hasOwnProperty.call(message, "clientAction"))
                        $root.akkaserverless.component.ClientAction.encode(message.clientAction, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.sideEffects != null && message.sideEffects.length)
                        for (var i = 0; i < message.sideEffects.length; ++i)
                            $root.akkaserverless.component.SideEffect.encode(message.sideEffects[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.stateAction != null && Object.hasOwnProperty.call(message, "stateAction"))
                        $root.akkaserverless.component.valueentity.ValueEntityAction.encode(message.stateAction, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified ValueEntityReply message, length delimited. Does not implicitly {@link akkaserverless.component.valueentity.ValueEntityReply.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof akkaserverless.component.valueentity.ValueEntityReply
                 * @static
                 * @param {akkaserverless.component.valueentity.IValueEntityReply} message ValueEntityReply message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ValueEntityReply.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ValueEntityReply message from the specified reader or buffer.
                 * @function decode
                 * @memberof akkaserverless.component.valueentity.ValueEntityReply
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {akkaserverless.component.valueentity.ValueEntityReply} ValueEntityReply
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ValueEntityReply.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.valueentity.ValueEntityReply();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commandId = reader.int64();
                            break;
                        case 2:
                            message.clientAction = $root.akkaserverless.component.ClientAction.decode(reader, reader.uint32());
                            break;
                        case 3:
                            if (!(message.sideEffects && message.sideEffects.length))
                                message.sideEffects = [];
                            message.sideEffects.push($root.akkaserverless.component.SideEffect.decode(reader, reader.uint32()));
                            break;
                        case 4:
                            message.stateAction = $root.akkaserverless.component.valueentity.ValueEntityAction.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ValueEntityReply message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof akkaserverless.component.valueentity.ValueEntityReply
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {akkaserverless.component.valueentity.ValueEntityReply} ValueEntityReply
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ValueEntityReply.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ValueEntityReply message.
                 * @function verify
                 * @memberof akkaserverless.component.valueentity.ValueEntityReply
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ValueEntityReply.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commandId != null && message.hasOwnProperty("commandId"))
                        if (!$util.isInteger(message.commandId) && !(message.commandId && $util.isInteger(message.commandId.low) && $util.isInteger(message.commandId.high)))
                            return "commandId: integer|Long expected";
                    if (message.clientAction != null && message.hasOwnProperty("clientAction")) {
                        var error = $root.akkaserverless.component.ClientAction.verify(message.clientAction);
                        if (error)
                            return "clientAction." + error;
                    }
                    if (message.sideEffects != null && message.hasOwnProperty("sideEffects")) {
                        if (!Array.isArray(message.sideEffects))
                            return "sideEffects: array expected";
                        for (var i = 0; i < message.sideEffects.length; ++i) {
                            var error = $root.akkaserverless.component.SideEffect.verify(message.sideEffects[i]);
                            if (error)
                                return "sideEffects." + error;
                        }
                    }
                    if (message.stateAction != null && message.hasOwnProperty("stateAction")) {
                        var error = $root.akkaserverless.component.valueentity.ValueEntityAction.verify(message.stateAction);
                        if (error)
                            return "stateAction." + error;
                    }
                    return null;
                };

                /**
                 * Creates a ValueEntityReply message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof akkaserverless.component.valueentity.ValueEntityReply
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {akkaserverless.component.valueentity.ValueEntityReply} ValueEntityReply
                 */
                ValueEntityReply.fromObject = function fromObject(object) {
                    if (object instanceof $root.akkaserverless.component.valueentity.ValueEntityReply)
                        return object;
                    var message = new $root.akkaserverless.component.valueentity.ValueEntityReply();
                    if (object.commandId != null)
                        if ($util.Long)
                            (message.commandId = $util.Long.fromValue(object.commandId)).unsigned = false;
                        else if (typeof object.commandId === "string")
                            message.commandId = parseInt(object.commandId, 10);
                        else if (typeof object.commandId === "number")
                            message.commandId = object.commandId;
                        else if (typeof object.commandId === "object")
                            message.commandId = new $util.LongBits(object.commandId.low >>> 0, object.commandId.high >>> 0).toNumber();
                    if (object.clientAction != null) {
                        if (typeof object.clientAction !== "object")
                            throw TypeError(".akkaserverless.component.valueentity.ValueEntityReply.clientAction: object expected");
                        message.clientAction = $root.akkaserverless.component.ClientAction.fromObject(object.clientAction);
                    }
                    if (object.sideEffects) {
                        if (!Array.isArray(object.sideEffects))
                            throw TypeError(".akkaserverless.component.valueentity.ValueEntityReply.sideEffects: array expected");
                        message.sideEffects = [];
                        for (var i = 0; i < object.sideEffects.length; ++i) {
                            if (typeof object.sideEffects[i] !== "object")
                                throw TypeError(".akkaserverless.component.valueentity.ValueEntityReply.sideEffects: object expected");
                            message.sideEffects[i] = $root.akkaserverless.component.SideEffect.fromObject(object.sideEffects[i]);
                        }
                    }
                    if (object.stateAction != null) {
                        if (typeof object.stateAction !== "object")
                            throw TypeError(".akkaserverless.component.valueentity.ValueEntityReply.stateAction: object expected");
                        message.stateAction = $root.akkaserverless.component.valueentity.ValueEntityAction.fromObject(object.stateAction);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a ValueEntityReply message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof akkaserverless.component.valueentity.ValueEntityReply
                 * @static
                 * @param {akkaserverless.component.valueentity.ValueEntityReply} message ValueEntityReply
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ValueEntityReply.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.sideEffects = [];
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.commandId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.commandId = options.longs === String ? "0" : 0;
                        object.clientAction = null;
                        object.stateAction = null;
                    }
                    if (message.commandId != null && message.hasOwnProperty("commandId"))
                        if (typeof message.commandId === "number")
                            object.commandId = options.longs === String ? String(message.commandId) : message.commandId;
                        else
                            object.commandId = options.longs === String ? $util.Long.prototype.toString.call(message.commandId) : options.longs === Number ? new $util.LongBits(message.commandId.low >>> 0, message.commandId.high >>> 0).toNumber() : message.commandId;
                    if (message.clientAction != null && message.hasOwnProperty("clientAction"))
                        object.clientAction = $root.akkaserverless.component.ClientAction.toObject(message.clientAction, options);
                    if (message.sideEffects && message.sideEffects.length) {
                        object.sideEffects = [];
                        for (var j = 0; j < message.sideEffects.length; ++j)
                            object.sideEffects[j] = $root.akkaserverless.component.SideEffect.toObject(message.sideEffects[j], options);
                    }
                    if (message.stateAction != null && message.hasOwnProperty("stateAction"))
                        object.stateAction = $root.akkaserverless.component.valueentity.ValueEntityAction.toObject(message.stateAction, options);
                    return object;
                };

                /**
                 * Converts this ValueEntityReply to JSON.
                 * @function toJSON
                 * @memberof akkaserverless.component.valueentity.ValueEntityReply
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ValueEntityReply.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ValueEntityReply;
            })();

            valueentity.ValueEntityAction = (function() {

                /**
                 * Properties of a ValueEntityAction.
                 * @memberof akkaserverless.component.valueentity
                 * @interface IValueEntityAction
                 * @property {akkaserverless.component.valueentity.IValueEntityUpdate|null} [update] ValueEntityAction update
                 * @property {akkaserverless.component.valueentity.IValueEntityDelete|null} ["delete"] ValueEntityAction delete
                 */

                /**
                 * Constructs a new ValueEntityAction.
                 * @memberof akkaserverless.component.valueentity
                 * @classdesc Represents a ValueEntityAction.
                 * @implements IValueEntityAction
                 * @constructor
                 * @param {akkaserverless.component.valueentity.IValueEntityAction=} [properties] Properties to set
                 */
                function ValueEntityAction(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ValueEntityAction update.
                 * @member {akkaserverless.component.valueentity.IValueEntityUpdate|null|undefined} update
                 * @memberof akkaserverless.component.valueentity.ValueEntityAction
                 * @instance
                 */
                ValueEntityAction.prototype.update = null;

                /**
                 * ValueEntityAction delete.
                 * @member {akkaserverless.component.valueentity.IValueEntityDelete|null|undefined} delete
                 * @memberof akkaserverless.component.valueentity.ValueEntityAction
                 * @instance
                 */
                ValueEntityAction.prototype["delete"] = null;

                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;

                /**
                 * ValueEntityAction action.
                 * @member {"update"|"delete"|undefined} action
                 * @memberof akkaserverless.component.valueentity.ValueEntityAction
                 * @instance
                 */
                Object.defineProperty(ValueEntityAction.prototype, "action", {
                    get: $util.oneOfGetter($oneOfFields = ["update", "delete"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Creates a new ValueEntityAction instance using the specified properties.
                 * @function create
                 * @memberof akkaserverless.component.valueentity.ValueEntityAction
                 * @static
                 * @param {akkaserverless.component.valueentity.IValueEntityAction=} [properties] Properties to set
                 * @returns {akkaserverless.component.valueentity.ValueEntityAction} ValueEntityAction instance
                 */
                ValueEntityAction.create = function create(properties) {
                    return new ValueEntityAction(properties);
                };

                /**
                 * Encodes the specified ValueEntityAction message. Does not implicitly {@link akkaserverless.component.valueentity.ValueEntityAction.verify|verify} messages.
                 * @function encode
                 * @memberof akkaserverless.component.valueentity.ValueEntityAction
                 * @static
                 * @param {akkaserverless.component.valueentity.IValueEntityAction} message ValueEntityAction message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ValueEntityAction.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.update != null && Object.hasOwnProperty.call(message, "update"))
                        $root.akkaserverless.component.valueentity.ValueEntityUpdate.encode(message.update, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message["delete"] != null && Object.hasOwnProperty.call(message, "delete"))
                        $root.akkaserverless.component.valueentity.ValueEntityDelete.encode(message["delete"], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified ValueEntityAction message, length delimited. Does not implicitly {@link akkaserverless.component.valueentity.ValueEntityAction.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof akkaserverless.component.valueentity.ValueEntityAction
                 * @static
                 * @param {akkaserverless.component.valueentity.IValueEntityAction} message ValueEntityAction message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ValueEntityAction.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ValueEntityAction message from the specified reader or buffer.
                 * @function decode
                 * @memberof akkaserverless.component.valueentity.ValueEntityAction
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {akkaserverless.component.valueentity.ValueEntityAction} ValueEntityAction
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ValueEntityAction.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.valueentity.ValueEntityAction();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.update = $root.akkaserverless.component.valueentity.ValueEntityUpdate.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message["delete"] = $root.akkaserverless.component.valueentity.ValueEntityDelete.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ValueEntityAction message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof akkaserverless.component.valueentity.ValueEntityAction
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {akkaserverless.component.valueentity.ValueEntityAction} ValueEntityAction
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ValueEntityAction.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ValueEntityAction message.
                 * @function verify
                 * @memberof akkaserverless.component.valueentity.ValueEntityAction
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ValueEntityAction.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.update != null && message.hasOwnProperty("update")) {
                        properties.action = 1;
                        {
                            var error = $root.akkaserverless.component.valueentity.ValueEntityUpdate.verify(message.update);
                            if (error)
                                return "update." + error;
                        }
                    }
                    if (message["delete"] != null && message.hasOwnProperty("delete")) {
                        if (properties.action === 1)
                            return "action: multiple values";
                        properties.action = 1;
                        {
                            var error = $root.akkaserverless.component.valueentity.ValueEntityDelete.verify(message["delete"]);
                            if (error)
                                return "delete." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a ValueEntityAction message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof akkaserverless.component.valueentity.ValueEntityAction
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {akkaserverless.component.valueentity.ValueEntityAction} ValueEntityAction
                 */
                ValueEntityAction.fromObject = function fromObject(object) {
                    if (object instanceof $root.akkaserverless.component.valueentity.ValueEntityAction)
                        return object;
                    var message = new $root.akkaserverless.component.valueentity.ValueEntityAction();
                    if (object.update != null) {
                        if (typeof object.update !== "object")
                            throw TypeError(".akkaserverless.component.valueentity.ValueEntityAction.update: object expected");
                        message.update = $root.akkaserverless.component.valueentity.ValueEntityUpdate.fromObject(object.update);
                    }
                    if (object["delete"] != null) {
                        if (typeof object["delete"] !== "object")
                            throw TypeError(".akkaserverless.component.valueentity.ValueEntityAction.delete: object expected");
                        message["delete"] = $root.akkaserverless.component.valueentity.ValueEntityDelete.fromObject(object["delete"]);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a ValueEntityAction message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof akkaserverless.component.valueentity.ValueEntityAction
                 * @static
                 * @param {akkaserverless.component.valueentity.ValueEntityAction} message ValueEntityAction
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ValueEntityAction.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (message.update != null && message.hasOwnProperty("update")) {
                        object.update = $root.akkaserverless.component.valueentity.ValueEntityUpdate.toObject(message.update, options);
                        if (options.oneofs)
                            object.action = "update";
                    }
                    if (message["delete"] != null && message.hasOwnProperty("delete")) {
                        object["delete"] = $root.akkaserverless.component.valueentity.ValueEntityDelete.toObject(message["delete"], options);
                        if (options.oneofs)
                            object.action = "delete";
                    }
                    return object;
                };

                /**
                 * Converts this ValueEntityAction to JSON.
                 * @function toJSON
                 * @memberof akkaserverless.component.valueentity.ValueEntityAction
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ValueEntityAction.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ValueEntityAction;
            })();

            valueentity.ValueEntityUpdate = (function() {

                /**
                 * Properties of a ValueEntityUpdate.
                 * @memberof akkaserverless.component.valueentity
                 * @interface IValueEntityUpdate
                 * @property {google.protobuf.IAny|null} [value] ValueEntityUpdate value
                 */

                /**
                 * Constructs a new ValueEntityUpdate.
                 * @memberof akkaserverless.component.valueentity
                 * @classdesc Represents a ValueEntityUpdate.
                 * @implements IValueEntityUpdate
                 * @constructor
                 * @param {akkaserverless.component.valueentity.IValueEntityUpdate=} [properties] Properties to set
                 */
                function ValueEntityUpdate(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ValueEntityUpdate value.
                 * @member {google.protobuf.IAny|null|undefined} value
                 * @memberof akkaserverless.component.valueentity.ValueEntityUpdate
                 * @instance
                 */
                ValueEntityUpdate.prototype.value = null;

                /**
                 * Creates a new ValueEntityUpdate instance using the specified properties.
                 * @function create
                 * @memberof akkaserverless.component.valueentity.ValueEntityUpdate
                 * @static
                 * @param {akkaserverless.component.valueentity.IValueEntityUpdate=} [properties] Properties to set
                 * @returns {akkaserverless.component.valueentity.ValueEntityUpdate} ValueEntityUpdate instance
                 */
                ValueEntityUpdate.create = function create(properties) {
                    return new ValueEntityUpdate(properties);
                };

                /**
                 * Encodes the specified ValueEntityUpdate message. Does not implicitly {@link akkaserverless.component.valueentity.ValueEntityUpdate.verify|verify} messages.
                 * @function encode
                 * @memberof akkaserverless.component.valueentity.ValueEntityUpdate
                 * @static
                 * @param {akkaserverless.component.valueentity.IValueEntityUpdate} message ValueEntityUpdate message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ValueEntityUpdate.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                        $root.google.protobuf.Any.encode(message.value, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified ValueEntityUpdate message, length delimited. Does not implicitly {@link akkaserverless.component.valueentity.ValueEntityUpdate.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof akkaserverless.component.valueentity.ValueEntityUpdate
                 * @static
                 * @param {akkaserverless.component.valueentity.IValueEntityUpdate} message ValueEntityUpdate message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ValueEntityUpdate.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ValueEntityUpdate message from the specified reader or buffer.
                 * @function decode
                 * @memberof akkaserverless.component.valueentity.ValueEntityUpdate
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {akkaserverless.component.valueentity.ValueEntityUpdate} ValueEntityUpdate
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ValueEntityUpdate.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.valueentity.ValueEntityUpdate();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.value = $root.google.protobuf.Any.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ValueEntityUpdate message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof akkaserverless.component.valueentity.ValueEntityUpdate
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {akkaserverless.component.valueentity.ValueEntityUpdate} ValueEntityUpdate
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ValueEntityUpdate.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ValueEntityUpdate message.
                 * @function verify
                 * @memberof akkaserverless.component.valueentity.ValueEntityUpdate
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ValueEntityUpdate.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.value != null && message.hasOwnProperty("value")) {
                        var error = $root.google.protobuf.Any.verify(message.value);
                        if (error)
                            return "value." + error;
                    }
                    return null;
                };

                /**
                 * Creates a ValueEntityUpdate message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof akkaserverless.component.valueentity.ValueEntityUpdate
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {akkaserverless.component.valueentity.ValueEntityUpdate} ValueEntityUpdate
                 */
                ValueEntityUpdate.fromObject = function fromObject(object) {
                    if (object instanceof $root.akkaserverless.component.valueentity.ValueEntityUpdate)
                        return object;
                    var message = new $root.akkaserverless.component.valueentity.ValueEntityUpdate();
                    if (object.value != null) {
                        if (typeof object.value !== "object")
                            throw TypeError(".akkaserverless.component.valueentity.ValueEntityUpdate.value: object expected");
                        message.value = $root.google.protobuf.Any.fromObject(object.value);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a ValueEntityUpdate message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof akkaserverless.component.valueentity.ValueEntityUpdate
                 * @static
                 * @param {akkaserverless.component.valueentity.ValueEntityUpdate} message ValueEntityUpdate
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ValueEntityUpdate.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.value = null;
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = $root.google.protobuf.Any.toObject(message.value, options);
                    return object;
                };

                /**
                 * Converts this ValueEntityUpdate to JSON.
                 * @function toJSON
                 * @memberof akkaserverless.component.valueentity.ValueEntityUpdate
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ValueEntityUpdate.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ValueEntityUpdate;
            })();

            valueentity.ValueEntityDelete = (function() {

                /**
                 * Properties of a ValueEntityDelete.
                 * @memberof akkaserverless.component.valueentity
                 * @interface IValueEntityDelete
                 */

                /**
                 * Constructs a new ValueEntityDelete.
                 * @memberof akkaserverless.component.valueentity
                 * @classdesc Represents a ValueEntityDelete.
                 * @implements IValueEntityDelete
                 * @constructor
                 * @param {akkaserverless.component.valueentity.IValueEntityDelete=} [properties] Properties to set
                 */
                function ValueEntityDelete(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Creates a new ValueEntityDelete instance using the specified properties.
                 * @function create
                 * @memberof akkaserverless.component.valueentity.ValueEntityDelete
                 * @static
                 * @param {akkaserverless.component.valueentity.IValueEntityDelete=} [properties] Properties to set
                 * @returns {akkaserverless.component.valueentity.ValueEntityDelete} ValueEntityDelete instance
                 */
                ValueEntityDelete.create = function create(properties) {
                    return new ValueEntityDelete(properties);
                };

                /**
                 * Encodes the specified ValueEntityDelete message. Does not implicitly {@link akkaserverless.component.valueentity.ValueEntityDelete.verify|verify} messages.
                 * @function encode
                 * @memberof akkaserverless.component.valueentity.ValueEntityDelete
                 * @static
                 * @param {akkaserverless.component.valueentity.IValueEntityDelete} message ValueEntityDelete message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ValueEntityDelete.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };

                /**
                 * Encodes the specified ValueEntityDelete message, length delimited. Does not implicitly {@link akkaserverless.component.valueentity.ValueEntityDelete.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof akkaserverless.component.valueentity.ValueEntityDelete
                 * @static
                 * @param {akkaserverless.component.valueentity.IValueEntityDelete} message ValueEntityDelete message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ValueEntityDelete.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ValueEntityDelete message from the specified reader or buffer.
                 * @function decode
                 * @memberof akkaserverless.component.valueentity.ValueEntityDelete
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {akkaserverless.component.valueentity.ValueEntityDelete} ValueEntityDelete
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ValueEntityDelete.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.valueentity.ValueEntityDelete();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ValueEntityDelete message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof akkaserverless.component.valueentity.ValueEntityDelete
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {akkaserverless.component.valueentity.ValueEntityDelete} ValueEntityDelete
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ValueEntityDelete.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ValueEntityDelete message.
                 * @function verify
                 * @memberof akkaserverless.component.valueentity.ValueEntityDelete
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ValueEntityDelete.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };

                /**
                 * Creates a ValueEntityDelete message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof akkaserverless.component.valueentity.ValueEntityDelete
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {akkaserverless.component.valueentity.ValueEntityDelete} ValueEntityDelete
                 */
                ValueEntityDelete.fromObject = function fromObject(object) {
                    if (object instanceof $root.akkaserverless.component.valueentity.ValueEntityDelete)
                        return object;
                    return new $root.akkaserverless.component.valueentity.ValueEntityDelete();
                };

                /**
                 * Creates a plain object from a ValueEntityDelete message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof akkaserverless.component.valueentity.ValueEntityDelete
                 * @static
                 * @param {akkaserverless.component.valueentity.ValueEntityDelete} message ValueEntityDelete
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ValueEntityDelete.toObject = function toObject() {
                    return {};
                };

                /**
                 * Converts this ValueEntityDelete to JSON.
                 * @function toJSON
                 * @memberof akkaserverless.component.valueentity.ValueEntityDelete
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ValueEntityDelete.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ValueEntityDelete;
            })();

            return valueentity;
        })();

        component.view = (function() {

            /**
             * Namespace view.
             * @memberof akkaserverless.component
             * @namespace
             */
            var view = {};

            view.Views = (function() {

                /**
                 * Constructs a new Views service.
                 * @memberof akkaserverless.component.view
                 * @classdesc Represents a Views
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function Views(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (Views.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Views;

                /**
                 * Creates new Views service using the specified rpc implementation.
                 * @function create
                 * @memberof akkaserverless.component.view.Views
                 * @static
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 * @returns {Views} RPC service. Useful where requests and/or responses are streamed.
                 */
                Views.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                    return new this(rpcImpl, requestDelimited, responseDelimited);
                };

                /**
                 * Callback as used by {@link akkaserverless.component.view.Views#handle}.
                 * @memberof akkaserverless.component.view.Views
                 * @typedef HandleCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {akkaserverless.component.view.ViewStreamOut} [response] ViewStreamOut
                 */

                /**
                 * Calls Handle.
                 * @function handle
                 * @memberof akkaserverless.component.view.Views
                 * @instance
                 * @param {akkaserverless.component.view.IViewStreamIn} request ViewStreamIn message or plain object
                 * @param {akkaserverless.component.view.Views.HandleCallback} callback Node-style callback called with the error, if any, and ViewStreamOut
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Views.prototype.handle = function handle(request, callback) {
                    return this.rpcCall(handle, $root.akkaserverless.component.view.ViewStreamIn, $root.akkaserverless.component.view.ViewStreamOut, request, callback);
                }, "name", { value: "Handle" });

                /**
                 * Calls Handle.
                 * @function handle
                 * @memberof akkaserverless.component.view.Views
                 * @instance
                 * @param {akkaserverless.component.view.IViewStreamIn} request ViewStreamIn message or plain object
                 * @returns {Promise<akkaserverless.component.view.ViewStreamOut>} Promise
                 * @variation 2
                 */

                return Views;
            })();

            view.ViewStreamIn = (function() {

                /**
                 * Properties of a ViewStreamIn.
                 * @memberof akkaserverless.component.view
                 * @interface IViewStreamIn
                 * @property {akkaserverless.component.view.IReceiveEvent|null} [receive] ViewStreamIn receive
                 */

                /**
                 * Constructs a new ViewStreamIn.
                 * @memberof akkaserverless.component.view
                 * @classdesc Represents a ViewStreamIn.
                 * @implements IViewStreamIn
                 * @constructor
                 * @param {akkaserverless.component.view.IViewStreamIn=} [properties] Properties to set
                 */
                function ViewStreamIn(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ViewStreamIn receive.
                 * @member {akkaserverless.component.view.IReceiveEvent|null|undefined} receive
                 * @memberof akkaserverless.component.view.ViewStreamIn
                 * @instance
                 */
                ViewStreamIn.prototype.receive = null;

                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;

                /**
                 * ViewStreamIn message.
                 * @member {"receive"|undefined} message
                 * @memberof akkaserverless.component.view.ViewStreamIn
                 * @instance
                 */
                Object.defineProperty(ViewStreamIn.prototype, "message", {
                    get: $util.oneOfGetter($oneOfFields = ["receive"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Creates a new ViewStreamIn instance using the specified properties.
                 * @function create
                 * @memberof akkaserverless.component.view.ViewStreamIn
                 * @static
                 * @param {akkaserverless.component.view.IViewStreamIn=} [properties] Properties to set
                 * @returns {akkaserverless.component.view.ViewStreamIn} ViewStreamIn instance
                 */
                ViewStreamIn.create = function create(properties) {
                    return new ViewStreamIn(properties);
                };

                /**
                 * Encodes the specified ViewStreamIn message. Does not implicitly {@link akkaserverless.component.view.ViewStreamIn.verify|verify} messages.
                 * @function encode
                 * @memberof akkaserverless.component.view.ViewStreamIn
                 * @static
                 * @param {akkaserverless.component.view.IViewStreamIn} message ViewStreamIn message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ViewStreamIn.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.receive != null && Object.hasOwnProperty.call(message, "receive"))
                        $root.akkaserverless.component.view.ReceiveEvent.encode(message.receive, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified ViewStreamIn message, length delimited. Does not implicitly {@link akkaserverless.component.view.ViewStreamIn.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof akkaserverless.component.view.ViewStreamIn
                 * @static
                 * @param {akkaserverless.component.view.IViewStreamIn} message ViewStreamIn message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ViewStreamIn.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ViewStreamIn message from the specified reader or buffer.
                 * @function decode
                 * @memberof akkaserverless.component.view.ViewStreamIn
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {akkaserverless.component.view.ViewStreamIn} ViewStreamIn
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ViewStreamIn.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.view.ViewStreamIn();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.receive = $root.akkaserverless.component.view.ReceiveEvent.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ViewStreamIn message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof akkaserverless.component.view.ViewStreamIn
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {akkaserverless.component.view.ViewStreamIn} ViewStreamIn
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ViewStreamIn.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ViewStreamIn message.
                 * @function verify
                 * @memberof akkaserverless.component.view.ViewStreamIn
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ViewStreamIn.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.receive != null && message.hasOwnProperty("receive")) {
                        properties.message = 1;
                        {
                            var error = $root.akkaserverless.component.view.ReceiveEvent.verify(message.receive);
                            if (error)
                                return "receive." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a ViewStreamIn message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof akkaserverless.component.view.ViewStreamIn
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {akkaserverless.component.view.ViewStreamIn} ViewStreamIn
                 */
                ViewStreamIn.fromObject = function fromObject(object) {
                    if (object instanceof $root.akkaserverless.component.view.ViewStreamIn)
                        return object;
                    var message = new $root.akkaserverless.component.view.ViewStreamIn();
                    if (object.receive != null) {
                        if (typeof object.receive !== "object")
                            throw TypeError(".akkaserverless.component.view.ViewStreamIn.receive: object expected");
                        message.receive = $root.akkaserverless.component.view.ReceiveEvent.fromObject(object.receive);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a ViewStreamIn message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof akkaserverless.component.view.ViewStreamIn
                 * @static
                 * @param {akkaserverless.component.view.ViewStreamIn} message ViewStreamIn
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ViewStreamIn.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (message.receive != null && message.hasOwnProperty("receive")) {
                        object.receive = $root.akkaserverless.component.view.ReceiveEvent.toObject(message.receive, options);
                        if (options.oneofs)
                            object.message = "receive";
                    }
                    return object;
                };

                /**
                 * Converts this ViewStreamIn to JSON.
                 * @function toJSON
                 * @memberof akkaserverless.component.view.ViewStreamIn
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ViewStreamIn.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ViewStreamIn;
            })();

            view.ReceiveEvent = (function() {

                /**
                 * Properties of a ReceiveEvent.
                 * @memberof akkaserverless.component.view
                 * @interface IReceiveEvent
                 * @property {string|null} [serviceName] ReceiveEvent serviceName
                 * @property {string|null} [commandName] ReceiveEvent commandName
                 * @property {google.protobuf.IAny|null} [payload] ReceiveEvent payload
                 * @property {akkaserverless.component.IMetadata|null} [metadata] ReceiveEvent metadata
                 * @property {string|null} [initialTable] ReceiveEvent initialTable
                 * @property {akkaserverless.component.view.IKey|null} [key] ReceiveEvent key
                 * @property {akkaserverless.component.view.IRow|null} [bySubjectLookupResult] ReceiveEvent bySubjectLookupResult
                 */

                /**
                 * Constructs a new ReceiveEvent.
                 * @memberof akkaserverless.component.view
                 * @classdesc Represents a ReceiveEvent.
                 * @implements IReceiveEvent
                 * @constructor
                 * @param {akkaserverless.component.view.IReceiveEvent=} [properties] Properties to set
                 */
                function ReceiveEvent(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ReceiveEvent serviceName.
                 * @member {string} serviceName
                 * @memberof akkaserverless.component.view.ReceiveEvent
                 * @instance
                 */
                ReceiveEvent.prototype.serviceName = "";

                /**
                 * ReceiveEvent commandName.
                 * @member {string} commandName
                 * @memberof akkaserverless.component.view.ReceiveEvent
                 * @instance
                 */
                ReceiveEvent.prototype.commandName = "";

                /**
                 * ReceiveEvent payload.
                 * @member {google.protobuf.IAny|null|undefined} payload
                 * @memberof akkaserverless.component.view.ReceiveEvent
                 * @instance
                 */
                ReceiveEvent.prototype.payload = null;

                /**
                 * ReceiveEvent metadata.
                 * @member {akkaserverless.component.IMetadata|null|undefined} metadata
                 * @memberof akkaserverless.component.view.ReceiveEvent
                 * @instance
                 */
                ReceiveEvent.prototype.metadata = null;

                /**
                 * ReceiveEvent initialTable.
                 * @member {string} initialTable
                 * @memberof akkaserverless.component.view.ReceiveEvent
                 * @instance
                 */
                ReceiveEvent.prototype.initialTable = "";

                /**
                 * ReceiveEvent key.
                 * @member {akkaserverless.component.view.IKey|null|undefined} key
                 * @memberof akkaserverless.component.view.ReceiveEvent
                 * @instance
                 */
                ReceiveEvent.prototype.key = null;

                /**
                 * ReceiveEvent bySubjectLookupResult.
                 * @member {akkaserverless.component.view.IRow|null|undefined} bySubjectLookupResult
                 * @memberof akkaserverless.component.view.ReceiveEvent
                 * @instance
                 */
                ReceiveEvent.prototype.bySubjectLookupResult = null;

                /**
                 * Creates a new ReceiveEvent instance using the specified properties.
                 * @function create
                 * @memberof akkaserverless.component.view.ReceiveEvent
                 * @static
                 * @param {akkaserverless.component.view.IReceiveEvent=} [properties] Properties to set
                 * @returns {akkaserverless.component.view.ReceiveEvent} ReceiveEvent instance
                 */
                ReceiveEvent.create = function create(properties) {
                    return new ReceiveEvent(properties);
                };

                /**
                 * Encodes the specified ReceiveEvent message. Does not implicitly {@link akkaserverless.component.view.ReceiveEvent.verify|verify} messages.
                 * @function encode
                 * @memberof akkaserverless.component.view.ReceiveEvent
                 * @static
                 * @param {akkaserverless.component.view.IReceiveEvent} message ReceiveEvent message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ReceiveEvent.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.serviceName != null && Object.hasOwnProperty.call(message, "serviceName"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.serviceName);
                    if (message.commandName != null && Object.hasOwnProperty.call(message, "commandName"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.commandName);
                    if (message.payload != null && Object.hasOwnProperty.call(message, "payload"))
                        $root.google.protobuf.Any.encode(message.payload, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                        $root.akkaserverless.component.Metadata.encode(message.metadata, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.initialTable != null && Object.hasOwnProperty.call(message, "initialTable"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.initialTable);
                    if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                        $root.akkaserverless.component.view.Key.encode(message.key, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.bySubjectLookupResult != null && Object.hasOwnProperty.call(message, "bySubjectLookupResult"))
                        $root.akkaserverless.component.view.Row.encode(message.bySubjectLookupResult, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified ReceiveEvent message, length delimited. Does not implicitly {@link akkaserverless.component.view.ReceiveEvent.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof akkaserverless.component.view.ReceiveEvent
                 * @static
                 * @param {akkaserverless.component.view.IReceiveEvent} message ReceiveEvent message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ReceiveEvent.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ReceiveEvent message from the specified reader or buffer.
                 * @function decode
                 * @memberof akkaserverless.component.view.ReceiveEvent
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {akkaserverless.component.view.ReceiveEvent} ReceiveEvent
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ReceiveEvent.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.view.ReceiveEvent();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.serviceName = reader.string();
                            break;
                        case 2:
                            message.commandName = reader.string();
                            break;
                        case 3:
                            message.payload = $root.google.protobuf.Any.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.metadata = $root.akkaserverless.component.Metadata.decode(reader, reader.uint32());
                            break;
                        case 5:
                            message.initialTable = reader.string();
                            break;
                        case 6:
                            message.key = $root.akkaserverless.component.view.Key.decode(reader, reader.uint32());
                            break;
                        case 7:
                            message.bySubjectLookupResult = $root.akkaserverless.component.view.Row.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ReceiveEvent message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof akkaserverless.component.view.ReceiveEvent
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {akkaserverless.component.view.ReceiveEvent} ReceiveEvent
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ReceiveEvent.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ReceiveEvent message.
                 * @function verify
                 * @memberof akkaserverless.component.view.ReceiveEvent
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ReceiveEvent.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                        if (!$util.isString(message.serviceName))
                            return "serviceName: string expected";
                    if (message.commandName != null && message.hasOwnProperty("commandName"))
                        if (!$util.isString(message.commandName))
                            return "commandName: string expected";
                    if (message.payload != null && message.hasOwnProperty("payload")) {
                        var error = $root.google.protobuf.Any.verify(message.payload);
                        if (error)
                            return "payload." + error;
                    }
                    if (message.metadata != null && message.hasOwnProperty("metadata")) {
                        var error = $root.akkaserverless.component.Metadata.verify(message.metadata);
                        if (error)
                            return "metadata." + error;
                    }
                    if (message.initialTable != null && message.hasOwnProperty("initialTable"))
                        if (!$util.isString(message.initialTable))
                            return "initialTable: string expected";
                    if (message.key != null && message.hasOwnProperty("key")) {
                        var error = $root.akkaserverless.component.view.Key.verify(message.key);
                        if (error)
                            return "key." + error;
                    }
                    if (message.bySubjectLookupResult != null && message.hasOwnProperty("bySubjectLookupResult")) {
                        var error = $root.akkaserverless.component.view.Row.verify(message.bySubjectLookupResult);
                        if (error)
                            return "bySubjectLookupResult." + error;
                    }
                    return null;
                };

                /**
                 * Creates a ReceiveEvent message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof akkaserverless.component.view.ReceiveEvent
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {akkaserverless.component.view.ReceiveEvent} ReceiveEvent
                 */
                ReceiveEvent.fromObject = function fromObject(object) {
                    if (object instanceof $root.akkaserverless.component.view.ReceiveEvent)
                        return object;
                    var message = new $root.akkaserverless.component.view.ReceiveEvent();
                    if (object.serviceName != null)
                        message.serviceName = String(object.serviceName);
                    if (object.commandName != null)
                        message.commandName = String(object.commandName);
                    if (object.payload != null) {
                        if (typeof object.payload !== "object")
                            throw TypeError(".akkaserverless.component.view.ReceiveEvent.payload: object expected");
                        message.payload = $root.google.protobuf.Any.fromObject(object.payload);
                    }
                    if (object.metadata != null) {
                        if (typeof object.metadata !== "object")
                            throw TypeError(".akkaserverless.component.view.ReceiveEvent.metadata: object expected");
                        message.metadata = $root.akkaserverless.component.Metadata.fromObject(object.metadata);
                    }
                    if (object.initialTable != null)
                        message.initialTable = String(object.initialTable);
                    if (object.key != null) {
                        if (typeof object.key !== "object")
                            throw TypeError(".akkaserverless.component.view.ReceiveEvent.key: object expected");
                        message.key = $root.akkaserverless.component.view.Key.fromObject(object.key);
                    }
                    if (object.bySubjectLookupResult != null) {
                        if (typeof object.bySubjectLookupResult !== "object")
                            throw TypeError(".akkaserverless.component.view.ReceiveEvent.bySubjectLookupResult: object expected");
                        message.bySubjectLookupResult = $root.akkaserverless.component.view.Row.fromObject(object.bySubjectLookupResult);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a ReceiveEvent message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof akkaserverless.component.view.ReceiveEvent
                 * @static
                 * @param {akkaserverless.component.view.ReceiveEvent} message ReceiveEvent
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ReceiveEvent.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.serviceName = "";
                        object.commandName = "";
                        object.payload = null;
                        object.metadata = null;
                        object.initialTable = "";
                        object.key = null;
                        object.bySubjectLookupResult = null;
                    }
                    if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                        object.serviceName = message.serviceName;
                    if (message.commandName != null && message.hasOwnProperty("commandName"))
                        object.commandName = message.commandName;
                    if (message.payload != null && message.hasOwnProperty("payload"))
                        object.payload = $root.google.protobuf.Any.toObject(message.payload, options);
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        object.metadata = $root.akkaserverless.component.Metadata.toObject(message.metadata, options);
                    if (message.initialTable != null && message.hasOwnProperty("initialTable"))
                        object.initialTable = message.initialTable;
                    if (message.key != null && message.hasOwnProperty("key"))
                        object.key = $root.akkaserverless.component.view.Key.toObject(message.key, options);
                    if (message.bySubjectLookupResult != null && message.hasOwnProperty("bySubjectLookupResult"))
                        object.bySubjectLookupResult = $root.akkaserverless.component.view.Row.toObject(message.bySubjectLookupResult, options);
                    return object;
                };

                /**
                 * Converts this ReceiveEvent to JSON.
                 * @function toJSON
                 * @memberof akkaserverless.component.view.ReceiveEvent
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ReceiveEvent.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ReceiveEvent;
            })();

            view.ViewStreamOut = (function() {

                /**
                 * Properties of a ViewStreamOut.
                 * @memberof akkaserverless.component.view
                 * @interface IViewStreamOut
                 * @property {akkaserverless.component.view.IUpsert|null} [upsert] ViewStreamOut upsert
                 */

                /**
                 * Constructs a new ViewStreamOut.
                 * @memberof akkaserverless.component.view
                 * @classdesc Represents a ViewStreamOut.
                 * @implements IViewStreamOut
                 * @constructor
                 * @param {akkaserverless.component.view.IViewStreamOut=} [properties] Properties to set
                 */
                function ViewStreamOut(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ViewStreamOut upsert.
                 * @member {akkaserverless.component.view.IUpsert|null|undefined} upsert
                 * @memberof akkaserverless.component.view.ViewStreamOut
                 * @instance
                 */
                ViewStreamOut.prototype.upsert = null;

                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;

                /**
                 * ViewStreamOut message.
                 * @member {"upsert"|undefined} message
                 * @memberof akkaserverless.component.view.ViewStreamOut
                 * @instance
                 */
                Object.defineProperty(ViewStreamOut.prototype, "message", {
                    get: $util.oneOfGetter($oneOfFields = ["upsert"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Creates a new ViewStreamOut instance using the specified properties.
                 * @function create
                 * @memberof akkaserverless.component.view.ViewStreamOut
                 * @static
                 * @param {akkaserverless.component.view.IViewStreamOut=} [properties] Properties to set
                 * @returns {akkaserverless.component.view.ViewStreamOut} ViewStreamOut instance
                 */
                ViewStreamOut.create = function create(properties) {
                    return new ViewStreamOut(properties);
                };

                /**
                 * Encodes the specified ViewStreamOut message. Does not implicitly {@link akkaserverless.component.view.ViewStreamOut.verify|verify} messages.
                 * @function encode
                 * @memberof akkaserverless.component.view.ViewStreamOut
                 * @static
                 * @param {akkaserverless.component.view.IViewStreamOut} message ViewStreamOut message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ViewStreamOut.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.upsert != null && Object.hasOwnProperty.call(message, "upsert"))
                        $root.akkaserverless.component.view.Upsert.encode(message.upsert, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified ViewStreamOut message, length delimited. Does not implicitly {@link akkaserverless.component.view.ViewStreamOut.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof akkaserverless.component.view.ViewStreamOut
                 * @static
                 * @param {akkaserverless.component.view.IViewStreamOut} message ViewStreamOut message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ViewStreamOut.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ViewStreamOut message from the specified reader or buffer.
                 * @function decode
                 * @memberof akkaserverless.component.view.ViewStreamOut
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {akkaserverless.component.view.ViewStreamOut} ViewStreamOut
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ViewStreamOut.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.view.ViewStreamOut();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.upsert = $root.akkaserverless.component.view.Upsert.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ViewStreamOut message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof akkaserverless.component.view.ViewStreamOut
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {akkaserverless.component.view.ViewStreamOut} ViewStreamOut
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ViewStreamOut.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ViewStreamOut message.
                 * @function verify
                 * @memberof akkaserverless.component.view.ViewStreamOut
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ViewStreamOut.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.upsert != null && message.hasOwnProperty("upsert")) {
                        properties.message = 1;
                        {
                            var error = $root.akkaserverless.component.view.Upsert.verify(message.upsert);
                            if (error)
                                return "upsert." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a ViewStreamOut message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof akkaserverless.component.view.ViewStreamOut
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {akkaserverless.component.view.ViewStreamOut} ViewStreamOut
                 */
                ViewStreamOut.fromObject = function fromObject(object) {
                    if (object instanceof $root.akkaserverless.component.view.ViewStreamOut)
                        return object;
                    var message = new $root.akkaserverless.component.view.ViewStreamOut();
                    if (object.upsert != null) {
                        if (typeof object.upsert !== "object")
                            throw TypeError(".akkaserverless.component.view.ViewStreamOut.upsert: object expected");
                        message.upsert = $root.akkaserverless.component.view.Upsert.fromObject(object.upsert);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a ViewStreamOut message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof akkaserverless.component.view.ViewStreamOut
                 * @static
                 * @param {akkaserverless.component.view.ViewStreamOut} message ViewStreamOut
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ViewStreamOut.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (message.upsert != null && message.hasOwnProperty("upsert")) {
                        object.upsert = $root.akkaserverless.component.view.Upsert.toObject(message.upsert, options);
                        if (options.oneofs)
                            object.message = "upsert";
                    }
                    return object;
                };

                /**
                 * Converts this ViewStreamOut to JSON.
                 * @function toJSON
                 * @memberof akkaserverless.component.view.ViewStreamOut
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ViewStreamOut.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ViewStreamOut;
            })();

            view.Upsert = (function() {

                /**
                 * Properties of an Upsert.
                 * @memberof akkaserverless.component.view
                 * @interface IUpsert
                 * @property {akkaserverless.component.view.IRow|null} [row] Upsert row
                 */

                /**
                 * Constructs a new Upsert.
                 * @memberof akkaserverless.component.view
                 * @classdesc Represents an Upsert.
                 * @implements IUpsert
                 * @constructor
                 * @param {akkaserverless.component.view.IUpsert=} [properties] Properties to set
                 */
                function Upsert(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Upsert row.
                 * @member {akkaserverless.component.view.IRow|null|undefined} row
                 * @memberof akkaserverless.component.view.Upsert
                 * @instance
                 */
                Upsert.prototype.row = null;

                /**
                 * Creates a new Upsert instance using the specified properties.
                 * @function create
                 * @memberof akkaserverless.component.view.Upsert
                 * @static
                 * @param {akkaserverless.component.view.IUpsert=} [properties] Properties to set
                 * @returns {akkaserverless.component.view.Upsert} Upsert instance
                 */
                Upsert.create = function create(properties) {
                    return new Upsert(properties);
                };

                /**
                 * Encodes the specified Upsert message. Does not implicitly {@link akkaserverless.component.view.Upsert.verify|verify} messages.
                 * @function encode
                 * @memberof akkaserverless.component.view.Upsert
                 * @static
                 * @param {akkaserverless.component.view.IUpsert} message Upsert message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Upsert.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.row != null && Object.hasOwnProperty.call(message, "row"))
                        $root.akkaserverless.component.view.Row.encode(message.row, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified Upsert message, length delimited. Does not implicitly {@link akkaserverless.component.view.Upsert.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof akkaserverless.component.view.Upsert
                 * @static
                 * @param {akkaserverless.component.view.IUpsert} message Upsert message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Upsert.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an Upsert message from the specified reader or buffer.
                 * @function decode
                 * @memberof akkaserverless.component.view.Upsert
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {akkaserverless.component.view.Upsert} Upsert
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Upsert.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.view.Upsert();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.row = $root.akkaserverless.component.view.Row.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an Upsert message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof akkaserverless.component.view.Upsert
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {akkaserverless.component.view.Upsert} Upsert
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Upsert.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an Upsert message.
                 * @function verify
                 * @memberof akkaserverless.component.view.Upsert
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Upsert.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.row != null && message.hasOwnProperty("row")) {
                        var error = $root.akkaserverless.component.view.Row.verify(message.row);
                        if (error)
                            return "row." + error;
                    }
                    return null;
                };

                /**
                 * Creates an Upsert message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof akkaserverless.component.view.Upsert
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {akkaserverless.component.view.Upsert} Upsert
                 */
                Upsert.fromObject = function fromObject(object) {
                    if (object instanceof $root.akkaserverless.component.view.Upsert)
                        return object;
                    var message = new $root.akkaserverless.component.view.Upsert();
                    if (object.row != null) {
                        if (typeof object.row !== "object")
                            throw TypeError(".akkaserverless.component.view.Upsert.row: object expected");
                        message.row = $root.akkaserverless.component.view.Row.fromObject(object.row);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an Upsert message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof akkaserverless.component.view.Upsert
                 * @static
                 * @param {akkaserverless.component.view.Upsert} message Upsert
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Upsert.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.row = null;
                    if (message.row != null && message.hasOwnProperty("row"))
                        object.row = $root.akkaserverless.component.view.Row.toObject(message.row, options);
                    return object;
                };

                /**
                 * Converts this Upsert to JSON.
                 * @function toJSON
                 * @memberof akkaserverless.component.view.Upsert
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Upsert.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Upsert;
            })();

            view.Key = (function() {

                /**
                 * Properties of a Key.
                 * @memberof akkaserverless.component.view
                 * @interface IKey
                 * @property {Array.<akkaserverless.component.view.IKeyPart>|null} [parts] Key parts
                 */

                /**
                 * Constructs a new Key.
                 * @memberof akkaserverless.component.view
                 * @classdesc Represents a Key.
                 * @implements IKey
                 * @constructor
                 * @param {akkaserverless.component.view.IKey=} [properties] Properties to set
                 */
                function Key(properties) {
                    this.parts = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Key parts.
                 * @member {Array.<akkaserverless.component.view.IKeyPart>} parts
                 * @memberof akkaserverless.component.view.Key
                 * @instance
                 */
                Key.prototype.parts = $util.emptyArray;

                /**
                 * Creates a new Key instance using the specified properties.
                 * @function create
                 * @memberof akkaserverless.component.view.Key
                 * @static
                 * @param {akkaserverless.component.view.IKey=} [properties] Properties to set
                 * @returns {akkaserverless.component.view.Key} Key instance
                 */
                Key.create = function create(properties) {
                    return new Key(properties);
                };

                /**
                 * Encodes the specified Key message. Does not implicitly {@link akkaserverless.component.view.Key.verify|verify} messages.
                 * @function encode
                 * @memberof akkaserverless.component.view.Key
                 * @static
                 * @param {akkaserverless.component.view.IKey} message Key message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Key.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.parts != null && message.parts.length)
                        for (var i = 0; i < message.parts.length; ++i)
                            $root.akkaserverless.component.view.KeyPart.encode(message.parts[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified Key message, length delimited. Does not implicitly {@link akkaserverless.component.view.Key.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof akkaserverless.component.view.Key
                 * @static
                 * @param {akkaserverless.component.view.IKey} message Key message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Key.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Key message from the specified reader or buffer.
                 * @function decode
                 * @memberof akkaserverless.component.view.Key
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {akkaserverless.component.view.Key} Key
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Key.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.view.Key();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.parts && message.parts.length))
                                message.parts = [];
                            message.parts.push($root.akkaserverless.component.view.KeyPart.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Key message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof akkaserverless.component.view.Key
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {akkaserverless.component.view.Key} Key
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Key.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Key message.
                 * @function verify
                 * @memberof akkaserverless.component.view.Key
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Key.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.parts != null && message.hasOwnProperty("parts")) {
                        if (!Array.isArray(message.parts))
                            return "parts: array expected";
                        for (var i = 0; i < message.parts.length; ++i) {
                            var error = $root.akkaserverless.component.view.KeyPart.verify(message.parts[i]);
                            if (error)
                                return "parts." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a Key message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof akkaserverless.component.view.Key
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {akkaserverless.component.view.Key} Key
                 */
                Key.fromObject = function fromObject(object) {
                    if (object instanceof $root.akkaserverless.component.view.Key)
                        return object;
                    var message = new $root.akkaserverless.component.view.Key();
                    if (object.parts) {
                        if (!Array.isArray(object.parts))
                            throw TypeError(".akkaserverless.component.view.Key.parts: array expected");
                        message.parts = [];
                        for (var i = 0; i < object.parts.length; ++i) {
                            if (typeof object.parts[i] !== "object")
                                throw TypeError(".akkaserverless.component.view.Key.parts: object expected");
                            message.parts[i] = $root.akkaserverless.component.view.KeyPart.fromObject(object.parts[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a Key message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof akkaserverless.component.view.Key
                 * @static
                 * @param {akkaserverless.component.view.Key} message Key
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Key.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.parts = [];
                    if (message.parts && message.parts.length) {
                        object.parts = [];
                        for (var j = 0; j < message.parts.length; ++j)
                            object.parts[j] = $root.akkaserverless.component.view.KeyPart.toObject(message.parts[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this Key to JSON.
                 * @function toJSON
                 * @memberof akkaserverless.component.view.Key
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Key.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Key;
            })();

            view.KeyPart = (function() {

                /**
                 * Properties of a KeyPart.
                 * @memberof akkaserverless.component.view
                 * @interface IKeyPart
                 * @property {string|null} [stringPart] KeyPart stringPart
                 * @property {Uint8Array|null} [bytesPart] KeyPart bytesPart
                 * @property {number|Long|null} [integerPart] KeyPart integerPart
                 * @property {number|null} [floatPart] KeyPart floatPart
                 */

                /**
                 * Constructs a new KeyPart.
                 * @memberof akkaserverless.component.view
                 * @classdesc Represents a KeyPart.
                 * @implements IKeyPart
                 * @constructor
                 * @param {akkaserverless.component.view.IKeyPart=} [properties] Properties to set
                 */
                function KeyPart(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * KeyPart stringPart.
                 * @member {string} stringPart
                 * @memberof akkaserverless.component.view.KeyPart
                 * @instance
                 */
                KeyPart.prototype.stringPart = "";

                /**
                 * KeyPart bytesPart.
                 * @member {Uint8Array} bytesPart
                 * @memberof akkaserverless.component.view.KeyPart
                 * @instance
                 */
                KeyPart.prototype.bytesPart = $util.newBuffer([]);

                /**
                 * KeyPart integerPart.
                 * @member {number|Long} integerPart
                 * @memberof akkaserverless.component.view.KeyPart
                 * @instance
                 */
                KeyPart.prototype.integerPart = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * KeyPart floatPart.
                 * @member {number} floatPart
                 * @memberof akkaserverless.component.view.KeyPart
                 * @instance
                 */
                KeyPart.prototype.floatPart = 0;

                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;

                /**
                 * KeyPart part.
                 * @member {"stringPart"|"bytesPart"|"integerPart"|"floatPart"|undefined} part
                 * @memberof akkaserverless.component.view.KeyPart
                 * @instance
                 */
                Object.defineProperty(KeyPart.prototype, "part", {
                    get: $util.oneOfGetter($oneOfFields = ["stringPart", "bytesPart", "integerPart", "floatPart"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Creates a new KeyPart instance using the specified properties.
                 * @function create
                 * @memberof akkaserverless.component.view.KeyPart
                 * @static
                 * @param {akkaserverless.component.view.IKeyPart=} [properties] Properties to set
                 * @returns {akkaserverless.component.view.KeyPart} KeyPart instance
                 */
                KeyPart.create = function create(properties) {
                    return new KeyPart(properties);
                };

                /**
                 * Encodes the specified KeyPart message. Does not implicitly {@link akkaserverless.component.view.KeyPart.verify|verify} messages.
                 * @function encode
                 * @memberof akkaserverless.component.view.KeyPart
                 * @static
                 * @param {akkaserverless.component.view.IKeyPart} message KeyPart message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                KeyPart.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.stringPart != null && Object.hasOwnProperty.call(message, "stringPart"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.stringPart);
                    if (message.bytesPart != null && Object.hasOwnProperty.call(message, "bytesPart"))
                        writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.bytesPart);
                    if (message.integerPart != null && Object.hasOwnProperty.call(message, "integerPart"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int64(message.integerPart);
                    if (message.floatPart != null && Object.hasOwnProperty.call(message, "floatPart"))
                        writer.uint32(/* id 4, wireType 1 =*/33).double(message.floatPart);
                    return writer;
                };

                /**
                 * Encodes the specified KeyPart message, length delimited. Does not implicitly {@link akkaserverless.component.view.KeyPart.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof akkaserverless.component.view.KeyPart
                 * @static
                 * @param {akkaserverless.component.view.IKeyPart} message KeyPart message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                KeyPart.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a KeyPart message from the specified reader or buffer.
                 * @function decode
                 * @memberof akkaserverless.component.view.KeyPart
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {akkaserverless.component.view.KeyPart} KeyPart
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                KeyPart.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.view.KeyPart();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.stringPart = reader.string();
                            break;
                        case 2:
                            message.bytesPart = reader.bytes();
                            break;
                        case 3:
                            message.integerPart = reader.int64();
                            break;
                        case 4:
                            message.floatPart = reader.double();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a KeyPart message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof akkaserverless.component.view.KeyPart
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {akkaserverless.component.view.KeyPart} KeyPart
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                KeyPart.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a KeyPart message.
                 * @function verify
                 * @memberof akkaserverless.component.view.KeyPart
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                KeyPart.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.stringPart != null && message.hasOwnProperty("stringPart")) {
                        properties.part = 1;
                        if (!$util.isString(message.stringPart))
                            return "stringPart: string expected";
                    }
                    if (message.bytesPart != null && message.hasOwnProperty("bytesPart")) {
                        if (properties.part === 1)
                            return "part: multiple values";
                        properties.part = 1;
                        if (!(message.bytesPart && typeof message.bytesPart.length === "number" || $util.isString(message.bytesPart)))
                            return "bytesPart: buffer expected";
                    }
                    if (message.integerPart != null && message.hasOwnProperty("integerPart")) {
                        if (properties.part === 1)
                            return "part: multiple values";
                        properties.part = 1;
                        if (!$util.isInteger(message.integerPart) && !(message.integerPart && $util.isInteger(message.integerPart.low) && $util.isInteger(message.integerPart.high)))
                            return "integerPart: integer|Long expected";
                    }
                    if (message.floatPart != null && message.hasOwnProperty("floatPart")) {
                        if (properties.part === 1)
                            return "part: multiple values";
                        properties.part = 1;
                        if (typeof message.floatPart !== "number")
                            return "floatPart: number expected";
                    }
                    return null;
                };

                /**
                 * Creates a KeyPart message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof akkaserverless.component.view.KeyPart
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {akkaserverless.component.view.KeyPart} KeyPart
                 */
                KeyPart.fromObject = function fromObject(object) {
                    if (object instanceof $root.akkaserverless.component.view.KeyPart)
                        return object;
                    var message = new $root.akkaserverless.component.view.KeyPart();
                    if (object.stringPart != null)
                        message.stringPart = String(object.stringPart);
                    if (object.bytesPart != null)
                        if (typeof object.bytesPart === "string")
                            $util.base64.decode(object.bytesPart, message.bytesPart = $util.newBuffer($util.base64.length(object.bytesPart)), 0);
                        else if (object.bytesPart.length)
                            message.bytesPart = object.bytesPart;
                    if (object.integerPart != null)
                        if ($util.Long)
                            (message.integerPart = $util.Long.fromValue(object.integerPart)).unsigned = false;
                        else if (typeof object.integerPart === "string")
                            message.integerPart = parseInt(object.integerPart, 10);
                        else if (typeof object.integerPart === "number")
                            message.integerPart = object.integerPart;
                        else if (typeof object.integerPart === "object")
                            message.integerPart = new $util.LongBits(object.integerPart.low >>> 0, object.integerPart.high >>> 0).toNumber();
                    if (object.floatPart != null)
                        message.floatPart = Number(object.floatPart);
                    return message;
                };

                /**
                 * Creates a plain object from a KeyPart message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof akkaserverless.component.view.KeyPart
                 * @static
                 * @param {akkaserverless.component.view.KeyPart} message KeyPart
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                KeyPart.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (message.stringPart != null && message.hasOwnProperty("stringPart")) {
                        object.stringPart = message.stringPart;
                        if (options.oneofs)
                            object.part = "stringPart";
                    }
                    if (message.bytesPart != null && message.hasOwnProperty("bytesPart")) {
                        object.bytesPart = options.bytes === String ? $util.base64.encode(message.bytesPart, 0, message.bytesPart.length) : options.bytes === Array ? Array.prototype.slice.call(message.bytesPart) : message.bytesPart;
                        if (options.oneofs)
                            object.part = "bytesPart";
                    }
                    if (message.integerPart != null && message.hasOwnProperty("integerPart")) {
                        if (typeof message.integerPart === "number")
                            object.integerPart = options.longs === String ? String(message.integerPart) : message.integerPart;
                        else
                            object.integerPart = options.longs === String ? $util.Long.prototype.toString.call(message.integerPart) : options.longs === Number ? new $util.LongBits(message.integerPart.low >>> 0, message.integerPart.high >>> 0).toNumber() : message.integerPart;
                        if (options.oneofs)
                            object.part = "integerPart";
                    }
                    if (message.floatPart != null && message.hasOwnProperty("floatPart")) {
                        object.floatPart = options.json && !isFinite(message.floatPart) ? String(message.floatPart) : message.floatPart;
                        if (options.oneofs)
                            object.part = "floatPart";
                    }
                    return object;
                };

                /**
                 * Converts this KeyPart to JSON.
                 * @function toJSON
                 * @memberof akkaserverless.component.view.KeyPart
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                KeyPart.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return KeyPart;
            })();

            view.Row = (function() {

                /**
                 * Properties of a Row.
                 * @memberof akkaserverless.component.view
                 * @interface IRow
                 * @property {string|null} [table] Row table
                 * @property {akkaserverless.component.view.IKey|null} [key] Row key
                 * @property {google.protobuf.IAny|null} [value] Row value
                 */

                /**
                 * Constructs a new Row.
                 * @memberof akkaserverless.component.view
                 * @classdesc Represents a Row.
                 * @implements IRow
                 * @constructor
                 * @param {akkaserverless.component.view.IRow=} [properties] Properties to set
                 */
                function Row(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Row table.
                 * @member {string} table
                 * @memberof akkaserverless.component.view.Row
                 * @instance
                 */
                Row.prototype.table = "";

                /**
                 * Row key.
                 * @member {akkaserverless.component.view.IKey|null|undefined} key
                 * @memberof akkaserverless.component.view.Row
                 * @instance
                 */
                Row.prototype.key = null;

                /**
                 * Row value.
                 * @member {google.protobuf.IAny|null|undefined} value
                 * @memberof akkaserverless.component.view.Row
                 * @instance
                 */
                Row.prototype.value = null;

                /**
                 * Creates a new Row instance using the specified properties.
                 * @function create
                 * @memberof akkaserverless.component.view.Row
                 * @static
                 * @param {akkaserverless.component.view.IRow=} [properties] Properties to set
                 * @returns {akkaserverless.component.view.Row} Row instance
                 */
                Row.create = function create(properties) {
                    return new Row(properties);
                };

                /**
                 * Encodes the specified Row message. Does not implicitly {@link akkaserverless.component.view.Row.verify|verify} messages.
                 * @function encode
                 * @memberof akkaserverless.component.view.Row
                 * @static
                 * @param {akkaserverless.component.view.IRow} message Row message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Row.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.table != null && Object.hasOwnProperty.call(message, "table"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.table);
                    if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                        $root.akkaserverless.component.view.Key.encode(message.key, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                        $root.google.protobuf.Any.encode(message.value, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified Row message, length delimited. Does not implicitly {@link akkaserverless.component.view.Row.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof akkaserverless.component.view.Row
                 * @static
                 * @param {akkaserverless.component.view.IRow} message Row message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Row.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Row message from the specified reader or buffer.
                 * @function decode
                 * @memberof akkaserverless.component.view.Row
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {akkaserverless.component.view.Row} Row
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Row.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.akkaserverless.component.view.Row();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.table = reader.string();
                            break;
                        case 2:
                            message.key = $root.akkaserverless.component.view.Key.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.value = $root.google.protobuf.Any.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Row message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof akkaserverless.component.view.Row
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {akkaserverless.component.view.Row} Row
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Row.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Row message.
                 * @function verify
                 * @memberof akkaserverless.component.view.Row
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Row.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.table != null && message.hasOwnProperty("table"))
                        if (!$util.isString(message.table))
                            return "table: string expected";
                    if (message.key != null && message.hasOwnProperty("key")) {
                        var error = $root.akkaserverless.component.view.Key.verify(message.key);
                        if (error)
                            return "key." + error;
                    }
                    if (message.value != null && message.hasOwnProperty("value")) {
                        var error = $root.google.protobuf.Any.verify(message.value);
                        if (error)
                            return "value." + error;
                    }
                    return null;
                };

                /**
                 * Creates a Row message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof akkaserverless.component.view.Row
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {akkaserverless.component.view.Row} Row
                 */
                Row.fromObject = function fromObject(object) {
                    if (object instanceof $root.akkaserverless.component.view.Row)
                        return object;
                    var message = new $root.akkaserverless.component.view.Row();
                    if (object.table != null)
                        message.table = String(object.table);
                    if (object.key != null) {
                        if (typeof object.key !== "object")
                            throw TypeError(".akkaserverless.component.view.Row.key: object expected");
                        message.key = $root.akkaserverless.component.view.Key.fromObject(object.key);
                    }
                    if (object.value != null) {
                        if (typeof object.value !== "object")
                            throw TypeError(".akkaserverless.component.view.Row.value: object expected");
                        message.value = $root.google.protobuf.Any.fromObject(object.value);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a Row message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof akkaserverless.component.view.Row
                 * @static
                 * @param {akkaserverless.component.view.Row} message Row
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Row.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.table = "";
                        object.key = null;
                        object.value = null;
                    }
                    if (message.table != null && message.hasOwnProperty("table"))
                        object.table = message.table;
                    if (message.key != null && message.hasOwnProperty("key"))
                        object.key = $root.akkaserverless.component.view.Key.toObject(message.key, options);
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = $root.google.protobuf.Any.toObject(message.value, options);
                    return object;
                };

                /**
                 * Converts this Row to JSON.
                 * @function toJSON
                 * @memberof akkaserverless.component.view.Row
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Row.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Row;
            })();

            return view;
        })();

        return component;
    })();

    return akkaserverless;
})();

$root.google = (function() {

    /**
     * Namespace google.
     * @exports google
     * @namespace
     */
    var google = {};

    google.protobuf = (function() {

        /**
         * Namespace protobuf.
         * @memberof google
         * @namespace
         */
        var protobuf = {};

        protobuf.FileDescriptorSet = (function() {

            /**
             * Properties of a FileDescriptorSet.
             * @memberof google.protobuf
             * @interface IFileDescriptorSet
             * @property {Array.<google.protobuf.IFileDescriptorProto>|null} [file] FileDescriptorSet file
             */

            /**
             * Constructs a new FileDescriptorSet.
             * @memberof google.protobuf
             * @classdesc Represents a FileDescriptorSet.
             * @implements IFileDescriptorSet
             * @constructor
             * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
             */
            function FileDescriptorSet(properties) {
                this.file = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FileDescriptorSet file.
             * @member {Array.<google.protobuf.IFileDescriptorProto>} file
             * @memberof google.protobuf.FileDescriptorSet
             * @instance
             */
            FileDescriptorSet.prototype.file = $util.emptyArray;

            /**
             * Creates a new FileDescriptorSet instance using the specified properties.
             * @function create
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet instance
             */
            FileDescriptorSet.create = function create(properties) {
                return new FileDescriptorSet(properties);
            };

            /**
             * Encodes the specified FileDescriptorSet message. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorSet.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.file != null && message.file.length)
                    for (var i = 0; i < message.file.length; ++i)
                        $root.google.protobuf.FileDescriptorProto.encode(message.file[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified FileDescriptorSet message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorSet.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FileDescriptorSet message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorSet.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorSet();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.file && message.file.length))
                            message.file = [];
                        message.file.push($root.google.protobuf.FileDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FileDescriptorSet message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorSet.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FileDescriptorSet message.
             * @function verify
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FileDescriptorSet.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.file != null && message.hasOwnProperty("file")) {
                    if (!Array.isArray(message.file))
                        return "file: array expected";
                    for (var i = 0; i < message.file.length; ++i) {
                        var error = $root.google.protobuf.FileDescriptorProto.verify(message.file[i]);
                        if (error)
                            return "file." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a FileDescriptorSet message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
             */
            FileDescriptorSet.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FileDescriptorSet)
                    return object;
                var message = new $root.google.protobuf.FileDescriptorSet();
                if (object.file) {
                    if (!Array.isArray(object.file))
                        throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
                    message.file = [];
                    for (var i = 0; i < object.file.length; ++i) {
                        if (typeof object.file[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
                        message.file[i] = $root.google.protobuf.FileDescriptorProto.fromObject(object.file[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a FileDescriptorSet message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {google.protobuf.FileDescriptorSet} message FileDescriptorSet
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FileDescriptorSet.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.file = [];
                if (message.file && message.file.length) {
                    object.file = [];
                    for (var j = 0; j < message.file.length; ++j)
                        object.file[j] = $root.google.protobuf.FileDescriptorProto.toObject(message.file[j], options);
                }
                return object;
            };

            /**
             * Converts this FileDescriptorSet to JSON.
             * @function toJSON
             * @memberof google.protobuf.FileDescriptorSet
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FileDescriptorSet.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return FileDescriptorSet;
        })();

        protobuf.FileDescriptorProto = (function() {

            /**
             * Properties of a FileDescriptorProto.
             * @memberof google.protobuf
             * @interface IFileDescriptorProto
             * @property {string|null} [name] FileDescriptorProto name
             * @property {string|null} ["package"] FileDescriptorProto package
             * @property {Array.<string>|null} [dependency] FileDescriptorProto dependency
             * @property {Array.<number>|null} [publicDependency] FileDescriptorProto publicDependency
             * @property {Array.<number>|null} [weakDependency] FileDescriptorProto weakDependency
             * @property {Array.<google.protobuf.IDescriptorProto>|null} [messageType] FileDescriptorProto messageType
             * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] FileDescriptorProto enumType
             * @property {Array.<google.protobuf.IServiceDescriptorProto>|null} [service] FileDescriptorProto service
             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] FileDescriptorProto extension
             * @property {google.protobuf.IFileOptions|null} [options] FileDescriptorProto options
             * @property {google.protobuf.ISourceCodeInfo|null} [sourceCodeInfo] FileDescriptorProto sourceCodeInfo
             * @property {string|null} [syntax] FileDescriptorProto syntax
             */

            /**
             * Constructs a new FileDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a FileDescriptorProto.
             * @implements IFileDescriptorProto
             * @constructor
             * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
             */
            function FileDescriptorProto(properties) {
                this.dependency = [];
                this.publicDependency = [];
                this.weakDependency = [];
                this.messageType = [];
                this.enumType = [];
                this.service = [];
                this.extension = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FileDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.name = "";

            /**
             * FileDescriptorProto package.
             * @member {string} package
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype["package"] = "";

            /**
             * FileDescriptorProto dependency.
             * @member {Array.<string>} dependency
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.dependency = $util.emptyArray;

            /**
             * FileDescriptorProto publicDependency.
             * @member {Array.<number>} publicDependency
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.publicDependency = $util.emptyArray;

            /**
             * FileDescriptorProto weakDependency.
             * @member {Array.<number>} weakDependency
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.weakDependency = $util.emptyArray;

            /**
             * FileDescriptorProto messageType.
             * @member {Array.<google.protobuf.IDescriptorProto>} messageType
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.messageType = $util.emptyArray;

            /**
             * FileDescriptorProto enumType.
             * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.enumType = $util.emptyArray;

            /**
             * FileDescriptorProto service.
             * @member {Array.<google.protobuf.IServiceDescriptorProto>} service
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.service = $util.emptyArray;

            /**
             * FileDescriptorProto extension.
             * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.extension = $util.emptyArray;

            /**
             * FileDescriptorProto options.
             * @member {google.protobuf.IFileOptions|null|undefined} options
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.options = null;

            /**
             * FileDescriptorProto sourceCodeInfo.
             * @member {google.protobuf.ISourceCodeInfo|null|undefined} sourceCodeInfo
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.sourceCodeInfo = null;

            /**
             * FileDescriptorProto syntax.
             * @member {string} syntax
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.syntax = "";

            /**
             * Creates a new FileDescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto instance
             */
            FileDescriptorProto.create = function create(properties) {
                return new FileDescriptorProto(properties);
            };

            /**
             * Encodes the specified FileDescriptorProto message. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message["package"] != null && Object.hasOwnProperty.call(message, "package"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message["package"]);
                if (message.dependency != null && message.dependency.length)
                    for (var i = 0; i < message.dependency.length; ++i)
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.dependency[i]);
                if (message.messageType != null && message.messageType.length)
                    for (var i = 0; i < message.messageType.length; ++i)
                        $root.google.protobuf.DescriptorProto.encode(message.messageType[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.enumType != null && message.enumType.length)
                    for (var i = 0; i < message.enumType.length; ++i)
                        $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.service != null && message.service.length)
                    for (var i = 0; i < message.service.length; ++i)
                        $root.google.protobuf.ServiceDescriptorProto.encode(message.service[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.extension != null && message.extension.length)
                    for (var i = 0; i < message.extension.length; ++i)
                        $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.FileOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.sourceCodeInfo != null && Object.hasOwnProperty.call(message, "sourceCodeInfo"))
                    $root.google.protobuf.SourceCodeInfo.encode(message.sourceCodeInfo, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                if (message.publicDependency != null && message.publicDependency.length)
                    for (var i = 0; i < message.publicDependency.length; ++i)
                        writer.uint32(/* id 10, wireType 0 =*/80).int32(message.publicDependency[i]);
                if (message.weakDependency != null && message.weakDependency.length)
                    for (var i = 0; i < message.weakDependency.length; ++i)
                        writer.uint32(/* id 11, wireType 0 =*/88).int32(message.weakDependency[i]);
                if (message.syntax != null && Object.hasOwnProperty.call(message, "syntax"))
                    writer.uint32(/* id 12, wireType 2 =*/98).string(message.syntax);
                return writer;
            };

            /**
             * Encodes the specified FileDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FileDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message["package"] = reader.string();
                        break;
                    case 3:
                        if (!(message.dependency && message.dependency.length))
                            message.dependency = [];
                        message.dependency.push(reader.string());
                        break;
                    case 10:
                        if (!(message.publicDependency && message.publicDependency.length))
                            message.publicDependency = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.publicDependency.push(reader.int32());
                        } else
                            message.publicDependency.push(reader.int32());
                        break;
                    case 11:
                        if (!(message.weakDependency && message.weakDependency.length))
                            message.weakDependency = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.weakDependency.push(reader.int32());
                        } else
                            message.weakDependency.push(reader.int32());
                        break;
                    case 4:
                        if (!(message.messageType && message.messageType.length))
                            message.messageType = [];
                        message.messageType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 5:
                        if (!(message.enumType && message.enumType.length))
                            message.enumType = [];
                        message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 6:
                        if (!(message.service && message.service.length))
                            message.service = [];
                        message.service.push($root.google.protobuf.ServiceDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 7:
                        if (!(message.extension && message.extension.length))
                            message.extension = [];
                        message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 8:
                        message.options = $root.google.protobuf.FileOptions.decode(reader, reader.uint32());
                        break;
                    case 9:
                        message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.decode(reader, reader.uint32());
                        break;
                    case 12:
                        message.syntax = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FileDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FileDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FileDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message["package"] != null && message.hasOwnProperty("package"))
                    if (!$util.isString(message["package"]))
                        return "package: string expected";
                if (message.dependency != null && message.hasOwnProperty("dependency")) {
                    if (!Array.isArray(message.dependency))
                        return "dependency: array expected";
                    for (var i = 0; i < message.dependency.length; ++i)
                        if (!$util.isString(message.dependency[i]))
                            return "dependency: string[] expected";
                }
                if (message.publicDependency != null && message.hasOwnProperty("publicDependency")) {
                    if (!Array.isArray(message.publicDependency))
                        return "publicDependency: array expected";
                    for (var i = 0; i < message.publicDependency.length; ++i)
                        if (!$util.isInteger(message.publicDependency[i]))
                            return "publicDependency: integer[] expected";
                }
                if (message.weakDependency != null && message.hasOwnProperty("weakDependency")) {
                    if (!Array.isArray(message.weakDependency))
                        return "weakDependency: array expected";
                    for (var i = 0; i < message.weakDependency.length; ++i)
                        if (!$util.isInteger(message.weakDependency[i]))
                            return "weakDependency: integer[] expected";
                }
                if (message.messageType != null && message.hasOwnProperty("messageType")) {
                    if (!Array.isArray(message.messageType))
                        return "messageType: array expected";
                    for (var i = 0; i < message.messageType.length; ++i) {
                        var error = $root.google.protobuf.DescriptorProto.verify(message.messageType[i]);
                        if (error)
                            return "messageType." + error;
                    }
                }
                if (message.enumType != null && message.hasOwnProperty("enumType")) {
                    if (!Array.isArray(message.enumType))
                        return "enumType: array expected";
                    for (var i = 0; i < message.enumType.length; ++i) {
                        var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                        if (error)
                            return "enumType." + error;
                    }
                }
                if (message.service != null && message.hasOwnProperty("service")) {
                    if (!Array.isArray(message.service))
                        return "service: array expected";
                    for (var i = 0; i < message.service.length; ++i) {
                        var error = $root.google.protobuf.ServiceDescriptorProto.verify(message.service[i]);
                        if (error)
                            return "service." + error;
                    }
                }
                if (message.extension != null && message.hasOwnProperty("extension")) {
                    if (!Array.isArray(message.extension))
                        return "extension: array expected";
                    for (var i = 0; i < message.extension.length; ++i) {
                        var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                        if (error)
                            return "extension." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    var error = $root.google.protobuf.FileOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo")) {
                    var error = $root.google.protobuf.SourceCodeInfo.verify(message.sourceCodeInfo);
                    if (error)
                        return "sourceCodeInfo." + error;
                }
                if (message.syntax != null && message.hasOwnProperty("syntax"))
                    if (!$util.isString(message.syntax))
                        return "syntax: string expected";
                return null;
            };

            /**
             * Creates a FileDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
             */
            FileDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FileDescriptorProto)
                    return object;
                var message = new $root.google.protobuf.FileDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object["package"] != null)
                    message["package"] = String(object["package"]);
                if (object.dependency) {
                    if (!Array.isArray(object.dependency))
                        throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
                    message.dependency = [];
                    for (var i = 0; i < object.dependency.length; ++i)
                        message.dependency[i] = String(object.dependency[i]);
                }
                if (object.publicDependency) {
                    if (!Array.isArray(object.publicDependency))
                        throw TypeError(".google.protobuf.FileDescriptorProto.publicDependency: array expected");
                    message.publicDependency = [];
                    for (var i = 0; i < object.publicDependency.length; ++i)
                        message.publicDependency[i] = object.publicDependency[i] | 0;
                }
                if (object.weakDependency) {
                    if (!Array.isArray(object.weakDependency))
                        throw TypeError(".google.protobuf.FileDescriptorProto.weakDependency: array expected");
                    message.weakDependency = [];
                    for (var i = 0; i < object.weakDependency.length; ++i)
                        message.weakDependency[i] = object.weakDependency[i] | 0;
                }
                if (object.messageType) {
                    if (!Array.isArray(object.messageType))
                        throw TypeError(".google.protobuf.FileDescriptorProto.messageType: array expected");
                    message.messageType = [];
                    for (var i = 0; i < object.messageType.length; ++i) {
                        if (typeof object.messageType[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.messageType: object expected");
                        message.messageType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.messageType[i]);
                    }
                }
                if (object.enumType) {
                    if (!Array.isArray(object.enumType))
                        throw TypeError(".google.protobuf.FileDescriptorProto.enumType: array expected");
                    message.enumType = [];
                    for (var i = 0; i < object.enumType.length; ++i) {
                        if (typeof object.enumType[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.enumType: object expected");
                        message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                    }
                }
                if (object.service) {
                    if (!Array.isArray(object.service))
                        throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
                    message.service = [];
                    for (var i = 0; i < object.service.length; ++i) {
                        if (typeof object.service[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
                        message.service[i] = $root.google.protobuf.ServiceDescriptorProto.fromObject(object.service[i]);
                    }
                }
                if (object.extension) {
                    if (!Array.isArray(object.extension))
                        throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
                    message.extension = [];
                    for (var i = 0; i < object.extension.length; ++i) {
                        if (typeof object.extension[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
                        message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.FileOptions.fromObject(object.options);
                }
                if (object.sourceCodeInfo != null) {
                    if (typeof object.sourceCodeInfo !== "object")
                        throw TypeError(".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected");
                    message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.fromObject(object.sourceCodeInfo);
                }
                if (object.syntax != null)
                    message.syntax = String(object.syntax);
                return message;
            };

            /**
             * Creates a plain object from a FileDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {google.protobuf.FileDescriptorProto} message FileDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FileDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.dependency = [];
                    object.messageType = [];
                    object.enumType = [];
                    object.service = [];
                    object.extension = [];
                    object.publicDependency = [];
                    object.weakDependency = [];
                }
                if (options.defaults) {
                    object.name = "";
                    object["package"] = "";
                    object.options = null;
                    object.sourceCodeInfo = null;
                    object.syntax = "";
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message["package"] != null && message.hasOwnProperty("package"))
                    object["package"] = message["package"];
                if (message.dependency && message.dependency.length) {
                    object.dependency = [];
                    for (var j = 0; j < message.dependency.length; ++j)
                        object.dependency[j] = message.dependency[j];
                }
                if (message.messageType && message.messageType.length) {
                    object.messageType = [];
                    for (var j = 0; j < message.messageType.length; ++j)
                        object.messageType[j] = $root.google.protobuf.DescriptorProto.toObject(message.messageType[j], options);
                }
                if (message.enumType && message.enumType.length) {
                    object.enumType = [];
                    for (var j = 0; j < message.enumType.length; ++j)
                        object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                }
                if (message.service && message.service.length) {
                    object.service = [];
                    for (var j = 0; j < message.service.length; ++j)
                        object.service[j] = $root.google.protobuf.ServiceDescriptorProto.toObject(message.service[j], options);
                }
                if (message.extension && message.extension.length) {
                    object.extension = [];
                    for (var j = 0; j < message.extension.length; ++j)
                        object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.FileOptions.toObject(message.options, options);
                if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo"))
                    object.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.toObject(message.sourceCodeInfo, options);
                if (message.publicDependency && message.publicDependency.length) {
                    object.publicDependency = [];
                    for (var j = 0; j < message.publicDependency.length; ++j)
                        object.publicDependency[j] = message.publicDependency[j];
                }
                if (message.weakDependency && message.weakDependency.length) {
                    object.weakDependency = [];
                    for (var j = 0; j < message.weakDependency.length; ++j)
                        object.weakDependency[j] = message.weakDependency[j];
                }
                if (message.syntax != null && message.hasOwnProperty("syntax"))
                    object.syntax = message.syntax;
                return object;
            };

            /**
             * Converts this FileDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FileDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return FileDescriptorProto;
        })();

        protobuf.DescriptorProto = (function() {

            /**
             * Properties of a DescriptorProto.
             * @memberof google.protobuf
             * @interface IDescriptorProto
             * @property {string|null} [name] DescriptorProto name
             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [field] DescriptorProto field
             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] DescriptorProto extension
             * @property {Array.<google.protobuf.IDescriptorProto>|null} [nestedType] DescriptorProto nestedType
             * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] DescriptorProto enumType
             * @property {Array.<google.protobuf.DescriptorProto.IExtensionRange>|null} [extensionRange] DescriptorProto extensionRange
             * @property {Array.<google.protobuf.IOneofDescriptorProto>|null} [oneofDecl] DescriptorProto oneofDecl
             * @property {google.protobuf.IMessageOptions|null} [options] DescriptorProto options
             * @property {Array.<google.protobuf.DescriptorProto.IReservedRange>|null} [reservedRange] DescriptorProto reservedRange
             * @property {Array.<string>|null} [reservedName] DescriptorProto reservedName
             */

            /**
             * Constructs a new DescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a DescriptorProto.
             * @implements IDescriptorProto
             * @constructor
             * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
             */
            function DescriptorProto(properties) {
                this.field = [];
                this.extension = [];
                this.nestedType = [];
                this.enumType = [];
                this.extensionRange = [];
                this.oneofDecl = [];
                this.reservedRange = [];
                this.reservedName = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * DescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.name = "";

            /**
             * DescriptorProto field.
             * @member {Array.<google.protobuf.IFieldDescriptorProto>} field
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.field = $util.emptyArray;

            /**
             * DescriptorProto extension.
             * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.extension = $util.emptyArray;

            /**
             * DescriptorProto nestedType.
             * @member {Array.<google.protobuf.IDescriptorProto>} nestedType
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.nestedType = $util.emptyArray;

            /**
             * DescriptorProto enumType.
             * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.enumType = $util.emptyArray;

            /**
             * DescriptorProto extensionRange.
             * @member {Array.<google.protobuf.DescriptorProto.IExtensionRange>} extensionRange
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.extensionRange = $util.emptyArray;

            /**
             * DescriptorProto oneofDecl.
             * @member {Array.<google.protobuf.IOneofDescriptorProto>} oneofDecl
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.oneofDecl = $util.emptyArray;

            /**
             * DescriptorProto options.
             * @member {google.protobuf.IMessageOptions|null|undefined} options
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.options = null;

            /**
             * DescriptorProto reservedRange.
             * @member {Array.<google.protobuf.DescriptorProto.IReservedRange>} reservedRange
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.reservedRange = $util.emptyArray;

            /**
             * DescriptorProto reservedName.
             * @member {Array.<string>} reservedName
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.reservedName = $util.emptyArray;

            /**
             * Creates a new DescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.DescriptorProto} DescriptorProto instance
             */
            DescriptorProto.create = function create(properties) {
                return new DescriptorProto(properties);
            };

            /**
             * Encodes the specified DescriptorProto message. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.field != null && message.field.length)
                    for (var i = 0; i < message.field.length; ++i)
                        $root.google.protobuf.FieldDescriptorProto.encode(message.field[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.nestedType != null && message.nestedType.length)
                    for (var i = 0; i < message.nestedType.length; ++i)
                        $root.google.protobuf.DescriptorProto.encode(message.nestedType[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.enumType != null && message.enumType.length)
                    for (var i = 0; i < message.enumType.length; ++i)
                        $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.extensionRange != null && message.extensionRange.length)
                    for (var i = 0; i < message.extensionRange.length; ++i)
                        $root.google.protobuf.DescriptorProto.ExtensionRange.encode(message.extensionRange[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.extension != null && message.extension.length)
                    for (var i = 0; i < message.extension.length; ++i)
                        $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.MessageOptions.encode(message.options, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.oneofDecl != null && message.oneofDecl.length)
                    for (var i = 0; i < message.oneofDecl.length; ++i)
                        $root.google.protobuf.OneofDescriptorProto.encode(message.oneofDecl[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.reservedRange != null && message.reservedRange.length)
                    for (var i = 0; i < message.reservedRange.length; ++i)
                        $root.google.protobuf.DescriptorProto.ReservedRange.encode(message.reservedRange[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                if (message.reservedName != null && message.reservedName.length)
                    for (var i = 0; i < message.reservedName.length; ++i)
                        writer.uint32(/* id 10, wireType 2 =*/82).string(message.reservedName[i]);
                return writer;
            };

            /**
             * Encodes the specified DescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a DescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.DescriptorProto} DescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        if (!(message.field && message.field.length))
                            message.field = [];
                        message.field.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 6:
                        if (!(message.extension && message.extension.length))
                            message.extension = [];
                        message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        if (!(message.nestedType && message.nestedType.length))
                            message.nestedType = [];
                        message.nestedType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 4:
                        if (!(message.enumType && message.enumType.length))
                            message.enumType = [];
                        message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 5:
                        if (!(message.extensionRange && message.extensionRange.length))
                            message.extensionRange = [];
                        message.extensionRange.push($root.google.protobuf.DescriptorProto.ExtensionRange.decode(reader, reader.uint32()));
                        break;
                    case 8:
                        if (!(message.oneofDecl && message.oneofDecl.length))
                            message.oneofDecl = [];
                        message.oneofDecl.push($root.google.protobuf.OneofDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 7:
                        message.options = $root.google.protobuf.MessageOptions.decode(reader, reader.uint32());
                        break;
                    case 9:
                        if (!(message.reservedRange && message.reservedRange.length))
                            message.reservedRange = [];
                        message.reservedRange.push($root.google.protobuf.DescriptorProto.ReservedRange.decode(reader, reader.uint32()));
                        break;
                    case 10:
                        if (!(message.reservedName && message.reservedName.length))
                            message.reservedName = [];
                        message.reservedName.push(reader.string());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a DescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.DescriptorProto} DescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a DescriptorProto message.
             * @function verify
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.field != null && message.hasOwnProperty("field")) {
                    if (!Array.isArray(message.field))
                        return "field: array expected";
                    for (var i = 0; i < message.field.length; ++i) {
                        var error = $root.google.protobuf.FieldDescriptorProto.verify(message.field[i]);
                        if (error)
                            return "field." + error;
                    }
                }
                if (message.extension != null && message.hasOwnProperty("extension")) {
                    if (!Array.isArray(message.extension))
                        return "extension: array expected";
                    for (var i = 0; i < message.extension.length; ++i) {
                        var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                        if (error)
                            return "extension." + error;
                    }
                }
                if (message.nestedType != null && message.hasOwnProperty("nestedType")) {
                    if (!Array.isArray(message.nestedType))
                        return "nestedType: array expected";
                    for (var i = 0; i < message.nestedType.length; ++i) {
                        var error = $root.google.protobuf.DescriptorProto.verify(message.nestedType[i]);
                        if (error)
                            return "nestedType." + error;
                    }
                }
                if (message.enumType != null && message.hasOwnProperty("enumType")) {
                    if (!Array.isArray(message.enumType))
                        return "enumType: array expected";
                    for (var i = 0; i < message.enumType.length; ++i) {
                        var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                        if (error)
                            return "enumType." + error;
                    }
                }
                if (message.extensionRange != null && message.hasOwnProperty("extensionRange")) {
                    if (!Array.isArray(message.extensionRange))
                        return "extensionRange: array expected";
                    for (var i = 0; i < message.extensionRange.length; ++i) {
                        var error = $root.google.protobuf.DescriptorProto.ExtensionRange.verify(message.extensionRange[i]);
                        if (error)
                            return "extensionRange." + error;
                    }
                }
                if (message.oneofDecl != null && message.hasOwnProperty("oneofDecl")) {
                    if (!Array.isArray(message.oneofDecl))
                        return "oneofDecl: array expected";
                    for (var i = 0; i < message.oneofDecl.length; ++i) {
                        var error = $root.google.protobuf.OneofDescriptorProto.verify(message.oneofDecl[i]);
                        if (error)
                            return "oneofDecl." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    var error = $root.google.protobuf.MessageOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                    if (!Array.isArray(message.reservedRange))
                        return "reservedRange: array expected";
                    for (var i = 0; i < message.reservedRange.length; ++i) {
                        var error = $root.google.protobuf.DescriptorProto.ReservedRange.verify(message.reservedRange[i]);
                        if (error)
                            return "reservedRange." + error;
                    }
                }
                if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                    if (!Array.isArray(message.reservedName))
                        return "reservedName: array expected";
                    for (var i = 0; i < message.reservedName.length; ++i)
                        if (!$util.isString(message.reservedName[i]))
                            return "reservedName: string[] expected";
                }
                return null;
            };

            /**
             * Creates a DescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.DescriptorProto} DescriptorProto
             */
            DescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.DescriptorProto)
                    return object;
                var message = new $root.google.protobuf.DescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.field) {
                    if (!Array.isArray(object.field))
                        throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
                    message.field = [];
                    for (var i = 0; i < object.field.length; ++i) {
                        if (typeof object.field[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
                        message.field[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.field[i]);
                    }
                }
                if (object.extension) {
                    if (!Array.isArray(object.extension))
                        throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
                    message.extension = [];
                    for (var i = 0; i < object.extension.length; ++i) {
                        if (typeof object.extension[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
                        message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                    }
                }
                if (object.nestedType) {
                    if (!Array.isArray(object.nestedType))
                        throw TypeError(".google.protobuf.DescriptorProto.nestedType: array expected");
                    message.nestedType = [];
                    for (var i = 0; i < object.nestedType.length; ++i) {
                        if (typeof object.nestedType[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.nestedType: object expected");
                        message.nestedType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.nestedType[i]);
                    }
                }
                if (object.enumType) {
                    if (!Array.isArray(object.enumType))
                        throw TypeError(".google.protobuf.DescriptorProto.enumType: array expected");
                    message.enumType = [];
                    for (var i = 0; i < object.enumType.length; ++i) {
                        if (typeof object.enumType[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.enumType: object expected");
                        message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                    }
                }
                if (object.extensionRange) {
                    if (!Array.isArray(object.extensionRange))
                        throw TypeError(".google.protobuf.DescriptorProto.extensionRange: array expected");
                    message.extensionRange = [];
                    for (var i = 0; i < object.extensionRange.length; ++i) {
                        if (typeof object.extensionRange[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.extensionRange: object expected");
                        message.extensionRange[i] = $root.google.protobuf.DescriptorProto.ExtensionRange.fromObject(object.extensionRange[i]);
                    }
                }
                if (object.oneofDecl) {
                    if (!Array.isArray(object.oneofDecl))
                        throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: array expected");
                    message.oneofDecl = [];
                    for (var i = 0; i < object.oneofDecl.length; ++i) {
                        if (typeof object.oneofDecl[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: object expected");
                        message.oneofDecl[i] = $root.google.protobuf.OneofDescriptorProto.fromObject(object.oneofDecl[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.MessageOptions.fromObject(object.options);
                }
                if (object.reservedRange) {
                    if (!Array.isArray(object.reservedRange))
                        throw TypeError(".google.protobuf.DescriptorProto.reservedRange: array expected");
                    message.reservedRange = [];
                    for (var i = 0; i < object.reservedRange.length; ++i) {
                        if (typeof object.reservedRange[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.reservedRange: object expected");
                        message.reservedRange[i] = $root.google.protobuf.DescriptorProto.ReservedRange.fromObject(object.reservedRange[i]);
                    }
                }
                if (object.reservedName) {
                    if (!Array.isArray(object.reservedName))
                        throw TypeError(".google.protobuf.DescriptorProto.reservedName: array expected");
                    message.reservedName = [];
                    for (var i = 0; i < object.reservedName.length; ++i)
                        message.reservedName[i] = String(object.reservedName[i]);
                }
                return message;
            };

            /**
             * Creates a plain object from a DescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {google.protobuf.DescriptorProto} message DescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.field = [];
                    object.nestedType = [];
                    object.enumType = [];
                    object.extensionRange = [];
                    object.extension = [];
                    object.oneofDecl = [];
                    object.reservedRange = [];
                    object.reservedName = [];
                }
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.field && message.field.length) {
                    object.field = [];
                    for (var j = 0; j < message.field.length; ++j)
                        object.field[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.field[j], options);
                }
                if (message.nestedType && message.nestedType.length) {
                    object.nestedType = [];
                    for (var j = 0; j < message.nestedType.length; ++j)
                        object.nestedType[j] = $root.google.protobuf.DescriptorProto.toObject(message.nestedType[j], options);
                }
                if (message.enumType && message.enumType.length) {
                    object.enumType = [];
                    for (var j = 0; j < message.enumType.length; ++j)
                        object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                }
                if (message.extensionRange && message.extensionRange.length) {
                    object.extensionRange = [];
                    for (var j = 0; j < message.extensionRange.length; ++j)
                        object.extensionRange[j] = $root.google.protobuf.DescriptorProto.ExtensionRange.toObject(message.extensionRange[j], options);
                }
                if (message.extension && message.extension.length) {
                    object.extension = [];
                    for (var j = 0; j < message.extension.length; ++j)
                        object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.MessageOptions.toObject(message.options, options);
                if (message.oneofDecl && message.oneofDecl.length) {
                    object.oneofDecl = [];
                    for (var j = 0; j < message.oneofDecl.length; ++j)
                        object.oneofDecl[j] = $root.google.protobuf.OneofDescriptorProto.toObject(message.oneofDecl[j], options);
                }
                if (message.reservedRange && message.reservedRange.length) {
                    object.reservedRange = [];
                    for (var j = 0; j < message.reservedRange.length; ++j)
                        object.reservedRange[j] = $root.google.protobuf.DescriptorProto.ReservedRange.toObject(message.reservedRange[j], options);
                }
                if (message.reservedName && message.reservedName.length) {
                    object.reservedName = [];
                    for (var j = 0; j < message.reservedName.length; ++j)
                        object.reservedName[j] = message.reservedName[j];
                }
                return object;
            };

            /**
             * Converts this DescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.DescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            DescriptorProto.ExtensionRange = (function() {

                /**
                 * Properties of an ExtensionRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @interface IExtensionRange
                 * @property {number|null} [start] ExtensionRange start
                 * @property {number|null} [end] ExtensionRange end
                 * @property {google.protobuf.IExtensionRangeOptions|null} [options] ExtensionRange options
                 */

                /**
                 * Constructs a new ExtensionRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @classdesc Represents an ExtensionRange.
                 * @implements IExtensionRange
                 * @constructor
                 * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                 */
                function ExtensionRange(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ExtensionRange start.
                 * @member {number} start
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 */
                ExtensionRange.prototype.start = 0;

                /**
                 * ExtensionRange end.
                 * @member {number} end
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 */
                ExtensionRange.prototype.end = 0;

                /**
                 * ExtensionRange options.
                 * @member {google.protobuf.IExtensionRangeOptions|null|undefined} options
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 */
                ExtensionRange.prototype.options = null;

                /**
                 * Creates a new ExtensionRange instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange instance
                 */
                ExtensionRange.create = function create(properties) {
                    return new ExtensionRange(properties);
                };

                /**
                 * Encodes the specified ExtensionRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRange.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                    if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.ExtensionRangeOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified ExtensionRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRange.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an ExtensionRange message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRange.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.start = reader.int32();
                            break;
                        case 2:
                            message.end = reader.int32();
                            break;
                        case 3:
                            message.options = $root.google.protobuf.ExtensionRangeOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an ExtensionRange message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRange.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an ExtensionRange message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ExtensionRange.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.start != null && message.hasOwnProperty("start"))
                        if (!$util.isInteger(message.start))
                            return "start: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.ExtensionRangeOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };

                /**
                 * Creates an ExtensionRange message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                 */
                ExtensionRange.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto.ExtensionRange)
                        return object;
                    var message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                    if (object.start != null)
                        message.start = object.start | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.ExtensionRange.options: object expected");
                        message.options = $root.google.protobuf.ExtensionRangeOptions.fromObject(object.options);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an ExtensionRange message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.ExtensionRange} message ExtensionRange
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ExtensionRange.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.start = 0;
                        object.end = 0;
                        object.options = null;
                    }
                    if (message.start != null && message.hasOwnProperty("start"))
                        object.start = message.start;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.ExtensionRangeOptions.toObject(message.options, options);
                    return object;
                };

                /**
                 * Converts this ExtensionRange to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ExtensionRange.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ExtensionRange;
            })();

            DescriptorProto.ReservedRange = (function() {

                /**
                 * Properties of a ReservedRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @interface IReservedRange
                 * @property {number|null} [start] ReservedRange start
                 * @property {number|null} [end] ReservedRange end
                 */

                /**
                 * Constructs a new ReservedRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @classdesc Represents a ReservedRange.
                 * @implements IReservedRange
                 * @constructor
                 * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                 */
                function ReservedRange(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ReservedRange start.
                 * @member {number} start
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @instance
                 */
                ReservedRange.prototype.start = 0;

                /**
                 * ReservedRange end.
                 * @member {number} end
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @instance
                 */
                ReservedRange.prototype.end = 0;

                /**
                 * Creates a new ReservedRange instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange instance
                 */
                ReservedRange.create = function create(properties) {
                    return new ReservedRange(properties);
                };

                /**
                 * Encodes the specified ReservedRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ReservedRange.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                    if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                    return writer;
                };

                /**
                 * Encodes the specified ReservedRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ReservedRange message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ReservedRange.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.start = reader.int32();
                            break;
                        case 2:
                            message.end = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ReservedRange message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ReservedRange.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ReservedRange message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ReservedRange.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.start != null && message.hasOwnProperty("start"))
                        if (!$util.isInteger(message.start))
                            return "start: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    return null;
                };

                /**
                 * Creates a ReservedRange message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                 */
                ReservedRange.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto.ReservedRange)
                        return object;
                    var message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                    if (object.start != null)
                        message.start = object.start | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    return message;
                };

                /**
                 * Creates a plain object from a ReservedRange message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.ReservedRange} message ReservedRange
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ReservedRange.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.start = 0;
                        object.end = 0;
                    }
                    if (message.start != null && message.hasOwnProperty("start"))
                        object.start = message.start;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    return object;
                };

                /**
                 * Converts this ReservedRange to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ReservedRange.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ReservedRange;
            })();

            return DescriptorProto;
        })();

        protobuf.ExtensionRangeOptions = (function() {

            /**
             * Properties of an ExtensionRangeOptions.
             * @memberof google.protobuf
             * @interface IExtensionRangeOptions
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ExtensionRangeOptions uninterpretedOption
             */

            /**
             * Constructs a new ExtensionRangeOptions.
             * @memberof google.protobuf
             * @classdesc Represents an ExtensionRangeOptions.
             * @implements IExtensionRangeOptions
             * @constructor
             * @param {google.protobuf.IExtensionRangeOptions=} [properties] Properties to set
             */
            function ExtensionRangeOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ExtensionRangeOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.ExtensionRangeOptions
             * @instance
             */
            ExtensionRangeOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * Creates a new ExtensionRangeOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {google.protobuf.IExtensionRangeOptions=} [properties] Properties to set
             * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions instance
             */
            ExtensionRangeOptions.create = function create(properties) {
                return new ExtensionRangeOptions(properties);
            };

            /**
             * Encodes the specified ExtensionRangeOptions message. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {google.protobuf.IExtensionRangeOptions} message ExtensionRangeOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ExtensionRangeOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                    for (var i = 0; i < message.uninterpretedOption.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ExtensionRangeOptions message, length delimited. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {google.protobuf.IExtensionRangeOptions} message ExtensionRangeOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ExtensionRangeOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an ExtensionRangeOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ExtensionRangeOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ExtensionRangeOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 999:
                        if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                            message.uninterpretedOption = [];
                        message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an ExtensionRangeOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ExtensionRangeOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an ExtensionRangeOptions message.
             * @function verify
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ExtensionRangeOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                        var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an ExtensionRangeOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
             */
            ExtensionRangeOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.ExtensionRangeOptions)
                    return object;
                var message = new $root.google.protobuf.ExtensionRangeOptions();
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an ExtensionRangeOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {google.protobuf.ExtensionRangeOptions} message ExtensionRangeOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ExtensionRangeOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (var j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                return object;
            };

            /**
             * Converts this ExtensionRangeOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.ExtensionRangeOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ExtensionRangeOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ExtensionRangeOptions;
        })();

        protobuf.FieldDescriptorProto = (function() {

            /**
             * Properties of a FieldDescriptorProto.
             * @memberof google.protobuf
             * @interface IFieldDescriptorProto
             * @property {string|null} [name] FieldDescriptorProto name
             * @property {number|null} [number] FieldDescriptorProto number
             * @property {google.protobuf.FieldDescriptorProto.Label|null} [label] FieldDescriptorProto label
             * @property {google.protobuf.FieldDescriptorProto.Type|null} [type] FieldDescriptorProto type
             * @property {string|null} [typeName] FieldDescriptorProto typeName
             * @property {string|null} [extendee] FieldDescriptorProto extendee
             * @property {string|null} [defaultValue] FieldDescriptorProto defaultValue
             * @property {number|null} [oneofIndex] FieldDescriptorProto oneofIndex
             * @property {string|null} [jsonName] FieldDescriptorProto jsonName
             * @property {google.protobuf.IFieldOptions|null} [options] FieldDescriptorProto options
             * @property {boolean|null} [proto3Optional] FieldDescriptorProto proto3Optional
             */

            /**
             * Constructs a new FieldDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a FieldDescriptorProto.
             * @implements IFieldDescriptorProto
             * @constructor
             * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
             */
            function FieldDescriptorProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FieldDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.name = "";

            /**
             * FieldDescriptorProto number.
             * @member {number} number
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.number = 0;

            /**
             * FieldDescriptorProto label.
             * @member {google.protobuf.FieldDescriptorProto.Label} label
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.label = 1;

            /**
             * FieldDescriptorProto type.
             * @member {google.protobuf.FieldDescriptorProto.Type} type
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.type = 1;

            /**
             * FieldDescriptorProto typeName.
             * @member {string} typeName
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.typeName = "";

            /**
             * FieldDescriptorProto extendee.
             * @member {string} extendee
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.extendee = "";

            /**
             * FieldDescriptorProto defaultValue.
             * @member {string} defaultValue
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.defaultValue = "";

            /**
             * FieldDescriptorProto oneofIndex.
             * @member {number} oneofIndex
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.oneofIndex = 0;

            /**
             * FieldDescriptorProto jsonName.
             * @member {string} jsonName
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.jsonName = "";

            /**
             * FieldDescriptorProto options.
             * @member {google.protobuf.IFieldOptions|null|undefined} options
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.options = null;

            /**
             * FieldDescriptorProto proto3Optional.
             * @member {boolean} proto3Optional
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.proto3Optional = false;

            /**
             * Creates a new FieldDescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto instance
             */
            FieldDescriptorProto.create = function create(properties) {
                return new FieldDescriptorProto(properties);
            };

            /**
             * Encodes the specified FieldDescriptorProto message. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.extendee != null && Object.hasOwnProperty.call(message, "extendee"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.extendee);
                if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.number);
                if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.label);
                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);
                if (message.typeName != null && Object.hasOwnProperty.call(message, "typeName"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.typeName);
                if (message.defaultValue != null && Object.hasOwnProperty.call(message, "defaultValue"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.defaultValue);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.FieldOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.oneofIndex != null && Object.hasOwnProperty.call(message, "oneofIndex"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int32(message.oneofIndex);
                if (message.jsonName != null && Object.hasOwnProperty.call(message, "jsonName"))
                    writer.uint32(/* id 10, wireType 2 =*/82).string(message.jsonName);
                if (message.proto3Optional != null && Object.hasOwnProperty.call(message, "proto3Optional"))
                    writer.uint32(/* id 17, wireType 0 =*/136).bool(message.proto3Optional);
                return writer;
            };

            /**
             * Encodes the specified FieldDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FieldDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldDescriptorProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 3:
                        message.number = reader.int32();
                        break;
                    case 4:
                        message.label = reader.int32();
                        break;
                    case 5:
                        message.type = reader.int32();
                        break;
                    case 6:
                        message.typeName = reader.string();
                        break;
                    case 2:
                        message.extendee = reader.string();
                        break;
                    case 7:
                        message.defaultValue = reader.string();
                        break;
                    case 9:
                        message.oneofIndex = reader.int32();
                        break;
                    case 10:
                        message.jsonName = reader.string();
                        break;
                    case 8:
                        message.options = $root.google.protobuf.FieldOptions.decode(reader, reader.uint32());
                        break;
                    case 17:
                        message.proto3Optional = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FieldDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FieldDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FieldDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.number != null && message.hasOwnProperty("number"))
                    if (!$util.isInteger(message.number))
                        return "number: integer expected";
                if (message.label != null && message.hasOwnProperty("label"))
                    switch (message.label) {
                    default:
                        return "label: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.type != null && message.hasOwnProperty("type"))
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                        break;
                    }
                if (message.typeName != null && message.hasOwnProperty("typeName"))
                    if (!$util.isString(message.typeName))
                        return "typeName: string expected";
                if (message.extendee != null && message.hasOwnProperty("extendee"))
                    if (!$util.isString(message.extendee))
                        return "extendee: string expected";
                if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                    if (!$util.isString(message.defaultValue))
                        return "defaultValue: string expected";
                if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                    if (!$util.isInteger(message.oneofIndex))
                        return "oneofIndex: integer expected";
                if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                    if (!$util.isString(message.jsonName))
                        return "jsonName: string expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    var error = $root.google.protobuf.FieldOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional"))
                    if (typeof message.proto3Optional !== "boolean")
                        return "proto3Optional: boolean expected";
                return null;
            };

            /**
             * Creates a FieldDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
             */
            FieldDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FieldDescriptorProto)
                    return object;
                var message = new $root.google.protobuf.FieldDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.number != null)
                    message.number = object.number | 0;
                switch (object.label) {
                case "LABEL_OPTIONAL":
                case 1:
                    message.label = 1;
                    break;
                case "LABEL_REQUIRED":
                case 2:
                    message.label = 2;
                    break;
                case "LABEL_REPEATED":
                case 3:
                    message.label = 3;
                    break;
                }
                switch (object.type) {
                case "TYPE_DOUBLE":
                case 1:
                    message.type = 1;
                    break;
                case "TYPE_FLOAT":
                case 2:
                    message.type = 2;
                    break;
                case "TYPE_INT64":
                case 3:
                    message.type = 3;
                    break;
                case "TYPE_UINT64":
                case 4:
                    message.type = 4;
                    break;
                case "TYPE_INT32":
                case 5:
                    message.type = 5;
                    break;
                case "TYPE_FIXED64":
                case 6:
                    message.type = 6;
                    break;
                case "TYPE_FIXED32":
                case 7:
                    message.type = 7;
                    break;
                case "TYPE_BOOL":
                case 8:
                    message.type = 8;
                    break;
                case "TYPE_STRING":
                case 9:
                    message.type = 9;
                    break;
                case "TYPE_GROUP":
                case 10:
                    message.type = 10;
                    break;
                case "TYPE_MESSAGE":
                case 11:
                    message.type = 11;
                    break;
                case "TYPE_BYTES":
                case 12:
                    message.type = 12;
                    break;
                case "TYPE_UINT32":
                case 13:
                    message.type = 13;
                    break;
                case "TYPE_ENUM":
                case 14:
                    message.type = 14;
                    break;
                case "TYPE_SFIXED32":
                case 15:
                    message.type = 15;
                    break;
                case "TYPE_SFIXED64":
                case 16:
                    message.type = 16;
                    break;
                case "TYPE_SINT32":
                case 17:
                    message.type = 17;
                    break;
                case "TYPE_SINT64":
                case 18:
                    message.type = 18;
                    break;
                }
                if (object.typeName != null)
                    message.typeName = String(object.typeName);
                if (object.extendee != null)
                    message.extendee = String(object.extendee);
                if (object.defaultValue != null)
                    message.defaultValue = String(object.defaultValue);
                if (object.oneofIndex != null)
                    message.oneofIndex = object.oneofIndex | 0;
                if (object.jsonName != null)
                    message.jsonName = String(object.jsonName);
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.FieldOptions.fromObject(object.options);
                }
                if (object.proto3Optional != null)
                    message.proto3Optional = Boolean(object.proto3Optional);
                return message;
            };

            /**
             * Creates a plain object from a FieldDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {google.protobuf.FieldDescriptorProto} message FieldDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FieldDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.name = "";
                    object.extendee = "";
                    object.number = 0;
                    object.label = options.enums === String ? "LABEL_OPTIONAL" : 1;
                    object.type = options.enums === String ? "TYPE_DOUBLE" : 1;
                    object.typeName = "";
                    object.defaultValue = "";
                    object.options = null;
                    object.oneofIndex = 0;
                    object.jsonName = "";
                    object.proto3Optional = false;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.extendee != null && message.hasOwnProperty("extendee"))
                    object.extendee = message.extendee;
                if (message.number != null && message.hasOwnProperty("number"))
                    object.number = message.number;
                if (message.label != null && message.hasOwnProperty("label"))
                    object.label = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Label[message.label] : message.label;
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Type[message.type] : message.type;
                if (message.typeName != null && message.hasOwnProperty("typeName"))
                    object.typeName = message.typeName;
                if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                    object.defaultValue = message.defaultValue;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.FieldOptions.toObject(message.options, options);
                if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                    object.oneofIndex = message.oneofIndex;
                if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                    object.jsonName = message.jsonName;
                if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional"))
                    object.proto3Optional = message.proto3Optional;
                return object;
            };

            /**
             * Converts this FieldDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FieldDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Type enum.
             * @name google.protobuf.FieldDescriptorProto.Type
             * @enum {number}
             * @property {number} TYPE_DOUBLE=1 TYPE_DOUBLE value
             * @property {number} TYPE_FLOAT=2 TYPE_FLOAT value
             * @property {number} TYPE_INT64=3 TYPE_INT64 value
             * @property {number} TYPE_UINT64=4 TYPE_UINT64 value
             * @property {number} TYPE_INT32=5 TYPE_INT32 value
             * @property {number} TYPE_FIXED64=6 TYPE_FIXED64 value
             * @property {number} TYPE_FIXED32=7 TYPE_FIXED32 value
             * @property {number} TYPE_BOOL=8 TYPE_BOOL value
             * @property {number} TYPE_STRING=9 TYPE_STRING value
             * @property {number} TYPE_GROUP=10 TYPE_GROUP value
             * @property {number} TYPE_MESSAGE=11 TYPE_MESSAGE value
             * @property {number} TYPE_BYTES=12 TYPE_BYTES value
             * @property {number} TYPE_UINT32=13 TYPE_UINT32 value
             * @property {number} TYPE_ENUM=14 TYPE_ENUM value
             * @property {number} TYPE_SFIXED32=15 TYPE_SFIXED32 value
             * @property {number} TYPE_SFIXED64=16 TYPE_SFIXED64 value
             * @property {number} TYPE_SINT32=17 TYPE_SINT32 value
             * @property {number} TYPE_SINT64=18 TYPE_SINT64 value
             */
            FieldDescriptorProto.Type = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "TYPE_DOUBLE"] = 1;
                values[valuesById[2] = "TYPE_FLOAT"] = 2;
                values[valuesById[3] = "TYPE_INT64"] = 3;
                values[valuesById[4] = "TYPE_UINT64"] = 4;
                values[valuesById[5] = "TYPE_INT32"] = 5;
                values[valuesById[6] = "TYPE_FIXED64"] = 6;
                values[valuesById[7] = "TYPE_FIXED32"] = 7;
                values[valuesById[8] = "TYPE_BOOL"] = 8;
                values[valuesById[9] = "TYPE_STRING"] = 9;
                values[valuesById[10] = "TYPE_GROUP"] = 10;
                values[valuesById[11] = "TYPE_MESSAGE"] = 11;
                values[valuesById[12] = "TYPE_BYTES"] = 12;
                values[valuesById[13] = "TYPE_UINT32"] = 13;
                values[valuesById[14] = "TYPE_ENUM"] = 14;
                values[valuesById[15] = "TYPE_SFIXED32"] = 15;
                values[valuesById[16] = "TYPE_SFIXED64"] = 16;
                values[valuesById[17] = "TYPE_SINT32"] = 17;
                values[valuesById[18] = "TYPE_SINT64"] = 18;
                return values;
            })();

            /**
             * Label enum.
             * @name google.protobuf.FieldDescriptorProto.Label
             * @enum {number}
             * @property {number} LABEL_OPTIONAL=1 LABEL_OPTIONAL value
             * @property {number} LABEL_REQUIRED=2 LABEL_REQUIRED value
             * @property {number} LABEL_REPEATED=3 LABEL_REPEATED value
             */
            FieldDescriptorProto.Label = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
                values[valuesById[2] = "LABEL_REQUIRED"] = 2;
                values[valuesById[3] = "LABEL_REPEATED"] = 3;
                return values;
            })();

            return FieldDescriptorProto;
        })();

        protobuf.OneofDescriptorProto = (function() {

            /**
             * Properties of an OneofDescriptorProto.
             * @memberof google.protobuf
             * @interface IOneofDescriptorProto
             * @property {string|null} [name] OneofDescriptorProto name
             * @property {google.protobuf.IOneofOptions|null} [options] OneofDescriptorProto options
             */

            /**
             * Constructs a new OneofDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents an OneofDescriptorProto.
             * @implements IOneofDescriptorProto
             * @constructor
             * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
             */
            function OneofDescriptorProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * OneofDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.OneofDescriptorProto
             * @instance
             */
            OneofDescriptorProto.prototype.name = "";

            /**
             * OneofDescriptorProto options.
             * @member {google.protobuf.IOneofOptions|null|undefined} options
             * @memberof google.protobuf.OneofDescriptorProto
             * @instance
             */
            OneofDescriptorProto.prototype.options = null;

            /**
             * Creates a new OneofDescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto instance
             */
            OneofDescriptorProto.create = function create(properties) {
                return new OneofDescriptorProto(properties);
            };

            /**
             * Encodes the specified OneofDescriptorProto message. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.OneofOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified OneofDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an OneofDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofDescriptorProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.options = $root.google.protobuf.OneofOptions.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an OneofDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an OneofDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OneofDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    var error = $root.google.protobuf.OneofOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates an OneofDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
             */
            OneofDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.OneofDescriptorProto)
                    return object;
                var message = new $root.google.protobuf.OneofDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.OneofOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from an OneofDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {google.protobuf.OneofDescriptorProto} message OneofDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OneofDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.OneofOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this OneofDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.OneofDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OneofDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return OneofDescriptorProto;
        })();

        protobuf.EnumDescriptorProto = (function() {

            /**
             * Properties of an EnumDescriptorProto.
             * @memberof google.protobuf
             * @interface IEnumDescriptorProto
             * @property {string|null} [name] EnumDescriptorProto name
             * @property {Array.<google.protobuf.IEnumValueDescriptorProto>|null} [value] EnumDescriptorProto value
             * @property {google.protobuf.IEnumOptions|null} [options] EnumDescriptorProto options
             * @property {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>|null} [reservedRange] EnumDescriptorProto reservedRange
             * @property {Array.<string>|null} [reservedName] EnumDescriptorProto reservedName
             */

            /**
             * Constructs a new EnumDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents an EnumDescriptorProto.
             * @implements IEnumDescriptorProto
             * @constructor
             * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
             */
            function EnumDescriptorProto(properties) {
                this.value = [];
                this.reservedRange = [];
                this.reservedName = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.name = "";

            /**
             * EnumDescriptorProto value.
             * @member {Array.<google.protobuf.IEnumValueDescriptorProto>} value
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.value = $util.emptyArray;

            /**
             * EnumDescriptorProto options.
             * @member {google.protobuf.IEnumOptions|null|undefined} options
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.options = null;

            /**
             * EnumDescriptorProto reservedRange.
             * @member {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>} reservedRange
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.reservedRange = $util.emptyArray;

            /**
             * EnumDescriptorProto reservedName.
             * @member {Array.<string>} reservedName
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.reservedName = $util.emptyArray;

            /**
             * Creates a new EnumDescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto instance
             */
            EnumDescriptorProto.create = function create(properties) {
                return new EnumDescriptorProto(properties);
            };

            /**
             * Encodes the specified EnumDescriptorProto message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.value != null && message.value.length)
                    for (var i = 0; i < message.value.length; ++i)
                        $root.google.protobuf.EnumValueDescriptorProto.encode(message.value[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.EnumOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.reservedRange != null && message.reservedRange.length)
                    for (var i = 0; i < message.reservedRange.length; ++i)
                        $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.encode(message.reservedRange[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.reservedName != null && message.reservedName.length)
                    for (var i = 0; i < message.reservedName.length; ++i)
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.reservedName[i]);
                return writer;
            };

            /**
             * Encodes the specified EnumDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        if (!(message.value && message.value.length))
                            message.value = [];
                        message.value.push($root.google.protobuf.EnumValueDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.options = $root.google.protobuf.EnumOptions.decode(reader, reader.uint32());
                        break;
                    case 4:
                        if (!(message.reservedRange && message.reservedRange.length))
                            message.reservedRange = [];
                        message.reservedRange.push($root.google.protobuf.EnumDescriptorProto.EnumReservedRange.decode(reader, reader.uint32()));
                        break;
                    case 5:
                        if (!(message.reservedName && message.reservedName.length))
                            message.reservedName = [];
                        message.reservedName.push(reader.string());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.value != null && message.hasOwnProperty("value")) {
                    if (!Array.isArray(message.value))
                        return "value: array expected";
                    for (var i = 0; i < message.value.length; ++i) {
                        var error = $root.google.protobuf.EnumValueDescriptorProto.verify(message.value[i]);
                        if (error)
                            return "value." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    var error = $root.google.protobuf.EnumOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                    if (!Array.isArray(message.reservedRange))
                        return "reservedRange: array expected";
                    for (var i = 0; i < message.reservedRange.length; ++i) {
                        var error = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(message.reservedRange[i]);
                        if (error)
                            return "reservedRange." + error;
                    }
                }
                if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                    if (!Array.isArray(message.reservedName))
                        return "reservedName: array expected";
                    for (var i = 0; i < message.reservedName.length; ++i)
                        if (!$util.isString(message.reservedName[i]))
                            return "reservedName: string[] expected";
                }
                return null;
            };

            /**
             * Creates an EnumDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
             */
            EnumDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumDescriptorProto)
                    return object;
                var message = new $root.google.protobuf.EnumDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.value) {
                    if (!Array.isArray(object.value))
                        throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
                    message.value = [];
                    for (var i = 0; i < object.value.length; ++i) {
                        if (typeof object.value[i] !== "object")
                            throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
                        message.value[i] = $root.google.protobuf.EnumValueDescriptorProto.fromObject(object.value[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.EnumOptions.fromObject(object.options);
                }
                if (object.reservedRange) {
                    if (!Array.isArray(object.reservedRange))
                        throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: array expected");
                    message.reservedRange = [];
                    for (var i = 0; i < object.reservedRange.length; ++i) {
                        if (typeof object.reservedRange[i] !== "object")
                            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: object expected");
                        message.reservedRange[i] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(object.reservedRange[i]);
                    }
                }
                if (object.reservedName) {
                    if (!Array.isArray(object.reservedName))
                        throw TypeError(".google.protobuf.EnumDescriptorProto.reservedName: array expected");
                    message.reservedName = [];
                    for (var i = 0; i < object.reservedName.length; ++i)
                        message.reservedName[i] = String(object.reservedName[i]);
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {google.protobuf.EnumDescriptorProto} message EnumDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.value = [];
                    object.reservedRange = [];
                    object.reservedName = [];
                }
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.value && message.value.length) {
                    object.value = [];
                    for (var j = 0; j < message.value.length; ++j)
                        object.value[j] = $root.google.protobuf.EnumValueDescriptorProto.toObject(message.value[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.EnumOptions.toObject(message.options, options);
                if (message.reservedRange && message.reservedRange.length) {
                    object.reservedRange = [];
                    for (var j = 0; j < message.reservedRange.length; ++j)
                        object.reservedRange[j] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(message.reservedRange[j], options);
                }
                if (message.reservedName && message.reservedName.length) {
                    object.reservedName = [];
                    for (var j = 0; j < message.reservedName.length; ++j)
                        object.reservedName[j] = message.reservedName[j];
                }
                return object;
            };

            /**
             * Converts this EnumDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            EnumDescriptorProto.EnumReservedRange = (function() {

                /**
                 * Properties of an EnumReservedRange.
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @interface IEnumReservedRange
                 * @property {number|null} [start] EnumReservedRange start
                 * @property {number|null} [end] EnumReservedRange end
                 */

                /**
                 * Constructs a new EnumReservedRange.
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @classdesc Represents an EnumReservedRange.
                 * @implements IEnumReservedRange
                 * @constructor
                 * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange=} [properties] Properties to set
                 */
                function EnumReservedRange(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * EnumReservedRange start.
                 * @member {number} start
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @instance
                 */
                EnumReservedRange.prototype.start = 0;

                /**
                 * EnumReservedRange end.
                 * @member {number} end
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @instance
                 */
                EnumReservedRange.prototype.end = 0;

                /**
                 * Creates a new EnumReservedRange instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange=} [properties] Properties to set
                 * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange instance
                 */
                EnumReservedRange.create = function create(properties) {
                    return new EnumReservedRange(properties);
                };

                /**
                 * Encodes the specified EnumReservedRange message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.EnumReservedRange.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange} message EnumReservedRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumReservedRange.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                    if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                    return writer;
                };

                /**
                 * Encodes the specified EnumReservedRange message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.EnumReservedRange.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange} message EnumReservedRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an EnumReservedRange message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumReservedRange.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.start = reader.int32();
                            break;
                        case 2:
                            message.end = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an EnumReservedRange message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumReservedRange.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an EnumReservedRange message.
                 * @function verify
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumReservedRange.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.start != null && message.hasOwnProperty("start"))
                        if (!$util.isInteger(message.start))
                            return "start: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    return null;
                };

                /**
                 * Creates an EnumReservedRange message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                 */
                EnumReservedRange.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumDescriptorProto.EnumReservedRange)
                        return object;
                    var message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                    if (object.start != null)
                        message.start = object.start | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    return message;
                };

                /**
                 * Creates a plain object from an EnumReservedRange message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto.EnumReservedRange} message EnumReservedRange
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumReservedRange.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.start = 0;
                        object.end = 0;
                    }
                    if (message.start != null && message.hasOwnProperty("start"))
                        object.start = message.start;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    return object;
                };

                /**
                 * Converts this EnumReservedRange to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumReservedRange.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return EnumReservedRange;
            })();

            return EnumDescriptorProto;
        })();

        protobuf.EnumValueDescriptorProto = (function() {

            /**
             * Properties of an EnumValueDescriptorProto.
             * @memberof google.protobuf
             * @interface IEnumValueDescriptorProto
             * @property {string|null} [name] EnumValueDescriptorProto name
             * @property {number|null} [number] EnumValueDescriptorProto number
             * @property {google.protobuf.IEnumValueOptions|null} [options] EnumValueDescriptorProto options
             */

            /**
             * Constructs a new EnumValueDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents an EnumValueDescriptorProto.
             * @implements IEnumValueDescriptorProto
             * @constructor
             * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
             */
            function EnumValueDescriptorProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumValueDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             */
            EnumValueDescriptorProto.prototype.name = "";

            /**
             * EnumValueDescriptorProto number.
             * @member {number} number
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             */
            EnumValueDescriptorProto.prototype.number = 0;

            /**
             * EnumValueDescriptorProto options.
             * @member {google.protobuf.IEnumValueOptions|null|undefined} options
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             */
            EnumValueDescriptorProto.prototype.options = null;

            /**
             * Creates a new EnumValueDescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto instance
             */
            EnumValueDescriptorProto.create = function create(properties) {
                return new EnumValueDescriptorProto(properties);
            };

            /**
             * Encodes the specified EnumValueDescriptorProto message. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.number);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.EnumValueOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified EnumValueDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumValueDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueDescriptorProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.number = reader.int32();
                        break;
                    case 3:
                        message.options = $root.google.protobuf.EnumValueOptions.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumValueDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumValueDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumValueDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.number != null && message.hasOwnProperty("number"))
                    if (!$util.isInteger(message.number))
                        return "number: integer expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    var error = $root.google.protobuf.EnumValueOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates an EnumValueDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
             */
            EnumValueDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumValueDescriptorProto)
                    return object;
                var message = new $root.google.protobuf.EnumValueDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.number != null)
                    message.number = object.number | 0;
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.EnumValueOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumValueDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {google.protobuf.EnumValueDescriptorProto} message EnumValueDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumValueDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.name = "";
                    object.number = 0;
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.number != null && message.hasOwnProperty("number"))
                    object.number = message.number;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.EnumValueOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this EnumValueDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumValueDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EnumValueDescriptorProto;
        })();

        protobuf.ServiceDescriptorProto = (function() {

            /**
             * Properties of a ServiceDescriptorProto.
             * @memberof google.protobuf
             * @interface IServiceDescriptorProto
             * @property {string|null} [name] ServiceDescriptorProto name
             * @property {Array.<google.protobuf.IMethodDescriptorProto>|null} [method] ServiceDescriptorProto method
             * @property {google.protobuf.IServiceOptions|null} [options] ServiceDescriptorProto options
             */

            /**
             * Constructs a new ServiceDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a ServiceDescriptorProto.
             * @implements IServiceDescriptorProto
             * @constructor
             * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
             */
            function ServiceDescriptorProto(properties) {
                this.method = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ServiceDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             */
            ServiceDescriptorProto.prototype.name = "";

            /**
             * ServiceDescriptorProto method.
             * @member {Array.<google.protobuf.IMethodDescriptorProto>} method
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             */
            ServiceDescriptorProto.prototype.method = $util.emptyArray;

            /**
             * ServiceDescriptorProto options.
             * @member {google.protobuf.IServiceOptions|null|undefined} options
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             */
            ServiceDescriptorProto.prototype.options = null;

            /**
             * Creates a new ServiceDescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto instance
             */
            ServiceDescriptorProto.create = function create(properties) {
                return new ServiceDescriptorProto(properties);
            };

            /**
             * Encodes the specified ServiceDescriptorProto message. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.method != null && message.method.length)
                    for (var i = 0; i < message.method.length; ++i)
                        $root.google.protobuf.MethodDescriptorProto.encode(message.method[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.ServiceOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ServiceDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ServiceDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceDescriptorProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        if (!(message.method && message.method.length))
                            message.method = [];
                        message.method.push($root.google.protobuf.MethodDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.options = $root.google.protobuf.ServiceOptions.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ServiceDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ServiceDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ServiceDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.method != null && message.hasOwnProperty("method")) {
                    if (!Array.isArray(message.method))
                        return "method: array expected";
                    for (var i = 0; i < message.method.length; ++i) {
                        var error = $root.google.protobuf.MethodDescriptorProto.verify(message.method[i]);
                        if (error)
                            return "method." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    var error = $root.google.protobuf.ServiceOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates a ServiceDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
             */
            ServiceDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.ServiceDescriptorProto)
                    return object;
                var message = new $root.google.protobuf.ServiceDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.method) {
                    if (!Array.isArray(object.method))
                        throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
                    message.method = [];
                    for (var i = 0; i < object.method.length; ++i) {
                        if (typeof object.method[i] !== "object")
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
                        message.method[i] = $root.google.protobuf.MethodDescriptorProto.fromObject(object.method[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.ServiceOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from a ServiceDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {google.protobuf.ServiceDescriptorProto} message ServiceDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ServiceDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.method = [];
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.method && message.method.length) {
                    object.method = [];
                    for (var j = 0; j < message.method.length; ++j)
                        object.method[j] = $root.google.protobuf.MethodDescriptorProto.toObject(message.method[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.ServiceOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this ServiceDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ServiceDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ServiceDescriptorProto;
        })();

        protobuf.MethodDescriptorProto = (function() {

            /**
             * Properties of a MethodDescriptorProto.
             * @memberof google.protobuf
             * @interface IMethodDescriptorProto
             * @property {string|null} [name] MethodDescriptorProto name
             * @property {string|null} [inputType] MethodDescriptorProto inputType
             * @property {string|null} [outputType] MethodDescriptorProto outputType
             * @property {google.protobuf.IMethodOptions|null} [options] MethodDescriptorProto options
             * @property {boolean|null} [clientStreaming] MethodDescriptorProto clientStreaming
             * @property {boolean|null} [serverStreaming] MethodDescriptorProto serverStreaming
             */

            /**
             * Constructs a new MethodDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a MethodDescriptorProto.
             * @implements IMethodDescriptorProto
             * @constructor
             * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
             */
            function MethodDescriptorProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MethodDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.name = "";

            /**
             * MethodDescriptorProto inputType.
             * @member {string} inputType
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.inputType = "";

            /**
             * MethodDescriptorProto outputType.
             * @member {string} outputType
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.outputType = "";

            /**
             * MethodDescriptorProto options.
             * @member {google.protobuf.IMethodOptions|null|undefined} options
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.options = null;

            /**
             * MethodDescriptorProto clientStreaming.
             * @member {boolean} clientStreaming
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.clientStreaming = false;

            /**
             * MethodDescriptorProto serverStreaming.
             * @member {boolean} serverStreaming
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.serverStreaming = false;

            /**
             * Creates a new MethodDescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto instance
             */
            MethodDescriptorProto.create = function create(properties) {
                return new MethodDescriptorProto(properties);
            };

            /**
             * Encodes the specified MethodDescriptorProto message. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.inputType != null && Object.hasOwnProperty.call(message, "inputType"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.inputType);
                if (message.outputType != null && Object.hasOwnProperty.call(message, "outputType"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.outputType);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.MethodOptions.encode(message.options, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.clientStreaming != null && Object.hasOwnProperty.call(message, "clientStreaming"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.clientStreaming);
                if (message.serverStreaming != null && Object.hasOwnProperty.call(message, "serverStreaming"))
                    writer.uint32(/* id 6, wireType 0 =*/48).bool(message.serverStreaming);
                return writer;
            };

            /**
             * Encodes the specified MethodDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MethodDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodDescriptorProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.inputType = reader.string();
                        break;
                    case 3:
                        message.outputType = reader.string();
                        break;
                    case 4:
                        message.options = $root.google.protobuf.MethodOptions.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.clientStreaming = reader.bool();
                        break;
                    case 6:
                        message.serverStreaming = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MethodDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MethodDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MethodDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.inputType != null && message.hasOwnProperty("inputType"))
                    if (!$util.isString(message.inputType))
                        return "inputType: string expected";
                if (message.outputType != null && message.hasOwnProperty("outputType"))
                    if (!$util.isString(message.outputType))
                        return "outputType: string expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    var error = $root.google.protobuf.MethodOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                    if (typeof message.clientStreaming !== "boolean")
                        return "clientStreaming: boolean expected";
                if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                    if (typeof message.serverStreaming !== "boolean")
                        return "serverStreaming: boolean expected";
                return null;
            };

            /**
             * Creates a MethodDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
             */
            MethodDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.MethodDescriptorProto)
                    return object;
                var message = new $root.google.protobuf.MethodDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.inputType != null)
                    message.inputType = String(object.inputType);
                if (object.outputType != null)
                    message.outputType = String(object.outputType);
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.MethodOptions.fromObject(object.options);
                }
                if (object.clientStreaming != null)
                    message.clientStreaming = Boolean(object.clientStreaming);
                if (object.serverStreaming != null)
                    message.serverStreaming = Boolean(object.serverStreaming);
                return message;
            };

            /**
             * Creates a plain object from a MethodDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {google.protobuf.MethodDescriptorProto} message MethodDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MethodDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.name = "";
                    object.inputType = "";
                    object.outputType = "";
                    object.options = null;
                    object.clientStreaming = false;
                    object.serverStreaming = false;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.inputType != null && message.hasOwnProperty("inputType"))
                    object.inputType = message.inputType;
                if (message.outputType != null && message.hasOwnProperty("outputType"))
                    object.outputType = message.outputType;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.MethodOptions.toObject(message.options, options);
                if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                    object.clientStreaming = message.clientStreaming;
                if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                    object.serverStreaming = message.serverStreaming;
                return object;
            };

            /**
             * Converts this MethodDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MethodDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MethodDescriptorProto;
        })();

        protobuf.FileOptions = (function() {

            /**
             * Properties of a FileOptions.
             * @memberof google.protobuf
             * @interface IFileOptions
             * @property {string|null} [javaPackage] FileOptions javaPackage
             * @property {string|null} [javaOuterClassname] FileOptions javaOuterClassname
             * @property {boolean|null} [javaMultipleFiles] FileOptions javaMultipleFiles
             * @property {boolean|null} [javaGenerateEqualsAndHash] FileOptions javaGenerateEqualsAndHash
             * @property {boolean|null} [javaStringCheckUtf8] FileOptions javaStringCheckUtf8
             * @property {google.protobuf.FileOptions.OptimizeMode|null} [optimizeFor] FileOptions optimizeFor
             * @property {string|null} [goPackage] FileOptions goPackage
             * @property {boolean|null} [ccGenericServices] FileOptions ccGenericServices
             * @property {boolean|null} [javaGenericServices] FileOptions javaGenericServices
             * @property {boolean|null} [pyGenericServices] FileOptions pyGenericServices
             * @property {boolean|null} [phpGenericServices] FileOptions phpGenericServices
             * @property {boolean|null} [deprecated] FileOptions deprecated
             * @property {boolean|null} [ccEnableArenas] FileOptions ccEnableArenas
             * @property {string|null} [objcClassPrefix] FileOptions objcClassPrefix
             * @property {string|null} [csharpNamespace] FileOptions csharpNamespace
             * @property {string|null} [swiftPrefix] FileOptions swiftPrefix
             * @property {string|null} [phpClassPrefix] FileOptions phpClassPrefix
             * @property {string|null} [phpNamespace] FileOptions phpNamespace
             * @property {string|null} [phpMetadataNamespace] FileOptions phpMetadataNamespace
             * @property {string|null} [rubyPackage] FileOptions rubyPackage
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FileOptions uninterpretedOption
             * @property {akkaserverless.IFileOptions|null} [".akkaserverless.file"] FileOptions .akkaserverless.file
             */

            /**
             * Constructs a new FileOptions.
             * @memberof google.protobuf
             * @classdesc Represents a FileOptions.
             * @implements IFileOptions
             * @constructor
             * @param {google.protobuf.IFileOptions=} [properties] Properties to set
             */
            function FileOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FileOptions javaPackage.
             * @member {string} javaPackage
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.javaPackage = "";

            /**
             * FileOptions javaOuterClassname.
             * @member {string} javaOuterClassname
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.javaOuterClassname = "";

            /**
             * FileOptions javaMultipleFiles.
             * @member {boolean} javaMultipleFiles
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.javaMultipleFiles = false;

            /**
             * FileOptions javaGenerateEqualsAndHash.
             * @member {boolean} javaGenerateEqualsAndHash
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.javaGenerateEqualsAndHash = false;

            /**
             * FileOptions javaStringCheckUtf8.
             * @member {boolean} javaStringCheckUtf8
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.javaStringCheckUtf8 = false;

            /**
             * FileOptions optimizeFor.
             * @member {google.protobuf.FileOptions.OptimizeMode} optimizeFor
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.optimizeFor = 1;

            /**
             * FileOptions goPackage.
             * @member {string} goPackage
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.goPackage = "";

            /**
             * FileOptions ccGenericServices.
             * @member {boolean} ccGenericServices
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.ccGenericServices = false;

            /**
             * FileOptions javaGenericServices.
             * @member {boolean} javaGenericServices
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.javaGenericServices = false;

            /**
             * FileOptions pyGenericServices.
             * @member {boolean} pyGenericServices
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.pyGenericServices = false;

            /**
             * FileOptions phpGenericServices.
             * @member {boolean} phpGenericServices
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.phpGenericServices = false;

            /**
             * FileOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.deprecated = false;

            /**
             * FileOptions ccEnableArenas.
             * @member {boolean} ccEnableArenas
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.ccEnableArenas = true;

            /**
             * FileOptions objcClassPrefix.
             * @member {string} objcClassPrefix
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.objcClassPrefix = "";

            /**
             * FileOptions csharpNamespace.
             * @member {string} csharpNamespace
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.csharpNamespace = "";

            /**
             * FileOptions swiftPrefix.
             * @member {string} swiftPrefix
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.swiftPrefix = "";

            /**
             * FileOptions phpClassPrefix.
             * @member {string} phpClassPrefix
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.phpClassPrefix = "";

            /**
             * FileOptions phpNamespace.
             * @member {string} phpNamespace
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.phpNamespace = "";

            /**
             * FileOptions phpMetadataNamespace.
             * @member {string} phpMetadataNamespace
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.phpMetadataNamespace = "";

            /**
             * FileOptions rubyPackage.
             * @member {string} rubyPackage
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.rubyPackage = "";

            /**
             * FileOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * FileOptions .akkaserverless.file.
             * @member {akkaserverless.IFileOptions|null|undefined} .akkaserverless.file
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".akkaserverless.file"] = null;

            /**
             * Creates a new FileOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {google.protobuf.IFileOptions=} [properties] Properties to set
             * @returns {google.protobuf.FileOptions} FileOptions instance
             */
            FileOptions.create = function create(properties) {
                return new FileOptions(properties);
            };

            /**
             * Encodes the specified FileOptions message. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.javaPackage != null && Object.hasOwnProperty.call(message, "javaPackage"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.javaPackage);
                if (message.javaOuterClassname != null && Object.hasOwnProperty.call(message, "javaOuterClassname"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.javaOuterClassname);
                if (message.optimizeFor != null && Object.hasOwnProperty.call(message, "optimizeFor"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int32(message.optimizeFor);
                if (message.javaMultipleFiles != null && Object.hasOwnProperty.call(message, "javaMultipleFiles"))
                    writer.uint32(/* id 10, wireType 0 =*/80).bool(message.javaMultipleFiles);
                if (message.goPackage != null && Object.hasOwnProperty.call(message, "goPackage"))
                    writer.uint32(/* id 11, wireType 2 =*/90).string(message.goPackage);
                if (message.ccGenericServices != null && Object.hasOwnProperty.call(message, "ccGenericServices"))
                    writer.uint32(/* id 16, wireType 0 =*/128).bool(message.ccGenericServices);
                if (message.javaGenericServices != null && Object.hasOwnProperty.call(message, "javaGenericServices"))
                    writer.uint32(/* id 17, wireType 0 =*/136).bool(message.javaGenericServices);
                if (message.pyGenericServices != null && Object.hasOwnProperty.call(message, "pyGenericServices"))
                    writer.uint32(/* id 18, wireType 0 =*/144).bool(message.pyGenericServices);
                if (message.javaGenerateEqualsAndHash != null && Object.hasOwnProperty.call(message, "javaGenerateEqualsAndHash"))
                    writer.uint32(/* id 20, wireType 0 =*/160).bool(message.javaGenerateEqualsAndHash);
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 23, wireType 0 =*/184).bool(message.deprecated);
                if (message.javaStringCheckUtf8 != null && Object.hasOwnProperty.call(message, "javaStringCheckUtf8"))
                    writer.uint32(/* id 27, wireType 0 =*/216).bool(message.javaStringCheckUtf8);
                if (message.ccEnableArenas != null && Object.hasOwnProperty.call(message, "ccEnableArenas"))
                    writer.uint32(/* id 31, wireType 0 =*/248).bool(message.ccEnableArenas);
                if (message.objcClassPrefix != null && Object.hasOwnProperty.call(message, "objcClassPrefix"))
                    writer.uint32(/* id 36, wireType 2 =*/290).string(message.objcClassPrefix);
                if (message.csharpNamespace != null && Object.hasOwnProperty.call(message, "csharpNamespace"))
                    writer.uint32(/* id 37, wireType 2 =*/298).string(message.csharpNamespace);
                if (message.swiftPrefix != null && Object.hasOwnProperty.call(message, "swiftPrefix"))
                    writer.uint32(/* id 39, wireType 2 =*/314).string(message.swiftPrefix);
                if (message.phpClassPrefix != null && Object.hasOwnProperty.call(message, "phpClassPrefix"))
                    writer.uint32(/* id 40, wireType 2 =*/322).string(message.phpClassPrefix);
                if (message.phpNamespace != null && Object.hasOwnProperty.call(message, "phpNamespace"))
                    writer.uint32(/* id 41, wireType 2 =*/330).string(message.phpNamespace);
                if (message.phpGenericServices != null && Object.hasOwnProperty.call(message, "phpGenericServices"))
                    writer.uint32(/* id 42, wireType 0 =*/336).bool(message.phpGenericServices);
                if (message.phpMetadataNamespace != null && Object.hasOwnProperty.call(message, "phpMetadataNamespace"))
                    writer.uint32(/* id 44, wireType 2 =*/354).string(message.phpMetadataNamespace);
                if (message.rubyPackage != null && Object.hasOwnProperty.call(message, "rubyPackage"))
                    writer.uint32(/* id 45, wireType 2 =*/362).string(message.rubyPackage);
                if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                    for (var i = 0; i < message.uninterpretedOption.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                if (message[".akkaserverless.file"] != null && Object.hasOwnProperty.call(message, ".akkaserverless.file"))
                    $root.akkaserverless.FileOptions.encode(message[".akkaserverless.file"], writer.uint32(/* id 1080, wireType 2 =*/8642).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified FileOptions message, length delimited. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FileOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FileOptions} FileOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.javaPackage = reader.string();
                        break;
                    case 8:
                        message.javaOuterClassname = reader.string();
                        break;
                    case 10:
                        message.javaMultipleFiles = reader.bool();
                        break;
                    case 20:
                        message.javaGenerateEqualsAndHash = reader.bool();
                        break;
                    case 27:
                        message.javaStringCheckUtf8 = reader.bool();
                        break;
                    case 9:
                        message.optimizeFor = reader.int32();
                        break;
                    case 11:
                        message.goPackage = reader.string();
                        break;
                    case 16:
                        message.ccGenericServices = reader.bool();
                        break;
                    case 17:
                        message.javaGenericServices = reader.bool();
                        break;
                    case 18:
                        message.pyGenericServices = reader.bool();
                        break;
                    case 42:
                        message.phpGenericServices = reader.bool();
                        break;
                    case 23:
                        message.deprecated = reader.bool();
                        break;
                    case 31:
                        message.ccEnableArenas = reader.bool();
                        break;
                    case 36:
                        message.objcClassPrefix = reader.string();
                        break;
                    case 37:
                        message.csharpNamespace = reader.string();
                        break;
                    case 39:
                        message.swiftPrefix = reader.string();
                        break;
                    case 40:
                        message.phpClassPrefix = reader.string();
                        break;
                    case 41:
                        message.phpNamespace = reader.string();
                        break;
                    case 44:
                        message.phpMetadataNamespace = reader.string();
                        break;
                    case 45:
                        message.rubyPackage = reader.string();
                        break;
                    case 999:
                        if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                            message.uninterpretedOption = [];
                        message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    case 1080:
                        message[".akkaserverless.file"] = $root.akkaserverless.FileOptions.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FileOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FileOptions} FileOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FileOptions message.
             * @function verify
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FileOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                    if (!$util.isString(message.javaPackage))
                        return "javaPackage: string expected";
                if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                    if (!$util.isString(message.javaOuterClassname))
                        return "javaOuterClassname: string expected";
                if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                    if (typeof message.javaMultipleFiles !== "boolean")
                        return "javaMultipleFiles: boolean expected";
                if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                    if (typeof message.javaGenerateEqualsAndHash !== "boolean")
                        return "javaGenerateEqualsAndHash: boolean expected";
                if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                    if (typeof message.javaStringCheckUtf8 !== "boolean")
                        return "javaStringCheckUtf8: boolean expected";
                if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                    switch (message.optimizeFor) {
                    default:
                        return "optimizeFor: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                    if (!$util.isString(message.goPackage))
                        return "goPackage: string expected";
                if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                    if (typeof message.ccGenericServices !== "boolean")
                        return "ccGenericServices: boolean expected";
                if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                    if (typeof message.javaGenericServices !== "boolean")
                        return "javaGenericServices: boolean expected";
                if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                    if (typeof message.pyGenericServices !== "boolean")
                        return "pyGenericServices: boolean expected";
                if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                    if (typeof message.phpGenericServices !== "boolean")
                        return "phpGenericServices: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                    if (typeof message.ccEnableArenas !== "boolean")
                        return "ccEnableArenas: boolean expected";
                if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                    if (!$util.isString(message.objcClassPrefix))
                        return "objcClassPrefix: string expected";
                if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                    if (!$util.isString(message.csharpNamespace))
                        return "csharpNamespace: string expected";
                if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                    if (!$util.isString(message.swiftPrefix))
                        return "swiftPrefix: string expected";
                if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                    if (!$util.isString(message.phpClassPrefix))
                        return "phpClassPrefix: string expected";
                if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                    if (!$util.isString(message.phpNamespace))
                        return "phpNamespace: string expected";
                if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                    if (!$util.isString(message.phpMetadataNamespace))
                        return "phpMetadataNamespace: string expected";
                if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                    if (!$util.isString(message.rubyPackage))
                        return "rubyPackage: string expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                        var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                if (message[".akkaserverless.file"] != null && message.hasOwnProperty(".akkaserverless.file")) {
                    var error = $root.akkaserverless.FileOptions.verify(message[".akkaserverless.file"]);
                    if (error)
                        return ".akkaserverless.file." + error;
                }
                return null;
            };

            /**
             * Creates a FileOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileOptions} FileOptions
             */
            FileOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FileOptions)
                    return object;
                var message = new $root.google.protobuf.FileOptions();
                if (object.javaPackage != null)
                    message.javaPackage = String(object.javaPackage);
                if (object.javaOuterClassname != null)
                    message.javaOuterClassname = String(object.javaOuterClassname);
                if (object.javaMultipleFiles != null)
                    message.javaMultipleFiles = Boolean(object.javaMultipleFiles);
                if (object.javaGenerateEqualsAndHash != null)
                    message.javaGenerateEqualsAndHash = Boolean(object.javaGenerateEqualsAndHash);
                if (object.javaStringCheckUtf8 != null)
                    message.javaStringCheckUtf8 = Boolean(object.javaStringCheckUtf8);
                switch (object.optimizeFor) {
                case "SPEED":
                case 1:
                    message.optimizeFor = 1;
                    break;
                case "CODE_SIZE":
                case 2:
                    message.optimizeFor = 2;
                    break;
                case "LITE_RUNTIME":
                case 3:
                    message.optimizeFor = 3;
                    break;
                }
                if (object.goPackage != null)
                    message.goPackage = String(object.goPackage);
                if (object.ccGenericServices != null)
                    message.ccGenericServices = Boolean(object.ccGenericServices);
                if (object.javaGenericServices != null)
                    message.javaGenericServices = Boolean(object.javaGenericServices);
                if (object.pyGenericServices != null)
                    message.pyGenericServices = Boolean(object.pyGenericServices);
                if (object.phpGenericServices != null)
                    message.phpGenericServices = Boolean(object.phpGenericServices);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.ccEnableArenas != null)
                    message.ccEnableArenas = Boolean(object.ccEnableArenas);
                if (object.objcClassPrefix != null)
                    message.objcClassPrefix = String(object.objcClassPrefix);
                if (object.csharpNamespace != null)
                    message.csharpNamespace = String(object.csharpNamespace);
                if (object.swiftPrefix != null)
                    message.swiftPrefix = String(object.swiftPrefix);
                if (object.phpClassPrefix != null)
                    message.phpClassPrefix = String(object.phpClassPrefix);
                if (object.phpNamespace != null)
                    message.phpNamespace = String(object.phpNamespace);
                if (object.phpMetadataNamespace != null)
                    message.phpMetadataNamespace = String(object.phpMetadataNamespace);
                if (object.rubyPackage != null)
                    message.rubyPackage = String(object.rubyPackage);
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                if (object[".akkaserverless.file"] != null) {
                    if (typeof object[".akkaserverless.file"] !== "object")
                        throw TypeError(".google.protobuf.FileOptions..akkaserverless.file: object expected");
                    message[".akkaserverless.file"] = $root.akkaserverless.FileOptions.fromObject(object[".akkaserverless.file"]);
                }
                return message;
            };

            /**
             * Creates a plain object from a FileOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {google.protobuf.FileOptions} message FileOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FileOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults) {
                    object.javaPackage = "";
                    object.javaOuterClassname = "";
                    object.optimizeFor = options.enums === String ? "SPEED" : 1;
                    object.javaMultipleFiles = false;
                    object.goPackage = "";
                    object.ccGenericServices = false;
                    object.javaGenericServices = false;
                    object.pyGenericServices = false;
                    object.javaGenerateEqualsAndHash = false;
                    object.deprecated = false;
                    object.javaStringCheckUtf8 = false;
                    object.ccEnableArenas = true;
                    object.objcClassPrefix = "";
                    object.csharpNamespace = "";
                    object.swiftPrefix = "";
                    object.phpClassPrefix = "";
                    object.phpNamespace = "";
                    object.phpGenericServices = false;
                    object.phpMetadataNamespace = "";
                    object.rubyPackage = "";
                    object[".akkaserverless.file"] = null;
                }
                if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                    object.javaPackage = message.javaPackage;
                if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                    object.javaOuterClassname = message.javaOuterClassname;
                if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                    object.optimizeFor = options.enums === String ? $root.google.protobuf.FileOptions.OptimizeMode[message.optimizeFor] : message.optimizeFor;
                if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                    object.javaMultipleFiles = message.javaMultipleFiles;
                if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                    object.goPackage = message.goPackage;
                if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                    object.ccGenericServices = message.ccGenericServices;
                if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                    object.javaGenericServices = message.javaGenericServices;
                if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                    object.pyGenericServices = message.pyGenericServices;
                if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                    object.javaGenerateEqualsAndHash = message.javaGenerateEqualsAndHash;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                    object.javaStringCheckUtf8 = message.javaStringCheckUtf8;
                if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                    object.ccEnableArenas = message.ccEnableArenas;
                if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                    object.objcClassPrefix = message.objcClassPrefix;
                if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                    object.csharpNamespace = message.csharpNamespace;
                if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                    object.swiftPrefix = message.swiftPrefix;
                if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                    object.phpClassPrefix = message.phpClassPrefix;
                if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                    object.phpNamespace = message.phpNamespace;
                if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                    object.phpGenericServices = message.phpGenericServices;
                if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                    object.phpMetadataNamespace = message.phpMetadataNamespace;
                if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                    object.rubyPackage = message.rubyPackage;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (var j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                if (message[".akkaserverless.file"] != null && message.hasOwnProperty(".akkaserverless.file"))
                    object[".akkaserverless.file"] = $root.akkaserverless.FileOptions.toObject(message[".akkaserverless.file"], options);
                return object;
            };

            /**
             * Converts this FileOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.FileOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FileOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * OptimizeMode enum.
             * @name google.protobuf.FileOptions.OptimizeMode
             * @enum {number}
             * @property {number} SPEED=1 SPEED value
             * @property {number} CODE_SIZE=2 CODE_SIZE value
             * @property {number} LITE_RUNTIME=3 LITE_RUNTIME value
             */
            FileOptions.OptimizeMode = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "SPEED"] = 1;
                values[valuesById[2] = "CODE_SIZE"] = 2;
                values[valuesById[3] = "LITE_RUNTIME"] = 3;
                return values;
            })();

            return FileOptions;
        })();

        protobuf.MessageOptions = (function() {

            /**
             * Properties of a MessageOptions.
             * @memberof google.protobuf
             * @interface IMessageOptions
             * @property {boolean|null} [messageSetWireFormat] MessageOptions messageSetWireFormat
             * @property {boolean|null} [noStandardDescriptorAccessor] MessageOptions noStandardDescriptorAccessor
             * @property {boolean|null} [deprecated] MessageOptions deprecated
             * @property {boolean|null} [mapEntry] MessageOptions mapEntry
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MessageOptions uninterpretedOption
             */

            /**
             * Constructs a new MessageOptions.
             * @memberof google.protobuf
             * @classdesc Represents a MessageOptions.
             * @implements IMessageOptions
             * @constructor
             * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
             */
            function MessageOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MessageOptions messageSetWireFormat.
             * @member {boolean} messageSetWireFormat
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.messageSetWireFormat = false;

            /**
             * MessageOptions noStandardDescriptorAccessor.
             * @member {boolean} noStandardDescriptorAccessor
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.noStandardDescriptorAccessor = false;

            /**
             * MessageOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.deprecated = false;

            /**
             * MessageOptions mapEntry.
             * @member {boolean} mapEntry
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.mapEntry = false;

            /**
             * MessageOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * Creates a new MessageOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
             * @returns {google.protobuf.MessageOptions} MessageOptions instance
             */
            MessageOptions.create = function create(properties) {
                return new MessageOptions(properties);
            };

            /**
             * Encodes the specified MessageOptions message. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MessageOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.messageSetWireFormat != null && Object.hasOwnProperty.call(message, "messageSetWireFormat"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.messageSetWireFormat);
                if (message.noStandardDescriptorAccessor != null && Object.hasOwnProperty.call(message, "noStandardDescriptorAccessor"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.noStandardDescriptorAccessor);
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                if (message.mapEntry != null && Object.hasOwnProperty.call(message, "mapEntry"))
                    writer.uint32(/* id 7, wireType 0 =*/56).bool(message.mapEntry);
                if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                    for (var i = 0; i < message.uninterpretedOption.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified MessageOptions message, length delimited. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MessageOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MessageOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.MessageOptions} MessageOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MessageOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MessageOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.messageSetWireFormat = reader.bool();
                        break;
                    case 2:
                        message.noStandardDescriptorAccessor = reader.bool();
                        break;
                    case 3:
                        message.deprecated = reader.bool();
                        break;
                    case 7:
                        message.mapEntry = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                            message.uninterpretedOption = [];
                        message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MessageOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.MessageOptions} MessageOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MessageOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MessageOptions message.
             * @function verify
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MessageOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                    if (typeof message.messageSetWireFormat !== "boolean")
                        return "messageSetWireFormat: boolean expected";
                if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                    if (typeof message.noStandardDescriptorAccessor !== "boolean")
                        return "noStandardDescriptorAccessor: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                    if (typeof message.mapEntry !== "boolean")
                        return "mapEntry: boolean expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                        var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MessageOptions} MessageOptions
             */
            MessageOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.MessageOptions)
                    return object;
                var message = new $root.google.protobuf.MessageOptions();
                if (object.messageSetWireFormat != null)
                    message.messageSetWireFormat = Boolean(object.messageSetWireFormat);
                if (object.noStandardDescriptorAccessor != null)
                    message.noStandardDescriptorAccessor = Boolean(object.noStandardDescriptorAccessor);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.mapEntry != null)
                    message.mapEntry = Boolean(object.mapEntry);
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {google.protobuf.MessageOptions} message MessageOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MessageOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults) {
                    object.messageSetWireFormat = false;
                    object.noStandardDescriptorAccessor = false;
                    object.deprecated = false;
                    object.mapEntry = false;
                }
                if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                    object.messageSetWireFormat = message.messageSetWireFormat;
                if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                    object.noStandardDescriptorAccessor = message.noStandardDescriptorAccessor;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                    object.mapEntry = message.mapEntry;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (var j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                return object;
            };

            /**
             * Converts this MessageOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.MessageOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MessageOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MessageOptions;
        })();

        protobuf.FieldOptions = (function() {

            /**
             * Properties of a FieldOptions.
             * @memberof google.protobuf
             * @interface IFieldOptions
             * @property {google.protobuf.FieldOptions.CType|null} [ctype] FieldOptions ctype
             * @property {boolean|null} [packed] FieldOptions packed
             * @property {google.protobuf.FieldOptions.JSType|null} [jstype] FieldOptions jstype
             * @property {boolean|null} [lazy] FieldOptions lazy
             * @property {boolean|null} [deprecated] FieldOptions deprecated
             * @property {boolean|null} [weak] FieldOptions weak
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FieldOptions uninterpretedOption
             * @property {akkaserverless.IFieldOptions|null} [".akkaserverless.field"] FieldOptions .akkaserverless.field
             * @property {boolean|null} [".akkaserverless.legacyEntityKey"] FieldOptions .akkaserverless.legacyEntityKey
             */

            /**
             * Constructs a new FieldOptions.
             * @memberof google.protobuf
             * @classdesc Represents a FieldOptions.
             * @implements IFieldOptions
             * @constructor
             * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
             */
            function FieldOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FieldOptions ctype.
             * @member {google.protobuf.FieldOptions.CType} ctype
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.ctype = 0;

            /**
             * FieldOptions packed.
             * @member {boolean} packed
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.packed = false;

            /**
             * FieldOptions jstype.
             * @member {google.protobuf.FieldOptions.JSType} jstype
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.jstype = 0;

            /**
             * FieldOptions lazy.
             * @member {boolean} lazy
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.lazy = false;

            /**
             * FieldOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.deprecated = false;

            /**
             * FieldOptions weak.
             * @member {boolean} weak
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.weak = false;

            /**
             * FieldOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * FieldOptions .akkaserverless.field.
             * @member {akkaserverless.IFieldOptions|null|undefined} .akkaserverless.field
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".akkaserverless.field"] = null;

            /**
             * FieldOptions .akkaserverless.legacyEntityKey.
             * @member {boolean} .akkaserverless.legacyEntityKey
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".akkaserverless.legacyEntityKey"] = false;

            /**
             * Creates a new FieldOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
             * @returns {google.protobuf.FieldOptions} FieldOptions instance
             */
            FieldOptions.create = function create(properties) {
                return new FieldOptions(properties);
            };

            /**
             * Encodes the specified FieldOptions message. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ctype != null && Object.hasOwnProperty.call(message, "ctype"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ctype);
                if (message.packed != null && Object.hasOwnProperty.call(message, "packed"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.packed);
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                if (message.lazy != null && Object.hasOwnProperty.call(message, "lazy"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.lazy);
                if (message.jstype != null && Object.hasOwnProperty.call(message, "jstype"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.jstype);
                if (message.weak != null && Object.hasOwnProperty.call(message, "weak"))
                    writer.uint32(/* id 10, wireType 0 =*/80).bool(message.weak);
                if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                    for (var i = 0; i < message.uninterpretedOption.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                if (message[".akkaserverless.field"] != null && Object.hasOwnProperty.call(message, ".akkaserverless.field"))
                    $root.akkaserverless.FieldOptions.encode(message[".akkaserverless.field"], writer.uint32(/* id 1080, wireType 2 =*/8642).fork()).ldelim();
                if (message[".akkaserverless.legacyEntityKey"] != null && Object.hasOwnProperty.call(message, ".akkaserverless.legacyEntityKey"))
                    writer.uint32(/* id 50002, wireType 0 =*/400016).bool(message[".akkaserverless.legacyEntityKey"]);
                return writer;
            };

            /**
             * Encodes the specified FieldOptions message, length delimited. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FieldOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FieldOptions} FieldOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.ctype = reader.int32();
                        break;
                    case 2:
                        message.packed = reader.bool();
                        break;
                    case 6:
                        message.jstype = reader.int32();
                        break;
                    case 5:
                        message.lazy = reader.bool();
                        break;
                    case 3:
                        message.deprecated = reader.bool();
                        break;
                    case 10:
                        message.weak = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                            message.uninterpretedOption = [];
                        message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    case 1080:
                        message[".akkaserverless.field"] = $root.akkaserverless.FieldOptions.decode(reader, reader.uint32());
                        break;
                    case 50002:
                        message[".akkaserverless.legacyEntityKey"] = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FieldOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FieldOptions} FieldOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FieldOptions message.
             * @function verify
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FieldOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ctype != null && message.hasOwnProperty("ctype"))
                    switch (message.ctype) {
                    default:
                        return "ctype: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.packed != null && message.hasOwnProperty("packed"))
                    if (typeof message.packed !== "boolean")
                        return "packed: boolean expected";
                if (message.jstype != null && message.hasOwnProperty("jstype"))
                    switch (message.jstype) {
                    default:
                        return "jstype: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.lazy != null && message.hasOwnProperty("lazy"))
                    if (typeof message.lazy !== "boolean")
                        return "lazy: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.weak != null && message.hasOwnProperty("weak"))
                    if (typeof message.weak !== "boolean")
                        return "weak: boolean expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                        var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                if (message[".akkaserverless.field"] != null && message.hasOwnProperty(".akkaserverless.field")) {
                    var error = $root.akkaserverless.FieldOptions.verify(message[".akkaserverless.field"]);
                    if (error)
                        return ".akkaserverless.field." + error;
                }
                if (message[".akkaserverless.legacyEntityKey"] != null && message.hasOwnProperty(".akkaserverless.legacyEntityKey"))
                    if (typeof message[".akkaserverless.legacyEntityKey"] !== "boolean")
                        return ".akkaserverless.legacyEntityKey: boolean expected";
                return null;
            };

            /**
             * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FieldOptions} FieldOptions
             */
            FieldOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FieldOptions)
                    return object;
                var message = new $root.google.protobuf.FieldOptions();
                switch (object.ctype) {
                case "STRING":
                case 0:
                    message.ctype = 0;
                    break;
                case "CORD":
                case 1:
                    message.ctype = 1;
                    break;
                case "STRING_PIECE":
                case 2:
                    message.ctype = 2;
                    break;
                }
                if (object.packed != null)
                    message.packed = Boolean(object.packed);
                switch (object.jstype) {
                case "JS_NORMAL":
                case 0:
                    message.jstype = 0;
                    break;
                case "JS_STRING":
                case 1:
                    message.jstype = 1;
                    break;
                case "JS_NUMBER":
                case 2:
                    message.jstype = 2;
                    break;
                }
                if (object.lazy != null)
                    message.lazy = Boolean(object.lazy);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.weak != null)
                    message.weak = Boolean(object.weak);
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                if (object[".akkaserverless.field"] != null) {
                    if (typeof object[".akkaserverless.field"] !== "object")
                        throw TypeError(".google.protobuf.FieldOptions..akkaserverless.field: object expected");
                    message[".akkaserverless.field"] = $root.akkaserverless.FieldOptions.fromObject(object[".akkaserverless.field"]);
                }
                if (object[".akkaserverless.legacyEntityKey"] != null)
                    message[".akkaserverless.legacyEntityKey"] = Boolean(object[".akkaserverless.legacyEntityKey"]);
                return message;
            };

            /**
             * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {google.protobuf.FieldOptions} message FieldOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FieldOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults) {
                    object.ctype = options.enums === String ? "STRING" : 0;
                    object.packed = false;
                    object.deprecated = false;
                    object.lazy = false;
                    object.jstype = options.enums === String ? "JS_NORMAL" : 0;
                    object.weak = false;
                    object[".akkaserverless.field"] = null;
                    object[".akkaserverless.legacyEntityKey"] = false;
                }
                if (message.ctype != null && message.hasOwnProperty("ctype"))
                    object.ctype = options.enums === String ? $root.google.protobuf.FieldOptions.CType[message.ctype] : message.ctype;
                if (message.packed != null && message.hasOwnProperty("packed"))
                    object.packed = message.packed;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.lazy != null && message.hasOwnProperty("lazy"))
                    object.lazy = message.lazy;
                if (message.jstype != null && message.hasOwnProperty("jstype"))
                    object.jstype = options.enums === String ? $root.google.protobuf.FieldOptions.JSType[message.jstype] : message.jstype;
                if (message.weak != null && message.hasOwnProperty("weak"))
                    object.weak = message.weak;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (var j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                if (message[".akkaserverless.field"] != null && message.hasOwnProperty(".akkaserverless.field"))
                    object[".akkaserverless.field"] = $root.akkaserverless.FieldOptions.toObject(message[".akkaserverless.field"], options);
                if (message[".akkaserverless.legacyEntityKey"] != null && message.hasOwnProperty(".akkaserverless.legacyEntityKey"))
                    object[".akkaserverless.legacyEntityKey"] = message[".akkaserverless.legacyEntityKey"];
                return object;
            };

            /**
             * Converts this FieldOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.FieldOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FieldOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * CType enum.
             * @name google.protobuf.FieldOptions.CType
             * @enum {number}
             * @property {number} STRING=0 STRING value
             * @property {number} CORD=1 CORD value
             * @property {number} STRING_PIECE=2 STRING_PIECE value
             */
            FieldOptions.CType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "STRING"] = 0;
                values[valuesById[1] = "CORD"] = 1;
                values[valuesById[2] = "STRING_PIECE"] = 2;
                return values;
            })();

            /**
             * JSType enum.
             * @name google.protobuf.FieldOptions.JSType
             * @enum {number}
             * @property {number} JS_NORMAL=0 JS_NORMAL value
             * @property {number} JS_STRING=1 JS_STRING value
             * @property {number} JS_NUMBER=2 JS_NUMBER value
             */
            FieldOptions.JSType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "JS_NORMAL"] = 0;
                values[valuesById[1] = "JS_STRING"] = 1;
                values[valuesById[2] = "JS_NUMBER"] = 2;
                return values;
            })();

            return FieldOptions;
        })();

        protobuf.OneofOptions = (function() {

            /**
             * Properties of an OneofOptions.
             * @memberof google.protobuf
             * @interface IOneofOptions
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] OneofOptions uninterpretedOption
             */

            /**
             * Constructs a new OneofOptions.
             * @memberof google.protobuf
             * @classdesc Represents an OneofOptions.
             * @implements IOneofOptions
             * @constructor
             * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
             */
            function OneofOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * OneofOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.OneofOptions
             * @instance
             */
            OneofOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * Creates a new OneofOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
             * @returns {google.protobuf.OneofOptions} OneofOptions instance
             */
            OneofOptions.create = function create(properties) {
                return new OneofOptions(properties);
            };

            /**
             * Encodes the specified OneofOptions message. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                    for (var i = 0; i < message.uninterpretedOption.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified OneofOptions message, length delimited. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an OneofOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.OneofOptions} OneofOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 999:
                        if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                            message.uninterpretedOption = [];
                        message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an OneofOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.OneofOptions} OneofOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an OneofOptions message.
             * @function verify
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OneofOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                        var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an OneofOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.OneofOptions} OneofOptions
             */
            OneofOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.OneofOptions)
                    return object;
                var message = new $root.google.protobuf.OneofOptions();
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an OneofOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {google.protobuf.OneofOptions} message OneofOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OneofOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (var j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                return object;
            };

            /**
             * Converts this OneofOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.OneofOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OneofOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return OneofOptions;
        })();

        protobuf.EnumOptions = (function() {

            /**
             * Properties of an EnumOptions.
             * @memberof google.protobuf
             * @interface IEnumOptions
             * @property {boolean|null} [allowAlias] EnumOptions allowAlias
             * @property {boolean|null} [deprecated] EnumOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumOptions uninterpretedOption
             */

            /**
             * Constructs a new EnumOptions.
             * @memberof google.protobuf
             * @classdesc Represents an EnumOptions.
             * @implements IEnumOptions
             * @constructor
             * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
             */
            function EnumOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumOptions allowAlias.
             * @member {boolean} allowAlias
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype.allowAlias = false;

            /**
             * EnumOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype.deprecated = false;

            /**
             * EnumOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * Creates a new EnumOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
             * @returns {google.protobuf.EnumOptions} EnumOptions instance
             */
            EnumOptions.create = function create(properties) {
                return new EnumOptions(properties);
            };

            /**
             * Encodes the specified EnumOptions message. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.allowAlias != null && Object.hasOwnProperty.call(message, "allowAlias"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.allowAlias);
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                    for (var i = 0; i < message.uninterpretedOption.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified EnumOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumOptions} EnumOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 2:
                        message.allowAlias = reader.bool();
                        break;
                    case 3:
                        message.deprecated = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                            message.uninterpretedOption = [];
                        message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumOptions} EnumOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumOptions message.
             * @function verify
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                    if (typeof message.allowAlias !== "boolean")
                        return "allowAlias: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                        var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumOptions} EnumOptions
             */
            EnumOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumOptions)
                    return object;
                var message = new $root.google.protobuf.EnumOptions();
                if (object.allowAlias != null)
                    message.allowAlias = Boolean(object.allowAlias);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {google.protobuf.EnumOptions} message EnumOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults) {
                    object.allowAlias = false;
                    object.deprecated = false;
                }
                if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                    object.allowAlias = message.allowAlias;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (var j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                return object;
            };

            /**
             * Converts this EnumOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EnumOptions;
        })();

        protobuf.EnumValueOptions = (function() {

            /**
             * Properties of an EnumValueOptions.
             * @memberof google.protobuf
             * @interface IEnumValueOptions
             * @property {boolean|null} [deprecated] EnumValueOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumValueOptions uninterpretedOption
             */

            /**
             * Constructs a new EnumValueOptions.
             * @memberof google.protobuf
             * @classdesc Represents an EnumValueOptions.
             * @implements IEnumValueOptions
             * @constructor
             * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
             */
            function EnumValueOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumValueOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             */
            EnumValueOptions.prototype.deprecated = false;

            /**
             * EnumValueOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             */
            EnumValueOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * Creates a new EnumValueOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions instance
             */
            EnumValueOptions.create = function create(properties) {
                return new EnumValueOptions(properties);
            };

            /**
             * Encodes the specified EnumValueOptions message. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.deprecated);
                if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                    for (var i = 0; i < message.uninterpretedOption.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified EnumValueOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumValueOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.deprecated = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                            message.uninterpretedOption = [];
                        message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumValueOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumValueOptions message.
             * @function verify
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumValueOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                        var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
             */
            EnumValueOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumValueOptions)
                    return object;
                var message = new $root.google.protobuf.EnumValueOptions();
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {google.protobuf.EnumValueOptions} message EnumValueOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumValueOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults)
                    object.deprecated = false;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (var j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                return object;
            };

            /**
             * Converts this EnumValueOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumValueOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EnumValueOptions;
        })();

        protobuf.ServiceOptions = (function() {

            /**
             * Properties of a ServiceOptions.
             * @memberof google.protobuf
             * @interface IServiceOptions
             * @property {boolean|null} [deprecated] ServiceOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ServiceOptions uninterpretedOption
             * @property {akkaserverless.IServiceOptions|null} [".akkaserverless.service"] ServiceOptions .akkaserverless.service
             */

            /**
             * Constructs a new ServiceOptions.
             * @memberof google.protobuf
             * @classdesc Represents a ServiceOptions.
             * @implements IServiceOptions
             * @constructor
             * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
             */
            function ServiceOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ServiceOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.ServiceOptions
             * @instance
             */
            ServiceOptions.prototype.deprecated = false;

            /**
             * ServiceOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.ServiceOptions
             * @instance
             */
            ServiceOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * ServiceOptions .akkaserverless.service.
             * @member {akkaserverless.IServiceOptions|null|undefined} .akkaserverless.service
             * @memberof google.protobuf.ServiceOptions
             * @instance
             */
            ServiceOptions.prototype[".akkaserverless.service"] = null;

            /**
             * Creates a new ServiceOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
             * @returns {google.protobuf.ServiceOptions} ServiceOptions instance
             */
            ServiceOptions.create = function create(properties) {
                return new ServiceOptions(properties);
            };

            /**
             * Encodes the specified ServiceOptions message. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                    for (var i = 0; i < message.uninterpretedOption.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                if (message[".akkaserverless.service"] != null && Object.hasOwnProperty.call(message, ".akkaserverless.service"))
                    $root.akkaserverless.ServiceOptions.encode(message[".akkaserverless.service"], writer.uint32(/* id 1080, wireType 2 =*/8642).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ServiceOptions message, length delimited. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ServiceOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.ServiceOptions} ServiceOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 33:
                        message.deprecated = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                            message.uninterpretedOption = [];
                        message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    case 1080:
                        message[".akkaserverless.service"] = $root.akkaserverless.ServiceOptions.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ServiceOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.ServiceOptions} ServiceOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ServiceOptions message.
             * @function verify
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ServiceOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                        var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                if (message[".akkaserverless.service"] != null && message.hasOwnProperty(".akkaserverless.service")) {
                    var error = $root.akkaserverless.ServiceOptions.verify(message[".akkaserverless.service"]);
                    if (error)
                        return ".akkaserverless.service." + error;
                }
                return null;
            };

            /**
             * Creates a ServiceOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.ServiceOptions} ServiceOptions
             */
            ServiceOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.ServiceOptions)
                    return object;
                var message = new $root.google.protobuf.ServiceOptions();
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                if (object[".akkaserverless.service"] != null) {
                    if (typeof object[".akkaserverless.service"] !== "object")
                        throw TypeError(".google.protobuf.ServiceOptions..akkaserverless.service: object expected");
                    message[".akkaserverless.service"] = $root.akkaserverless.ServiceOptions.fromObject(object[".akkaserverless.service"]);
                }
                return message;
            };

            /**
             * Creates a plain object from a ServiceOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {google.protobuf.ServiceOptions} message ServiceOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ServiceOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults) {
                    object.deprecated = false;
                    object[".akkaserverless.service"] = null;
                }
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (var j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                if (message[".akkaserverless.service"] != null && message.hasOwnProperty(".akkaserverless.service"))
                    object[".akkaserverless.service"] = $root.akkaserverless.ServiceOptions.toObject(message[".akkaserverless.service"], options);
                return object;
            };

            /**
             * Converts this ServiceOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.ServiceOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ServiceOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ServiceOptions;
        })();

        protobuf.MethodOptions = (function() {

            /**
             * Properties of a MethodOptions.
             * @memberof google.protobuf
             * @interface IMethodOptions
             * @property {boolean|null} [deprecated] MethodOptions deprecated
             * @property {google.protobuf.MethodOptions.IdempotencyLevel|null} [idempotencyLevel] MethodOptions idempotencyLevel
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MethodOptions uninterpretedOption
             * @property {akkaserverless.IMethodOptions|null} [".akkaserverless.method"] MethodOptions .akkaserverless.method
             */

            /**
             * Constructs a new MethodOptions.
             * @memberof google.protobuf
             * @classdesc Represents a MethodOptions.
             * @implements IMethodOptions
             * @constructor
             * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
             */
            function MethodOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MethodOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype.deprecated = false;

            /**
             * MethodOptions idempotencyLevel.
             * @member {google.protobuf.MethodOptions.IdempotencyLevel} idempotencyLevel
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype.idempotencyLevel = 0;

            /**
             * MethodOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * MethodOptions .akkaserverless.method.
             * @member {akkaserverless.IMethodOptions|null|undefined} .akkaserverless.method
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype[".akkaserverless.method"] = null;

            /**
             * Creates a new MethodOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
             * @returns {google.protobuf.MethodOptions} MethodOptions instance
             */
            MethodOptions.create = function create(properties) {
                return new MethodOptions(properties);
            };

            /**
             * Encodes the specified MethodOptions message. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                if (message.idempotencyLevel != null && Object.hasOwnProperty.call(message, "idempotencyLevel"))
                    writer.uint32(/* id 34, wireType 0 =*/272).int32(message.idempotencyLevel);
                if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                    for (var i = 0; i < message.uninterpretedOption.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                if (message[".akkaserverless.method"] != null && Object.hasOwnProperty.call(message, ".akkaserverless.method"))
                    $root.akkaserverless.MethodOptions.encode(message[".akkaserverless.method"], writer.uint32(/* id 1080, wireType 2 =*/8642).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified MethodOptions message, length delimited. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MethodOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.MethodOptions} MethodOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 33:
                        message.deprecated = reader.bool();
                        break;
                    case 34:
                        message.idempotencyLevel = reader.int32();
                        break;
                    case 999:
                        if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                            message.uninterpretedOption = [];
                        message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    case 1080:
                        message[".akkaserverless.method"] = $root.akkaserverless.MethodOptions.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MethodOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.MethodOptions} MethodOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MethodOptions message.
             * @function verify
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MethodOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                    switch (message.idempotencyLevel) {
                    default:
                        return "idempotencyLevel: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                        var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                if (message[".akkaserverless.method"] != null && message.hasOwnProperty(".akkaserverless.method")) {
                    var error = $root.akkaserverless.MethodOptions.verify(message[".akkaserverless.method"]);
                    if (error)
                        return ".akkaserverless.method." + error;
                }
                return null;
            };

            /**
             * Creates a MethodOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MethodOptions} MethodOptions
             */
            MethodOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.MethodOptions)
                    return object;
                var message = new $root.google.protobuf.MethodOptions();
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                switch (object.idempotencyLevel) {
                case "IDEMPOTENCY_UNKNOWN":
                case 0:
                    message.idempotencyLevel = 0;
                    break;
                case "NO_SIDE_EFFECTS":
                case 1:
                    message.idempotencyLevel = 1;
                    break;
                case "IDEMPOTENT":
                case 2:
                    message.idempotencyLevel = 2;
                    break;
                }
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                if (object[".akkaserverless.method"] != null) {
                    if (typeof object[".akkaserverless.method"] !== "object")
                        throw TypeError(".google.protobuf.MethodOptions..akkaserverless.method: object expected");
                    message[".akkaserverless.method"] = $root.akkaserverless.MethodOptions.fromObject(object[".akkaserverless.method"]);
                }
                return message;
            };

            /**
             * Creates a plain object from a MethodOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {google.protobuf.MethodOptions} message MethodOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MethodOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults) {
                    object.deprecated = false;
                    object.idempotencyLevel = options.enums === String ? "IDEMPOTENCY_UNKNOWN" : 0;
                    object[".akkaserverless.method"] = null;
                }
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                    object.idempotencyLevel = options.enums === String ? $root.google.protobuf.MethodOptions.IdempotencyLevel[message.idempotencyLevel] : message.idempotencyLevel;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (var j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                if (message[".akkaserverless.method"] != null && message.hasOwnProperty(".akkaserverless.method"))
                    object[".akkaserverless.method"] = $root.akkaserverless.MethodOptions.toObject(message[".akkaserverless.method"], options);
                return object;
            };

            /**
             * Converts this MethodOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.MethodOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MethodOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * IdempotencyLevel enum.
             * @name google.protobuf.MethodOptions.IdempotencyLevel
             * @enum {number}
             * @property {number} IDEMPOTENCY_UNKNOWN=0 IDEMPOTENCY_UNKNOWN value
             * @property {number} NO_SIDE_EFFECTS=1 NO_SIDE_EFFECTS value
             * @property {number} IDEMPOTENT=2 IDEMPOTENT value
             */
            MethodOptions.IdempotencyLevel = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "IDEMPOTENCY_UNKNOWN"] = 0;
                values[valuesById[1] = "NO_SIDE_EFFECTS"] = 1;
                values[valuesById[2] = "IDEMPOTENT"] = 2;
                return values;
            })();

            return MethodOptions;
        })();

        protobuf.UninterpretedOption = (function() {

            /**
             * Properties of an UninterpretedOption.
             * @memberof google.protobuf
             * @interface IUninterpretedOption
             * @property {Array.<google.protobuf.UninterpretedOption.INamePart>|null} [name] UninterpretedOption name
             * @property {string|null} [identifierValue] UninterpretedOption identifierValue
             * @property {number|Long|null} [positiveIntValue] UninterpretedOption positiveIntValue
             * @property {number|Long|null} [negativeIntValue] UninterpretedOption negativeIntValue
             * @property {number|null} [doubleValue] UninterpretedOption doubleValue
             * @property {Uint8Array|null} [stringValue] UninterpretedOption stringValue
             * @property {string|null} [aggregateValue] UninterpretedOption aggregateValue
             */

            /**
             * Constructs a new UninterpretedOption.
             * @memberof google.protobuf
             * @classdesc Represents an UninterpretedOption.
             * @implements IUninterpretedOption
             * @constructor
             * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
             */
            function UninterpretedOption(properties) {
                this.name = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UninterpretedOption name.
             * @member {Array.<google.protobuf.UninterpretedOption.INamePart>} name
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.name = $util.emptyArray;

            /**
             * UninterpretedOption identifierValue.
             * @member {string} identifierValue
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.identifierValue = "";

            /**
             * UninterpretedOption positiveIntValue.
             * @member {number|Long} positiveIntValue
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.positiveIntValue = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * UninterpretedOption negativeIntValue.
             * @member {number|Long} negativeIntValue
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.negativeIntValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * UninterpretedOption doubleValue.
             * @member {number} doubleValue
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.doubleValue = 0;

            /**
             * UninterpretedOption stringValue.
             * @member {Uint8Array} stringValue
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.stringValue = $util.newBuffer([]);

            /**
             * UninterpretedOption aggregateValue.
             * @member {string} aggregateValue
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.aggregateValue = "";

            /**
             * Creates a new UninterpretedOption instance using the specified properties.
             * @function create
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption instance
             */
            UninterpretedOption.create = function create(properties) {
                return new UninterpretedOption(properties);
            };

            /**
             * Encodes the specified UninterpretedOption message. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UninterpretedOption.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && message.name.length)
                    for (var i = 0; i < message.name.length; ++i)
                        $root.google.protobuf.UninterpretedOption.NamePart.encode(message.name[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.identifierValue != null && Object.hasOwnProperty.call(message, "identifierValue"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.identifierValue);
                if (message.positiveIntValue != null && Object.hasOwnProperty.call(message, "positiveIntValue"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.positiveIntValue);
                if (message.negativeIntValue != null && Object.hasOwnProperty.call(message, "negativeIntValue"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int64(message.negativeIntValue);
                if (message.doubleValue != null && Object.hasOwnProperty.call(message, "doubleValue"))
                    writer.uint32(/* id 6, wireType 1 =*/49).double(message.doubleValue);
                if (message.stringValue != null && Object.hasOwnProperty.call(message, "stringValue"))
                    writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.stringValue);
                if (message.aggregateValue != null && Object.hasOwnProperty.call(message, "aggregateValue"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.aggregateValue);
                return writer;
            };

            /**
             * Encodes the specified UninterpretedOption message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UninterpretedOption.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an UninterpretedOption message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UninterpretedOption.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 2:
                        if (!(message.name && message.name.length))
                            message.name = [];
                        message.name.push($root.google.protobuf.UninterpretedOption.NamePart.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.identifierValue = reader.string();
                        break;
                    case 4:
                        message.positiveIntValue = reader.uint64();
                        break;
                    case 5:
                        message.negativeIntValue = reader.int64();
                        break;
                    case 6:
                        message.doubleValue = reader.double();
                        break;
                    case 7:
                        message.stringValue = reader.bytes();
                        break;
                    case 8:
                        message.aggregateValue = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an UninterpretedOption message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UninterpretedOption.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an UninterpretedOption message.
             * @function verify
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UninterpretedOption.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name")) {
                    if (!Array.isArray(message.name))
                        return "name: array expected";
                    for (var i = 0; i < message.name.length; ++i) {
                        var error = $root.google.protobuf.UninterpretedOption.NamePart.verify(message.name[i]);
                        if (error)
                            return "name." + error;
                    }
                }
                if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                    if (!$util.isString(message.identifierValue))
                        return "identifierValue: string expected";
                if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                    if (!$util.isInteger(message.positiveIntValue) && !(message.positiveIntValue && $util.isInteger(message.positiveIntValue.low) && $util.isInteger(message.positiveIntValue.high)))
                        return "positiveIntValue: integer|Long expected";
                if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                    if (!$util.isInteger(message.negativeIntValue) && !(message.negativeIntValue && $util.isInteger(message.negativeIntValue.low) && $util.isInteger(message.negativeIntValue.high)))
                        return "negativeIntValue: integer|Long expected";
                if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                    if (typeof message.doubleValue !== "number")
                        return "doubleValue: number expected";
                if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                    if (!(message.stringValue && typeof message.stringValue.length === "number" || $util.isString(message.stringValue)))
                        return "stringValue: buffer expected";
                if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                    if (!$util.isString(message.aggregateValue))
                        return "aggregateValue: string expected";
                return null;
            };

            /**
             * Creates an UninterpretedOption message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
             */
            UninterpretedOption.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.UninterpretedOption)
                    return object;
                var message = new $root.google.protobuf.UninterpretedOption();
                if (object.name) {
                    if (!Array.isArray(object.name))
                        throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
                    message.name = [];
                    for (var i = 0; i < object.name.length; ++i) {
                        if (typeof object.name[i] !== "object")
                            throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
                        message.name[i] = $root.google.protobuf.UninterpretedOption.NamePart.fromObject(object.name[i]);
                    }
                }
                if (object.identifierValue != null)
                    message.identifierValue = String(object.identifierValue);
                if (object.positiveIntValue != null)
                    if ($util.Long)
                        (message.positiveIntValue = $util.Long.fromValue(object.positiveIntValue)).unsigned = true;
                    else if (typeof object.positiveIntValue === "string")
                        message.positiveIntValue = parseInt(object.positiveIntValue, 10);
                    else if (typeof object.positiveIntValue === "number")
                        message.positiveIntValue = object.positiveIntValue;
                    else if (typeof object.positiveIntValue === "object")
                        message.positiveIntValue = new $util.LongBits(object.positiveIntValue.low >>> 0, object.positiveIntValue.high >>> 0).toNumber(true);
                if (object.negativeIntValue != null)
                    if ($util.Long)
                        (message.negativeIntValue = $util.Long.fromValue(object.negativeIntValue)).unsigned = false;
                    else if (typeof object.negativeIntValue === "string")
                        message.negativeIntValue = parseInt(object.negativeIntValue, 10);
                    else if (typeof object.negativeIntValue === "number")
                        message.negativeIntValue = object.negativeIntValue;
                    else if (typeof object.negativeIntValue === "object")
                        message.negativeIntValue = new $util.LongBits(object.negativeIntValue.low >>> 0, object.negativeIntValue.high >>> 0).toNumber();
                if (object.doubleValue != null)
                    message.doubleValue = Number(object.doubleValue);
                if (object.stringValue != null)
                    if (typeof object.stringValue === "string")
                        $util.base64.decode(object.stringValue, message.stringValue = $util.newBuffer($util.base64.length(object.stringValue)), 0);
                    else if (object.stringValue.length)
                        message.stringValue = object.stringValue;
                if (object.aggregateValue != null)
                    message.aggregateValue = String(object.aggregateValue);
                return message;
            };

            /**
             * Creates a plain object from an UninterpretedOption message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {google.protobuf.UninterpretedOption} message UninterpretedOption
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UninterpretedOption.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.name = [];
                if (options.defaults) {
                    object.identifierValue = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.positiveIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.positiveIntValue = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.negativeIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.negativeIntValue = options.longs === String ? "0" : 0;
                    object.doubleValue = 0;
                    if (options.bytes === String)
                        object.stringValue = "";
                    else {
                        object.stringValue = [];
                        if (options.bytes !== Array)
                            object.stringValue = $util.newBuffer(object.stringValue);
                    }
                    object.aggregateValue = "";
                }
                if (message.name && message.name.length) {
                    object.name = [];
                    for (var j = 0; j < message.name.length; ++j)
                        object.name[j] = $root.google.protobuf.UninterpretedOption.NamePart.toObject(message.name[j], options);
                }
                if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                    object.identifierValue = message.identifierValue;
                if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                    if (typeof message.positiveIntValue === "number")
                        object.positiveIntValue = options.longs === String ? String(message.positiveIntValue) : message.positiveIntValue;
                    else
                        object.positiveIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.positiveIntValue) : options.longs === Number ? new $util.LongBits(message.positiveIntValue.low >>> 0, message.positiveIntValue.high >>> 0).toNumber(true) : message.positiveIntValue;
                if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                    if (typeof message.negativeIntValue === "number")
                        object.negativeIntValue = options.longs === String ? String(message.negativeIntValue) : message.negativeIntValue;
                    else
                        object.negativeIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.negativeIntValue) : options.longs === Number ? new $util.LongBits(message.negativeIntValue.low >>> 0, message.negativeIntValue.high >>> 0).toNumber() : message.negativeIntValue;
                if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                    object.doubleValue = options.json && !isFinite(message.doubleValue) ? String(message.doubleValue) : message.doubleValue;
                if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                    object.stringValue = options.bytes === String ? $util.base64.encode(message.stringValue, 0, message.stringValue.length) : options.bytes === Array ? Array.prototype.slice.call(message.stringValue) : message.stringValue;
                if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                    object.aggregateValue = message.aggregateValue;
                return object;
            };

            /**
             * Converts this UninterpretedOption to JSON.
             * @function toJSON
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UninterpretedOption.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            UninterpretedOption.NamePart = (function() {

                /**
                 * Properties of a NamePart.
                 * @memberof google.protobuf.UninterpretedOption
                 * @interface INamePart
                 * @property {string} namePart NamePart namePart
                 * @property {boolean} isExtension NamePart isExtension
                 */

                /**
                 * Constructs a new NamePart.
                 * @memberof google.protobuf.UninterpretedOption
                 * @classdesc Represents a NamePart.
                 * @implements INamePart
                 * @constructor
                 * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                 */
                function NamePart(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * NamePart namePart.
                 * @member {string} namePart
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @instance
                 */
                NamePart.prototype.namePart = "";

                /**
                 * NamePart isExtension.
                 * @member {boolean} isExtension
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @instance
                 */
                NamePart.prototype.isExtension = false;

                /**
                 * Creates a new NamePart instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart instance
                 */
                NamePart.create = function create(properties) {
                    return new NamePart(properties);
                };

                /**
                 * Encodes the specified NamePart message. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NamePart.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.namePart);
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isExtension);
                    return writer;
                };

                /**
                 * Encodes the specified NamePart message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NamePart.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a NamePart message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NamePart.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption.NamePart();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.namePart = reader.string();
                            break;
                        case 2:
                            message.isExtension = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("namePart"))
                        throw $util.ProtocolError("missing required 'namePart'", { instance: message });
                    if (!message.hasOwnProperty("isExtension"))
                        throw $util.ProtocolError("missing required 'isExtension'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a NamePart message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NamePart.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a NamePart message.
                 * @function verify
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                NamePart.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isString(message.namePart))
                        return "namePart: string expected";
                    if (typeof message.isExtension !== "boolean")
                        return "isExtension: boolean expected";
                    return null;
                };

                /**
                 * Creates a NamePart message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                 */
                NamePart.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.UninterpretedOption.NamePart)
                        return object;
                    var message = new $root.google.protobuf.UninterpretedOption.NamePart();
                    if (object.namePart != null)
                        message.namePart = String(object.namePart);
                    if (object.isExtension != null)
                        message.isExtension = Boolean(object.isExtension);
                    return message;
                };

                /**
                 * Creates a plain object from a NamePart message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {google.protobuf.UninterpretedOption.NamePart} message NamePart
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                NamePart.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.namePart = "";
                        object.isExtension = false;
                    }
                    if (message.namePart != null && message.hasOwnProperty("namePart"))
                        object.namePart = message.namePart;
                    if (message.isExtension != null && message.hasOwnProperty("isExtension"))
                        object.isExtension = message.isExtension;
                    return object;
                };

                /**
                 * Converts this NamePart to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                NamePart.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return NamePart;
            })();

            return UninterpretedOption;
        })();

        protobuf.SourceCodeInfo = (function() {

            /**
             * Properties of a SourceCodeInfo.
             * @memberof google.protobuf
             * @interface ISourceCodeInfo
             * @property {Array.<google.protobuf.SourceCodeInfo.ILocation>|null} [location] SourceCodeInfo location
             */

            /**
             * Constructs a new SourceCodeInfo.
             * @memberof google.protobuf
             * @classdesc Represents a SourceCodeInfo.
             * @implements ISourceCodeInfo
             * @constructor
             * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
             */
            function SourceCodeInfo(properties) {
                this.location = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SourceCodeInfo location.
             * @member {Array.<google.protobuf.SourceCodeInfo.ILocation>} location
             * @memberof google.protobuf.SourceCodeInfo
             * @instance
             */
            SourceCodeInfo.prototype.location = $util.emptyArray;

            /**
             * Creates a new SourceCodeInfo instance using the specified properties.
             * @function create
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo instance
             */
            SourceCodeInfo.create = function create(properties) {
                return new SourceCodeInfo(properties);
            };

            /**
             * Encodes the specified SourceCodeInfo message. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SourceCodeInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.location != null && message.location.length)
                    for (var i = 0; i < message.location.length; ++i)
                        $root.google.protobuf.SourceCodeInfo.Location.encode(message.location[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified SourceCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SourceCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SourceCodeInfo message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SourceCodeInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.location && message.location.length))
                            message.location = [];
                        message.location.push($root.google.protobuf.SourceCodeInfo.Location.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SourceCodeInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SourceCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SourceCodeInfo message.
             * @function verify
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SourceCodeInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.location != null && message.hasOwnProperty("location")) {
                    if (!Array.isArray(message.location))
                        return "location: array expected";
                    for (var i = 0; i < message.location.length; ++i) {
                        var error = $root.google.protobuf.SourceCodeInfo.Location.verify(message.location[i]);
                        if (error)
                            return "location." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a SourceCodeInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
             */
            SourceCodeInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.SourceCodeInfo)
                    return object;
                var message = new $root.google.protobuf.SourceCodeInfo();
                if (object.location) {
                    if (!Array.isArray(object.location))
                        throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
                    message.location = [];
                    for (var i = 0; i < object.location.length; ++i) {
                        if (typeof object.location[i] !== "object")
                            throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
                        message.location[i] = $root.google.protobuf.SourceCodeInfo.Location.fromObject(object.location[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a SourceCodeInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {google.protobuf.SourceCodeInfo} message SourceCodeInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SourceCodeInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.location = [];
                if (message.location && message.location.length) {
                    object.location = [];
                    for (var j = 0; j < message.location.length; ++j)
                        object.location[j] = $root.google.protobuf.SourceCodeInfo.Location.toObject(message.location[j], options);
                }
                return object;
            };

            /**
             * Converts this SourceCodeInfo to JSON.
             * @function toJSON
             * @memberof google.protobuf.SourceCodeInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SourceCodeInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            SourceCodeInfo.Location = (function() {

                /**
                 * Properties of a Location.
                 * @memberof google.protobuf.SourceCodeInfo
                 * @interface ILocation
                 * @property {Array.<number>|null} [path] Location path
                 * @property {Array.<number>|null} [span] Location span
                 * @property {string|null} [leadingComments] Location leadingComments
                 * @property {string|null} [trailingComments] Location trailingComments
                 * @property {Array.<string>|null} [leadingDetachedComments] Location leadingDetachedComments
                 */

                /**
                 * Constructs a new Location.
                 * @memberof google.protobuf.SourceCodeInfo
                 * @classdesc Represents a Location.
                 * @implements ILocation
                 * @constructor
                 * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                 */
                function Location(properties) {
                    this.path = [];
                    this.span = [];
                    this.leadingDetachedComments = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Location path.
                 * @member {Array.<number>} path
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.path = $util.emptyArray;

                /**
                 * Location span.
                 * @member {Array.<number>} span
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.span = $util.emptyArray;

                /**
                 * Location leadingComments.
                 * @member {string} leadingComments
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.leadingComments = "";

                /**
                 * Location trailingComments.
                 * @member {string} trailingComments
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.trailingComments = "";

                /**
                 * Location leadingDetachedComments.
                 * @member {Array.<string>} leadingDetachedComments
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.leadingDetachedComments = $util.emptyArray;

                /**
                 * Creates a new Location instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location instance
                 */
                Location.create = function create(properties) {
                    return new Location(properties);
                };

                /**
                 * Encodes the specified Location message. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Location.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.path != null && message.path.length) {
                        writer.uint32(/* id 1, wireType 2 =*/10).fork();
                        for (var i = 0; i < message.path.length; ++i)
                            writer.int32(message.path[i]);
                        writer.ldelim();
                    }
                    if (message.span != null && message.span.length) {
                        writer.uint32(/* id 2, wireType 2 =*/18).fork();
                        for (var i = 0; i < message.span.length; ++i)
                            writer.int32(message.span[i]);
                        writer.ldelim();
                    }
                    if (message.leadingComments != null && Object.hasOwnProperty.call(message, "leadingComments"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.leadingComments);
                    if (message.trailingComments != null && Object.hasOwnProperty.call(message, "trailingComments"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.trailingComments);
                    if (message.leadingDetachedComments != null && message.leadingDetachedComments.length)
                        for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.leadingDetachedComments[i]);
                    return writer;
                };

                /**
                 * Encodes the specified Location message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Location.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Location message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Location.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo.Location();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.path && message.path.length))
                                message.path = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.path.push(reader.int32());
                            } else
                                message.path.push(reader.int32());
                            break;
                        case 2:
                            if (!(message.span && message.span.length))
                                message.span = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.span.push(reader.int32());
                            } else
                                message.span.push(reader.int32());
                            break;
                        case 3:
                            message.leadingComments = reader.string();
                            break;
                        case 4:
                            message.trailingComments = reader.string();
                            break;
                        case 6:
                            if (!(message.leadingDetachedComments && message.leadingDetachedComments.length))
                                message.leadingDetachedComments = [];
                            message.leadingDetachedComments.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Location message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Location.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Location message.
                 * @function verify
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Location.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.path != null && message.hasOwnProperty("path")) {
                        if (!Array.isArray(message.path))
                            return "path: array expected";
                        for (var i = 0; i < message.path.length; ++i)
                            if (!$util.isInteger(message.path[i]))
                                return "path: integer[] expected";
                    }
                    if (message.span != null && message.hasOwnProperty("span")) {
                        if (!Array.isArray(message.span))
                            return "span: array expected";
                        for (var i = 0; i < message.span.length; ++i)
                            if (!$util.isInteger(message.span[i]))
                                return "span: integer[] expected";
                    }
                    if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                        if (!$util.isString(message.leadingComments))
                            return "leadingComments: string expected";
                    if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                        if (!$util.isString(message.trailingComments))
                            return "trailingComments: string expected";
                    if (message.leadingDetachedComments != null && message.hasOwnProperty("leadingDetachedComments")) {
                        if (!Array.isArray(message.leadingDetachedComments))
                            return "leadingDetachedComments: array expected";
                        for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                            if (!$util.isString(message.leadingDetachedComments[i]))
                                return "leadingDetachedComments: string[] expected";
                    }
                    return null;
                };

                /**
                 * Creates a Location message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location
                 */
                Location.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.SourceCodeInfo.Location)
                        return object;
                    var message = new $root.google.protobuf.SourceCodeInfo.Location();
                    if (object.path) {
                        if (!Array.isArray(object.path))
                            throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
                        message.path = [];
                        for (var i = 0; i < object.path.length; ++i)
                            message.path[i] = object.path[i] | 0;
                    }
                    if (object.span) {
                        if (!Array.isArray(object.span))
                            throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
                        message.span = [];
                        for (var i = 0; i < object.span.length; ++i)
                            message.span[i] = object.span[i] | 0;
                    }
                    if (object.leadingComments != null)
                        message.leadingComments = String(object.leadingComments);
                    if (object.trailingComments != null)
                        message.trailingComments = String(object.trailingComments);
                    if (object.leadingDetachedComments) {
                        if (!Array.isArray(object.leadingDetachedComments))
                            throw TypeError(".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected");
                        message.leadingDetachedComments = [];
                        for (var i = 0; i < object.leadingDetachedComments.length; ++i)
                            message.leadingDetachedComments[i] = String(object.leadingDetachedComments[i]);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a Location message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {google.protobuf.SourceCodeInfo.Location} message Location
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Location.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.path = [];
                        object.span = [];
                        object.leadingDetachedComments = [];
                    }
                    if (options.defaults) {
                        object.leadingComments = "";
                        object.trailingComments = "";
                    }
                    if (message.path && message.path.length) {
                        object.path = [];
                        for (var j = 0; j < message.path.length; ++j)
                            object.path[j] = message.path[j];
                    }
                    if (message.span && message.span.length) {
                        object.span = [];
                        for (var j = 0; j < message.span.length; ++j)
                            object.span[j] = message.span[j];
                    }
                    if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                        object.leadingComments = message.leadingComments;
                    if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                        object.trailingComments = message.trailingComments;
                    if (message.leadingDetachedComments && message.leadingDetachedComments.length) {
                        object.leadingDetachedComments = [];
                        for (var j = 0; j < message.leadingDetachedComments.length; ++j)
                            object.leadingDetachedComments[j] = message.leadingDetachedComments[j];
                    }
                    return object;
                };

                /**
                 * Converts this Location to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Location.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Location;
            })();

            return SourceCodeInfo;
        })();

        protobuf.GeneratedCodeInfo = (function() {

            /**
             * Properties of a GeneratedCodeInfo.
             * @memberof google.protobuf
             * @interface IGeneratedCodeInfo
             * @property {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>|null} [annotation] GeneratedCodeInfo annotation
             */

            /**
             * Constructs a new GeneratedCodeInfo.
             * @memberof google.protobuf
             * @classdesc Represents a GeneratedCodeInfo.
             * @implements IGeneratedCodeInfo
             * @constructor
             * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
             */
            function GeneratedCodeInfo(properties) {
                this.annotation = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GeneratedCodeInfo annotation.
             * @member {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>} annotation
             * @memberof google.protobuf.GeneratedCodeInfo
             * @instance
             */
            GeneratedCodeInfo.prototype.annotation = $util.emptyArray;

            /**
             * Creates a new GeneratedCodeInfo instance using the specified properties.
             * @function create
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo instance
             */
            GeneratedCodeInfo.create = function create(properties) {
                return new GeneratedCodeInfo(properties);
            };

            /**
             * Encodes the specified GeneratedCodeInfo message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GeneratedCodeInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.annotation != null && message.annotation.length)
                    for (var i = 0; i < message.annotation.length; ++i)
                        $root.google.protobuf.GeneratedCodeInfo.Annotation.encode(message.annotation[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GeneratedCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GeneratedCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GeneratedCodeInfo message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GeneratedCodeInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.annotation && message.annotation.length))
                            message.annotation = [];
                        message.annotation.push($root.google.protobuf.GeneratedCodeInfo.Annotation.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GeneratedCodeInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GeneratedCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GeneratedCodeInfo message.
             * @function verify
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GeneratedCodeInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.annotation != null && message.hasOwnProperty("annotation")) {
                    if (!Array.isArray(message.annotation))
                        return "annotation: array expected";
                    for (var i = 0; i < message.annotation.length; ++i) {
                        var error = $root.google.protobuf.GeneratedCodeInfo.Annotation.verify(message.annotation[i]);
                        if (error)
                            return "annotation." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a GeneratedCodeInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
             */
            GeneratedCodeInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.GeneratedCodeInfo)
                    return object;
                var message = new $root.google.protobuf.GeneratedCodeInfo();
                if (object.annotation) {
                    if (!Array.isArray(object.annotation))
                        throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
                    message.annotation = [];
                    for (var i = 0; i < object.annotation.length; ++i) {
                        if (typeof object.annotation[i] !== "object")
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
                        message.annotation[i] = $root.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(object.annotation[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a GeneratedCodeInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {google.protobuf.GeneratedCodeInfo} message GeneratedCodeInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GeneratedCodeInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.annotation = [];
                if (message.annotation && message.annotation.length) {
                    object.annotation = [];
                    for (var j = 0; j < message.annotation.length; ++j)
                        object.annotation[j] = $root.google.protobuf.GeneratedCodeInfo.Annotation.toObject(message.annotation[j], options);
                }
                return object;
            };

            /**
             * Converts this GeneratedCodeInfo to JSON.
             * @function toJSON
             * @memberof google.protobuf.GeneratedCodeInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GeneratedCodeInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            GeneratedCodeInfo.Annotation = (function() {

                /**
                 * Properties of an Annotation.
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @interface IAnnotation
                 * @property {Array.<number>|null} [path] Annotation path
                 * @property {string|null} [sourceFile] Annotation sourceFile
                 * @property {number|null} [begin] Annotation begin
                 * @property {number|null} [end] Annotation end
                 */

                /**
                 * Constructs a new Annotation.
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @classdesc Represents an Annotation.
                 * @implements IAnnotation
                 * @constructor
                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                 */
                function Annotation(properties) {
                    this.path = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Annotation path.
                 * @member {Array.<number>} path
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.path = $util.emptyArray;

                /**
                 * Annotation sourceFile.
                 * @member {string} sourceFile
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.sourceFile = "";

                /**
                 * Annotation begin.
                 * @member {number} begin
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.begin = 0;

                /**
                 * Annotation end.
                 * @member {number} end
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.end = 0;

                /**
                 * Creates a new Annotation instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation instance
                 */
                Annotation.create = function create(properties) {
                    return new Annotation(properties);
                };

                /**
                 * Encodes the specified Annotation message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Annotation.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.path != null && message.path.length) {
                        writer.uint32(/* id 1, wireType 2 =*/10).fork();
                        for (var i = 0; i < message.path.length; ++i)
                            writer.int32(message.path[i]);
                        writer.ldelim();
                    }
                    if (message.sourceFile != null && Object.hasOwnProperty.call(message, "sourceFile"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.sourceFile);
                    if (message.begin != null && Object.hasOwnProperty.call(message, "begin"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.begin);
                    if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.end);
                    return writer;
                };

                /**
                 * Encodes the specified Annotation message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Annotation.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an Annotation message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Annotation.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.path && message.path.length))
                                message.path = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.path.push(reader.int32());
                            } else
                                message.path.push(reader.int32());
                            break;
                        case 2:
                            message.sourceFile = reader.string();
                            break;
                        case 3:
                            message.begin = reader.int32();
                            break;
                        case 4:
                            message.end = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an Annotation message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Annotation.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an Annotation message.
                 * @function verify
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Annotation.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.path != null && message.hasOwnProperty("path")) {
                        if (!Array.isArray(message.path))
                            return "path: array expected";
                        for (var i = 0; i < message.path.length; ++i)
                            if (!$util.isInteger(message.path[i]))
                                return "path: integer[] expected";
                    }
                    if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                        if (!$util.isString(message.sourceFile))
                            return "sourceFile: string expected";
                    if (message.begin != null && message.hasOwnProperty("begin"))
                        if (!$util.isInteger(message.begin))
                            return "begin: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    return null;
                };

                /**
                 * Creates an Annotation message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                 */
                Annotation.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.GeneratedCodeInfo.Annotation)
                        return object;
                    var message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                    if (object.path) {
                        if (!Array.isArray(object.path))
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
                        message.path = [];
                        for (var i = 0; i < object.path.length; ++i)
                            message.path[i] = object.path[i] | 0;
                    }
                    if (object.sourceFile != null)
                        message.sourceFile = String(object.sourceFile);
                    if (object.begin != null)
                        message.begin = object.begin | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    return message;
                };

                /**
                 * Creates a plain object from an Annotation message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo.Annotation} message Annotation
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Annotation.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.path = [];
                    if (options.defaults) {
                        object.sourceFile = "";
                        object.begin = 0;
                        object.end = 0;
                    }
                    if (message.path && message.path.length) {
                        object.path = [];
                        for (var j = 0; j < message.path.length; ++j)
                            object.path[j] = message.path[j];
                    }
                    if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                        object.sourceFile = message.sourceFile;
                    if (message.begin != null && message.hasOwnProperty("begin"))
                        object.begin = message.begin;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    return object;
                };

                /**
                 * Converts this Annotation to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Annotation.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Annotation;
            })();

            return GeneratedCodeInfo;
        })();

        protobuf.Empty = (function() {

            /**
             * Properties of an Empty.
             * @memberof google.protobuf
             * @interface IEmpty
             */

            /**
             * Constructs a new Empty.
             * @memberof google.protobuf
             * @classdesc Represents an Empty.
             * @implements IEmpty
             * @constructor
             * @param {google.protobuf.IEmpty=} [properties] Properties to set
             */
            function Empty(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new Empty instance using the specified properties.
             * @function create
             * @memberof google.protobuf.Empty
             * @static
             * @param {google.protobuf.IEmpty=} [properties] Properties to set
             * @returns {google.protobuf.Empty} Empty instance
             */
            Empty.create = function create(properties) {
                return new Empty(properties);
            };

            /**
             * Encodes the specified Empty message. Does not implicitly {@link google.protobuf.Empty.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.Empty
             * @static
             * @param {google.protobuf.IEmpty} message Empty message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Empty.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified Empty message, length delimited. Does not implicitly {@link google.protobuf.Empty.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.Empty
             * @static
             * @param {google.protobuf.IEmpty} message Empty message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Empty.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an Empty message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.Empty
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.Empty} Empty
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Empty.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Empty();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an Empty message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.Empty
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.Empty} Empty
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Empty.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an Empty message.
             * @function verify
             * @memberof google.protobuf.Empty
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Empty.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates an Empty message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.Empty
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.Empty} Empty
             */
            Empty.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.Empty)
                    return object;
                return new $root.google.protobuf.Empty();
            };

            /**
             * Creates a plain object from an Empty message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.Empty
             * @static
             * @param {google.protobuf.Empty} message Empty
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Empty.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this Empty to JSON.
             * @function toJSON
             * @memberof google.protobuf.Empty
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Empty.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Empty;
        })();

        protobuf.Any = (function() {

            /**
             * Properties of an Any.
             * @memberof google.protobuf
             * @interface IAny
             * @property {string|null} [type_url] Any type_url
             * @property {Uint8Array|null} [value] Any value
             */

            /**
             * Constructs a new Any.
             * @memberof google.protobuf
             * @classdesc Represents an Any.
             * @implements IAny
             * @constructor
             * @param {google.protobuf.IAny=} [properties] Properties to set
             */
            function Any(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Any type_url.
             * @member {string} type_url
             * @memberof google.protobuf.Any
             * @instance
             */
            Any.prototype.type_url = "";

            /**
             * Any value.
             * @member {Uint8Array} value
             * @memberof google.protobuf.Any
             * @instance
             */
            Any.prototype.value = $util.newBuffer([]);

            /**
             * Creates a new Any instance using the specified properties.
             * @function create
             * @memberof google.protobuf.Any
             * @static
             * @param {google.protobuf.IAny=} [properties] Properties to set
             * @returns {google.protobuf.Any} Any instance
             */
            Any.create = function create(properties) {
                return new Any(properties);
            };

            /**
             * Encodes the specified Any message. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.Any
             * @static
             * @param {google.protobuf.IAny} message Any message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Any.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.type_url != null && Object.hasOwnProperty.call(message, "type_url"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.type_url);
                if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);
                return writer;
            };

            /**
             * Encodes the specified Any message, length delimited. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.Any
             * @static
             * @param {google.protobuf.IAny} message Any message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Any.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an Any message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.Any
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.Any} Any
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Any.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Any();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.type_url = reader.string();
                        break;
                    case 2:
                        message.value = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an Any message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.Any
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.Any} Any
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Any.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an Any message.
             * @function verify
             * @memberof google.protobuf.Any
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Any.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.type_url != null && message.hasOwnProperty("type_url"))
                    if (!$util.isString(message.type_url))
                        return "type_url: string expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                        return "value: buffer expected";
                return null;
            };

            /**
             * Creates an Any message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.Any
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.Any} Any
             */
            Any.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.Any)
                    return object;
                var message = new $root.google.protobuf.Any();
                if (object.type_url != null)
                    message.type_url = String(object.type_url);
                if (object.value != null)
                    if (typeof object.value === "string")
                        $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                    else if (object.value.length)
                        message.value = object.value;
                return message;
            };

            /**
             * Creates a plain object from an Any message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.Any
             * @static
             * @param {google.protobuf.Any} message Any
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Any.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.type_url = "";
                    if (options.bytes === String)
                        object.value = "";
                    else {
                        object.value = [];
                        if (options.bytes !== Array)
                            object.value = $util.newBuffer(object.value);
                    }
                }
                if (message.type_url != null && message.hasOwnProperty("type_url"))
                    object.type_url = message.type_url;
                if (message.value != null && message.hasOwnProperty("value"))
                    object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                return object;
            };

            /**
             * Converts this Any to JSON.
             * @function toJSON
             * @memberof google.protobuf.Any
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Any.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Any;
        })();

        return protobuf;
    })();

    return google;
})();

module.exports = $root;
